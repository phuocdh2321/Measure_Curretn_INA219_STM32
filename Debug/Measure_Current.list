
Measure_Current.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800ee78  0800ee78  0001ee78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f33c  0800f33c  000209b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f33c  0800f33c  0001f33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f344  0800f344  000209b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800f344  0800f344  0001f344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800f350  0800f350  0001f350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009b8  20000000  0800f358  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  200009b8  0800fd10  000209b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d28  0800fd10  00020d28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030619  00000000  00000000  000209e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d85  00000000  00000000  00050ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e38  00000000  00000000  00054d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001db0  00000000  00000000  00056bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca35  00000000  00000000  00058968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177a5  00000000  00000000  0007539d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a13be  00000000  00000000  0008cb42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012df00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d30  00000000  00000000  0012df50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200009b8 	.word	0x200009b8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ee5c 	.word	0x0800ee5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200009bc 	.word	0x200009bc
 800014c:	0800ee5c 	.word	0x0800ee5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_uldivmod>:
 8000a88:	b953      	cbnz	r3, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8a:	b94a      	cbnz	r2, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bf08      	it	eq
 8000a90:	2800      	cmpeq	r0, #0
 8000a92:	bf1c      	itt	ne
 8000a94:	f04f 31ff 	movne.w	r1, #4294967295
 8000a98:	f04f 30ff 	movne.w	r0, #4294967295
 8000a9c:	f000 b976 	b.w	8000d8c <__aeabi_idiv0>
 8000aa0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa8:	f000 f806 	bl	8000ab8 <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr

08000ab8 <__udivmoddi4>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	9e08      	ldr	r6, [sp, #32]
 8000abe:	460d      	mov	r5, r1
 8000ac0:	4604      	mov	r4, r0
 8000ac2:	4688      	mov	r8, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14d      	bne.n	8000b64 <__udivmoddi4+0xac>
 8000ac8:	428a      	cmp	r2, r1
 8000aca:	4694      	mov	ip, r2
 8000acc:	d968      	bls.n	8000ba0 <__udivmoddi4+0xe8>
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	b152      	cbz	r2, 8000aea <__udivmoddi4+0x32>
 8000ad4:	fa01 f302 	lsl.w	r3, r1, r2
 8000ad8:	f1c2 0120 	rsb	r1, r2, #32
 8000adc:	fa20 f101 	lsr.w	r1, r0, r1
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	ea41 0803 	orr.w	r8, r1, r3
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000aee:	fbb8 f7f1 	udiv	r7, r8, r1
 8000af2:	fa1f fe8c 	uxth.w	lr, ip
 8000af6:	fb01 8817 	mls	r8, r1, r7, r8
 8000afa:	fb07 f00e 	mul.w	r0, r7, lr
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b04:	4298      	cmp	r0, r3
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x66>
 8000b08:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0c:	f107 35ff 	add.w	r5, r7, #4294967295
 8000b10:	f080 811e 	bcs.w	8000d50 <__udivmoddi4+0x298>
 8000b14:	4298      	cmp	r0, r3
 8000b16:	f240 811b 	bls.w	8000d50 <__udivmoddi4+0x298>
 8000b1a:	3f02      	subs	r7, #2
 8000b1c:	4463      	add	r3, ip
 8000b1e:	1a1b      	subs	r3, r3, r0
 8000b20:	fbb3 f0f1 	udiv	r0, r3, r1
 8000b24:	fb01 3310 	mls	r3, r1, r0, r3
 8000b28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b2c:	b2a4      	uxth	r4, r4
 8000b2e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	d90a      	bls.n	8000b4c <__udivmoddi4+0x94>
 8000b36:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3e:	f080 8109 	bcs.w	8000d54 <__udivmoddi4+0x29c>
 8000b42:	45a6      	cmp	lr, r4
 8000b44:	f240 8106 	bls.w	8000d54 <__udivmoddi4+0x29c>
 8000b48:	4464      	add	r4, ip
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	eba4 040e 	sub.w	r4, r4, lr
 8000b52:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b56:	b11e      	cbz	r6, 8000b60 <__udivmoddi4+0xa8>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	40d4      	lsrs	r4, r2
 8000b5c:	e9c6 4300 	strd	r4, r3, [r6]
 8000b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b64:	428b      	cmp	r3, r1
 8000b66:	d908      	bls.n	8000b7a <__udivmoddi4+0xc2>
 8000b68:	2e00      	cmp	r6, #0
 8000b6a:	f000 80ee 	beq.w	8000d4a <__udivmoddi4+0x292>
 8000b6e:	2100      	movs	r1, #0
 8000b70:	e9c6 0500 	strd	r0, r5, [r6]
 8000b74:	4608      	mov	r0, r1
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d14a      	bne.n	8000c18 <__udivmoddi4+0x160>
 8000b82:	42ab      	cmp	r3, r5
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xd4>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 80fc 	bhi.w	8000d84 <__udivmoddi4+0x2cc>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb65 0303 	sbc.w	r3, r5, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4698      	mov	r8, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e2      	beq.n	8000b60 <__udivmoddi4+0xa8>
 8000b9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b9e:	e7df      	b.n	8000b60 <__udivmoddi4+0xa8>
 8000ba0:	b902      	cbnz	r2, 8000ba4 <__udivmoddi4+0xec>
 8000ba2:	deff      	udf	#255	; 0xff
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f040 8091 	bne.w	8000cd0 <__udivmoddi4+0x218>
 8000bae:	eba1 000c 	sub.w	r0, r1, ip
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb8:	fa1f fe8c 	uxth.w	lr, ip
 8000bbc:	fbb0 f3f7 	udiv	r3, r0, r7
 8000bc0:	fb07 0013 	mls	r0, r7, r3, r0
 8000bc4:	0c25      	lsrs	r5, r4, #16
 8000bc6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000bca:	fb0e f003 	mul.w	r0, lr, r3
 8000bce:	42a8      	cmp	r0, r5
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x12c>
 8000bd2:	eb1c 0505 	adds.w	r5, ip, r5
 8000bd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x12a>
 8000bdc:	42a8      	cmp	r0, r5
 8000bde:	f200 80ce 	bhi.w	8000d7e <__udivmoddi4+0x2c6>
 8000be2:	4643      	mov	r3, r8
 8000be4:	1a2d      	subs	r5, r5, r0
 8000be6:	fbb5 f0f7 	udiv	r0, r5, r7
 8000bea:	fb07 5510 	mls	r5, r7, r0, r5
 8000bee:	fb0e fe00 	mul.w	lr, lr, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x156>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c04:	d202      	bcs.n	8000c0c <__udivmoddi4+0x154>
 8000c06:	45a6      	cmp	lr, r4
 8000c08:	f200 80b6 	bhi.w	8000d78 <__udivmoddi4+0x2c0>
 8000c0c:	4628      	mov	r0, r5
 8000c0e:	eba4 040e 	sub.w	r4, r4, lr
 8000c12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c16:	e79e      	b.n	8000b56 <__udivmoddi4+0x9e>
 8000c18:	f1c1 0720 	rsb	r7, r1, #32
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c26:	fa25 fa07 	lsr.w	sl, r5, r7
 8000c2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2e:	fbba f8f9 	udiv	r8, sl, r9
 8000c32:	fa20 f307 	lsr.w	r3, r0, r7
 8000c36:	fb09 aa18 	mls	sl, r9, r8, sl
 8000c3a:	408d      	lsls	r5, r1
 8000c3c:	fa1f fe8c 	uxth.w	lr, ip
 8000c40:	431d      	orrs	r5, r3
 8000c42:	fa00 f301 	lsl.w	r3, r0, r1
 8000c46:	fb08 f00e 	mul.w	r0, r8, lr
 8000c4a:	0c2c      	lsrs	r4, r5, #16
 8000c4c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000c50:	42a0      	cmp	r0, r4
 8000c52:	fa02 f201 	lsl.w	r2, r2, r1
 8000c56:	d90b      	bls.n	8000c70 <__udivmoddi4+0x1b8>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c60:	f080 8088 	bcs.w	8000d74 <__udivmoddi4+0x2bc>
 8000c64:	42a0      	cmp	r0, r4
 8000c66:	f240 8085 	bls.w	8000d74 <__udivmoddi4+0x2bc>
 8000c6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6e:	4464      	add	r4, ip
 8000c70:	1a24      	subs	r4, r4, r0
 8000c72:	fbb4 f0f9 	udiv	r0, r4, r9
 8000c76:	fb09 4410 	mls	r4, r9, r0, r4
 8000c7a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c84:	45a6      	cmp	lr, r4
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x1e2>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c90:	d26c      	bcs.n	8000d6c <__udivmoddi4+0x2b4>
 8000c92:	45a6      	cmp	lr, r4
 8000c94:	d96a      	bls.n	8000d6c <__udivmoddi4+0x2b4>
 8000c96:	3802      	subs	r0, #2
 8000c98:	4464      	add	r4, ip
 8000c9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c9e:	fba0 9502 	umull	r9, r5, r0, r2
 8000ca2:	eba4 040e 	sub.w	r4, r4, lr
 8000ca6:	42ac      	cmp	r4, r5
 8000ca8:	46c8      	mov	r8, r9
 8000caa:	46ae      	mov	lr, r5
 8000cac:	d356      	bcc.n	8000d5c <__udivmoddi4+0x2a4>
 8000cae:	d053      	beq.n	8000d58 <__udivmoddi4+0x2a0>
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d069      	beq.n	8000d88 <__udivmoddi4+0x2d0>
 8000cb4:	ebb3 0208 	subs.w	r2, r3, r8
 8000cb8:	eb64 040e 	sbc.w	r4, r4, lr
 8000cbc:	fa22 f301 	lsr.w	r3, r2, r1
 8000cc0:	fa04 f707 	lsl.w	r7, r4, r7
 8000cc4:	431f      	orrs	r7, r3
 8000cc6:	40cc      	lsrs	r4, r1
 8000cc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e747      	b.n	8000b60 <__udivmoddi4+0xa8>
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	f1c2 0120 	rsb	r1, r2, #32
 8000cd8:	fa25 f301 	lsr.w	r3, r5, r1
 8000cdc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce0:	fa20 f101 	lsr.w	r1, r0, r1
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	430d      	orrs	r5, r1
 8000ce8:	fbb3 f1f7 	udiv	r1, r3, r7
 8000cec:	fb07 3311 	mls	r3, r7, r1, r3
 8000cf0:	fa1f fe8c 	uxth.w	lr, ip
 8000cf4:	0c28      	lsrs	r0, r5, #16
 8000cf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cfa:	fb01 f30e 	mul.w	r3, r1, lr
 8000cfe:	4283      	cmp	r3, r0
 8000d00:	fa04 f402 	lsl.w	r4, r4, r2
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x260>
 8000d06:	eb1c 0000 	adds.w	r0, ip, r0
 8000d0a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000d0e:	d22f      	bcs.n	8000d70 <__udivmoddi4+0x2b8>
 8000d10:	4283      	cmp	r3, r0
 8000d12:	d92d      	bls.n	8000d70 <__udivmoddi4+0x2b8>
 8000d14:	3902      	subs	r1, #2
 8000d16:	4460      	add	r0, ip
 8000d18:	1ac0      	subs	r0, r0, r3
 8000d1a:	fbb0 f3f7 	udiv	r3, r0, r7
 8000d1e:	fb07 0013 	mls	r0, r7, r3, r0
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d28:	fb03 f00e 	mul.w	r0, r3, lr
 8000d2c:	42a8      	cmp	r0, r5
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x28a>
 8000d30:	eb1c 0505 	adds.w	r5, ip, r5
 8000d34:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d38:	d216      	bcs.n	8000d68 <__udivmoddi4+0x2b0>
 8000d3a:	42a8      	cmp	r0, r5
 8000d3c:	d914      	bls.n	8000d68 <__udivmoddi4+0x2b0>
 8000d3e:	3b02      	subs	r3, #2
 8000d40:	4465      	add	r5, ip
 8000d42:	1a28      	subs	r0, r5, r0
 8000d44:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d48:	e738      	b.n	8000bbc <__udivmoddi4+0x104>
 8000d4a:	4631      	mov	r1, r6
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	e707      	b.n	8000b60 <__udivmoddi4+0xa8>
 8000d50:	462f      	mov	r7, r5
 8000d52:	e6e4      	b.n	8000b1e <__udivmoddi4+0x66>
 8000d54:	4618      	mov	r0, r3
 8000d56:	e6f9      	b.n	8000b4c <__udivmoddi4+0x94>
 8000d58:	454b      	cmp	r3, r9
 8000d5a:	d2a9      	bcs.n	8000cb0 <__udivmoddi4+0x1f8>
 8000d5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000d60:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d64:	3801      	subs	r0, #1
 8000d66:	e7a3      	b.n	8000cb0 <__udivmoddi4+0x1f8>
 8000d68:	4643      	mov	r3, r8
 8000d6a:	e7ea      	b.n	8000d42 <__udivmoddi4+0x28a>
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	e794      	b.n	8000c9a <__udivmoddi4+0x1e2>
 8000d70:	4641      	mov	r1, r8
 8000d72:	e7d1      	b.n	8000d18 <__udivmoddi4+0x260>
 8000d74:	46d0      	mov	r8, sl
 8000d76:	e77b      	b.n	8000c70 <__udivmoddi4+0x1b8>
 8000d78:	4464      	add	r4, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	e747      	b.n	8000c0e <__udivmoddi4+0x156>
 8000d7e:	3b02      	subs	r3, #2
 8000d80:	4465      	add	r5, ip
 8000d82:	e72f      	b.n	8000be4 <__udivmoddi4+0x12c>
 8000d84:	4608      	mov	r0, r1
 8000d86:	e706      	b.n	8000b96 <__udivmoddi4+0xde>
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e6e9      	b.n	8000b60 <__udivmoddi4+0xa8>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d9e:	d205      	bcs.n	8000dac <_ZSt16__deque_buf_sizej+0x1c>
 8000da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	e000      	b.n	8000dae <_ZSt16__deque_buf_sizej+0x1e>
 8000dac:	2301      	movs	r3, #1
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dbe:	f001 f803 	bl	8001dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc2:	f000 f829 	bl	8000e18 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc6:	f000 f971 	bl	80010ac <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000dca:	f000 f939 	bl	8001040 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8000dce:	f000 f873 	bl	8000eb8 <_ZL12MX_I2C1_Initv>
  MX_USART1_UART_Init();
 8000dd2:	f000 f907 	bl	8000fe4 <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 8000dd6:	f000 f8a3 	bl	8000f20 <_ZL12MX_TIM1_Initv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Ina219.run_DMA(INA219_CONFIG_BVOLTAGERANGE_16V,
 8000dda:	f241 0362 	movw	r3, #4194	; 0x1062
 8000dde:	9302      	str	r3, [sp, #8]
 8000de0:	2307      	movs	r3, #7
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	2348      	movs	r3, #72	; 0x48
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8000dec:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000df0:	2100      	movs	r1, #0
 8000df2:	4807      	ldr	r0, [pc, #28]	; (8000e10 <main+0x58>)
 8000df4:	f006 f9d6 	bl	80071a4 <_ZN6Ina2197run_DMAE27INA219_Config_Bvoltagerange19INA_219_Config_Gain21INA219_Config_Badcres21INA219_Config_Sadcres18INA219_Config_Modet>
			  INA219_CONFIG_GAIN_8_320MV,
			  INA219_CONFIG_BADCRES_12BIT_2S_1060US,
			  INA219_CONFIG_SADCRES_12BIT_2S_1060US,
			  INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS,
			  0x1062);
	  Ina219.IRQHandler();
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <main+0x58>)
 8000dfa:	f006 fa9f 	bl	800733c <_ZN6Ina21910IRQHandlerEv>

	  Terminal.run_vec();
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <main+0x5c>)
 8000e00:	f008 fe03 	bl	8009a0a <_ZN8Terminal7run_vecEv>

	  checkINA219();
 8000e04:	f000 f9ac 	bl	8001160 <_Z11checkINA219v>
	  checkTerminal();
 8000e08:	f000 f97e 	bl	8001108 <_Z13checkTerminalv>
	  Ina219.run_DMA(INA219_CONFIG_BVOLTAGERANGE_16V,
 8000e0c:	e7e5      	b.n	8000dda <main+0x22>
 8000e0e:	bf00      	nop
 8000e10:	20000c38 	.word	0x20000c38
 8000e14:	20000bc4 	.word	0x20000bc4

08000e18 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b090      	sub	sp, #64	; 0x40
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0318 	add.w	r3, r7, #24
 8000e22:	2228      	movs	r2, #40	; 0x28
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f009 fd1c 	bl	800a864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e56:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5c:	f107 0318 	add.w	r3, r7, #24
 8000e60:	4618      	mov	r0, r3
 8000e62:	f004 fc5f 	bl	8005724 <HAL_RCC_OscConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	bf14      	ite	ne
 8000e6c:	2301      	movne	r3, #1
 8000e6e:	2300      	moveq	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8000e76:	f000 f9dd 	bl	8001234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7a:	230f      	movs	r3, #15
 8000e7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2102      	movs	r1, #2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f004 fec7 	bl	8005c28 <HAL_RCC_ClockConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	bf14      	ite	ne
 8000ea0:	2301      	movne	r3, #1
 8000ea2:	2300      	moveq	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8000eaa:	f000 f9c3 	bl	8001234 <Error_Handler>
  }
}
 8000eae:	bf00      	nop
 8000eb0:	3740      	adds	r7, #64	; 0x40
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ebe:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <_ZL12MX_I2C1_Initv+0x60>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ec4:	4a15      	ldr	r2, [pc, #84]	; (8000f1c <_ZL12MX_I2C1_Initv+0x64>)
 8000ec6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <_ZL12MX_I2C1_Initv+0x5c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ed6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000edc:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <_ZL12MX_I2C1_Initv+0x5c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ef4:	4807      	ldr	r0, [pc, #28]	; (8000f14 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ef6:	f001 fd05 	bl	8002904 <HAL_I2C_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	bf14      	ite	ne
 8000f00:	2301      	movne	r3, #1
 8000f02:	2300      	moveq	r3, #0
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000f0a:	f000 f993 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200009d4 	.word	0x200009d4
 8000f18:	40005400 	.word	0x40005400
 8000f1c:	00061a80 	.word	0x00061a80

08000f20 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f34:	463b      	mov	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f3c:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <_ZL12MX_TIM1_Initv+0xbc>)
 8000f3e:	4a28      	ldr	r2, [pc, #160]	; (8000fe0 <_ZL12MX_TIM1_Initv+0xc0>)
 8000f40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <_ZL12MX_TIM1_Initv+0xbc>)
 8000f44:	2203      	movs	r2, #3
 8000f46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <_ZL12MX_TIM1_Initv+0xbc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <_ZL12MX_TIM1_Initv+0xbc>)
 8000f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <_ZL12MX_TIM1_Initv+0xbc>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <_ZL12MX_TIM1_Initv+0xbc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <_ZL12MX_TIM1_Initv+0xbc>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f68:	481c      	ldr	r0, [pc, #112]	; (8000fdc <_ZL12MX_TIM1_Initv+0xbc>)
 8000f6a:	f004 fff5 	bl	8005f58 <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	bf14      	ite	ne
 8000f74:	2301      	movne	r3, #1
 8000f76:	2300      	moveq	r3, #0
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8000f7e:	f000 f959 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4813      	ldr	r0, [pc, #76]	; (8000fdc <_ZL12MX_TIM1_Initv+0xbc>)
 8000f90:	f005 f87c 	bl	800608c <HAL_TIM_ConfigClockSource>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	bf14      	ite	ne
 8000f9a:	2301      	movne	r3, #1
 8000f9c:	2300      	moveq	r3, #0
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8000fa4:	f000 f946 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4809      	ldr	r0, [pc, #36]	; (8000fdc <_ZL12MX_TIM1_Initv+0xbc>)
 8000fb6:	f005 fa25 	bl	8006404 <HAL_TIMEx_MasterConfigSynchronization>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	bf14      	ite	ne
 8000fc0:	2301      	movne	r3, #1
 8000fc2:	2300      	moveq	r3, #0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 8000fca:	f000 f933 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  HAL_TIM_Base_Start(&htim1);
 8000fce:	4803      	ldr	r0, [pc, #12]	; (8000fdc <_ZL12MX_TIM1_Initv+0xbc>)
 8000fd0:	f005 f812 	bl	8005ff8 <HAL_TIM_Base_Start>

  /* USER CODE END TIM1_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000ab0 	.word	0x20000ab0
 8000fe0:	40012c00 	.word	0x40012c00

08000fe4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000fea:	4a14      	ldr	r2, [pc, #80]	; (800103c <_ZL19MX_USART1_UART_Initv+0x58>)
 8000fec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ff0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <_ZL19MX_USART1_UART_Initv+0x54>)
 800100a:	220c      	movs	r2, #12
 800100c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800101a:	4807      	ldr	r0, [pc, #28]	; (8001038 <_ZL19MX_USART1_UART_Initv+0x54>)
 800101c:	f005 fa50 	bl	80064c0 <HAL_UART_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	bf14      	ite	ne
 8001026:	2301      	movne	r3, #1
 8001028:	2300      	moveq	r3, #0
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001030:	f000 f900 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000af8 	.word	0x20000af8
 800103c:	40013800 	.word	0x40013800

08001040 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <_ZL11MX_DMA_Initv+0x68>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <_ZL11MX_DMA_Initv+0x68>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6153      	str	r3, [r2, #20]
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <_ZL11MX_DMA_Initv+0x68>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	200e      	movs	r0, #14
 8001064:	f000 ffe9 	bl	800203a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001068:	200e      	movs	r0, #14
 800106a:	f001 f802 	bl	8002072 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	200f      	movs	r0, #15
 8001074:	f000 ffe1 	bl	800203a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001078:	200f      	movs	r0, #15
 800107a:	f000 fffa 	bl	8002072 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2010      	movs	r0, #16
 8001084:	f000 ffd9 	bl	800203a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001088:	2010      	movs	r0, #16
 800108a:	f000 fff2 	bl	8002072 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2011      	movs	r0, #17
 8001094:	f000 ffd1 	bl	800203a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001098:	2011      	movs	r0, #17
 800109a:	f000 ffea 	bl	8002072 <HAL_NVIC_EnableIRQ>

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000

080010ac <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <_ZL12MX_GPIO_Initv+0x58>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	4a13      	ldr	r2, [pc, #76]	; (8001104 <_ZL12MX_GPIO_Initv+0x58>)
 80010b8:	f043 0320 	orr.w	r3, r3, #32
 80010bc:	6193      	str	r3, [r2, #24]
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <_ZL12MX_GPIO_Initv+0x58>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	f003 0320 	and.w	r3, r3, #32
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <_ZL12MX_GPIO_Initv+0x58>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <_ZL12MX_GPIO_Initv+0x58>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	6193      	str	r3, [r2, #24]
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <_ZL12MX_GPIO_Initv+0x58>)
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <_ZL12MX_GPIO_Initv+0x58>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	4a07      	ldr	r2, [pc, #28]	; (8001104 <_ZL12MX_GPIO_Initv+0x58>)
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	6193      	str	r3, [r2, #24]
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <_ZL12MX_GPIO_Initv+0x58>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]

}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	40021000 	.word	0x40021000

08001108 <_Z13checkTerminalv>:

/* USER CODE BEGIN 4 */

void checkTerminal() {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	if ((*Terminal.getRxListData()).size() < 1) return;
 800110c:	4812      	ldr	r0, [pc, #72]	; (8001158 <_Z13checkTerminalv+0x50>)
 800110e:	f008 fd04 	bl	8009b1a <_ZN8Terminal13getRxListDataEv>
 8001112:	4603      	mov	r3, r0
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f892 	bl	800123e <_ZNKSt5dequeISt6vectorIhSaIhEESaIS2_EE4sizeEv>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	bf0c      	ite	eq
 8001120:	2301      	moveq	r3, #1
 8001122:	2300      	movne	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d114      	bne.n	8001154 <_Z13checkTerminalv+0x4c>
	Ina219.setListData(&(*Terminal.getRxListData())[0]);
 800112a:	480b      	ldr	r0, [pc, #44]	; (8001158 <_Z13checkTerminalv+0x50>)
 800112c:	f008 fcf5 	bl	8009b1a <_ZN8Terminal13getRxListDataEv>
 8001130:	4603      	mov	r3, r0
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f000 f894 	bl	8001262 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EEixEj>
 800113a:	4603      	mov	r3, r0
 800113c:	4619      	mov	r1, r3
 800113e:	4807      	ldr	r0, [pc, #28]	; (800115c <_Z13checkTerminalv+0x54>)
 8001140:	f006 fc06 	bl	8007950 <_ZN6Ina21911setListDataEPSt6vectorIhSaIhEE>
	(*Terminal.getRxListData()).pop_front();
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <_Z13checkTerminalv+0x50>)
 8001146:	f008 fce8 	bl	8009b1a <_ZN8Terminal13getRxListDataEv>
 800114a:	4603      	mov	r3, r0
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f899 	bl	8001284 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE9pop_frontEv>
 8001152:	e000      	b.n	8001156 <_Z13checkTerminalv+0x4e>
	if ((*Terminal.getRxListData()).size() < 1) return;
 8001154:	bf00      	nop
}
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000bc4 	.word	0x20000bc4
 800115c:	20000c38 	.word	0x20000c38

08001160 <_Z11checkINA219v>:
void checkINA219(){
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	if ((*Ina219.getListData()).size() < 1) return;
 8001164:	4812      	ldr	r0, [pc, #72]	; (80011b0 <_Z11checkINA219v+0x50>)
 8001166:	f006 fc02 	bl	800796e <_ZN6Ina21911getListDataEv>
 800116a:	4603      	mov	r3, r0
 800116c:	4618      	mov	r0, r3
 800116e:	f000 f866 	bl	800123e <_ZNKSt5dequeISt6vectorIhSaIhEESaIS2_EE4sizeEv>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	bf0c      	ite	eq
 8001178:	2301      	moveq	r3, #1
 800117a:	2300      	movne	r3, #0
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d114      	bne.n	80011ac <_Z11checkINA219v+0x4c>
	Terminal.setListData(&(*Ina219.getListData())[0]);
 8001182:	480b      	ldr	r0, [pc, #44]	; (80011b0 <_Z11checkINA219v+0x50>)
 8001184:	f006 fbf3 	bl	800796e <_ZN6Ina21911getListDataEv>
 8001188:	4603      	mov	r3, r0
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f868 	bl	8001262 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EEixEj>
 8001192:	4603      	mov	r3, r0
 8001194:	4619      	mov	r1, r3
 8001196:	4807      	ldr	r0, [pc, #28]	; (80011b4 <_Z11checkINA219v+0x54>)
 8001198:	f008 fcb0 	bl	8009afc <_ZN8Terminal11setListDataEPSt6vectorIhSaIhEE>
	(*Ina219.getListData()).pop_front();
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <_Z11checkINA219v+0x50>)
 800119e:	f006 fbe6 	bl	800796e <_ZN6Ina21911getListDataEv>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 f86d 	bl	8001284 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE9pop_frontEv>
 80011aa:	e000      	b.n	80011ae <_Z11checkINA219v+0x4e>
	if ((*Ina219.getListData()).size() < 1) return;
 80011ac:	bf00      	nop
}
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000c38 	.word	0x20000c38
 80011b4:	20000bc4 	.word	0x20000bc4

080011b8 <HAL_I2C_MemTxCpltCallback>:


void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	Ina219.memTxCpltCallback(hi2c);
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	4803      	ldr	r0, [pc, #12]	; (80011d0 <HAL_I2C_MemTxCpltCallback+0x18>)
 80011c4:	f006 fbde 	bl	8007984 <_ZN6Ina21917memTxCpltCallbackEP17I2C_HandleTypeDef>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000c38 	.word	0x20000c38

080011d4 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	Ina219.errorCallback(hi2c);
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	4803      	ldr	r0, [pc, #12]	; (80011ec <HAL_I2C_ErrorCallback+0x18>)
 80011e0:	f006 fbe6 	bl	80079b0 <_ZN6Ina21913errorCallbackEP17I2C_HandleTypeDef>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000c38 	.word	0x20000c38

080011f0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	Terminal.TxCpltCallback(huart);
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	4803      	ldr	r0, [pc, #12]	; (8001208 <HAL_UART_TxCpltCallback+0x18>)
 80011fc:	f008 fc98 	bl	8009b30 <_ZN8Terminal14TxCpltCallbackEP20__UART_HandleTypeDef>
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000bc4 	.word	0x20000bc4

0800120c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
	Terminal.RxEventCallback(huart, Size, &huart1_flag_idle);
 8001218:	887a      	ldrh	r2, [r7, #2]
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <HAL_UARTEx_RxEventCallback+0x20>)
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	4804      	ldr	r0, [pc, #16]	; (8001230 <HAL_UARTEx_RxEventCallback+0x24>)
 8001220:	f008 fca4 	bl	8009b6c <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000cc8 	.word	0x20000cc8
 8001230:	20000bc4 	.word	0x20000bc4

08001234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800123c:	e7fe      	b.n	800123c <Error_Handler+0x8>

0800123e <_ZNKSt5dequeISt6vectorIhSaIhEESaIS2_EE4sizeEv>:
#endif

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f103 0218 	add.w	r2, r3, #24
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3308      	adds	r3, #8
 8001250:	4619      	mov	r1, r3
 8001252:	4610      	mov	r0, r2
 8001254:	f000 f83a 	bl	80012cc <_ZStmiRKSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_ES7_>
 8001258:	4603      	mov	r3, r0
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return this->_M_impl._M_start[difference_type(__n)];
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3308      	adds	r3, #8
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f855 	bl	8001324 <_ZNKSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EixEi>
 800127a:	4603      	mov	r3, r0
      }
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	3b0c      	subs	r3, #12
	if (this->_M_impl._M_start._M_cur
 8001296:	429a      	cmp	r2, r3
 8001298:	d011      	beq.n	80012be <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE9pop_frontEv+0x3a>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	f000 f857 	bl	8001350 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 80012a2:	4602      	mov	r2, r0
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	4619      	mov	r1, r3
 80012aa:	4610      	mov	r0, r2
 80012ac:	f000 f85a 	bl	8001364 <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE7destroyIS2_EEvRS3_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f103 020c 	add.w	r2, r3, #12
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 80012bc:	e002      	b.n	80012c4 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f85d 	bl	800137e <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE16_M_pop_front_auxEv>
      }
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <_ZStmiRKSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_ES7_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80012d6:	f000 f87a 	bl	80013ce <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_E14_S_buffer_sizeEv>
 80012da:	4603      	mov	r3, r0
 80012dc:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68da      	ldr	r2, [r3, #12]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	109b      	asrs	r3, r3, #2
 80012ea:	3b01      	subs	r3, #1
 80012ec:	fb01 f303 	mul.w	r3, r1, r3
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6811      	ldr	r1, [r2, #0]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	6852      	ldr	r2, [r2, #4]
 80012f8:	1a8a      	subs	r2, r1, r2
 80012fa:	1092      	asrs	r2, r2, #2
 80012fc:	4908      	ldr	r1, [pc, #32]	; (8001320 <_ZStmiRKSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_ES7_+0x54>)
 80012fe:	fb01 f202 	mul.w	r2, r1, r2
 8001302:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	6891      	ldr	r1, [r2, #8]
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	1a8a      	subs	r2, r1, r2
 800130e:	1092      	asrs	r2, r2, #2
 8001310:	4903      	ldr	r1, [pc, #12]	; (8001320 <_ZStmiRKSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_ES7_+0x54>)
 8001312:	fb01 f202 	mul.w	r2, r1, r2
 8001316:	4413      	add	r3, r2
      }
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	aaaaaaab 	.word	0xaaaaaaab

08001324 <_ZNKSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f851 	bl	80013de <_ZStplRKSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_Ei>
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	4618      	mov	r0, r3
 8001342:	f000 f85f 	bl	8001404 <_ZNKSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EdeEv>
 8001346:	4603      	mov	r3, r0
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE7destroyIS2_EEvRS3_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 800136e:	6839      	ldr	r1, [r7, #0]
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f852 	bl	800141a <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE7destroyIS3_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ffe1 	bl	8001350 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800138e:	4602      	mov	r2, r0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f7ff ffe4 	bl	8001364 <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE7destroyIS2_EEvRS3_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	4619      	mov	r1, r3
 80013a4:	4610      	mov	r0, r2
 80013a6:	f000 f844 	bl	8001432 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE18_M_deallocate_nodeEPS2_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f103 0208 	add.w	r2, r3, #8
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	3304      	adds	r3, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4610      	mov	r0, r2
 80013ba:	f000 f84d 	bl	8001458 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	609a      	str	r2, [r3, #8]
    }
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80013ce:	b580      	push	{r7, lr}
 80013d0:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80013d2:	200c      	movs	r0, #12
 80013d4:	f7ff fcdc 	bl	8000d90 <_ZSt16__deque_buf_sizej>
 80013d8:	4603      	mov	r3, r0
 80013da:	4618      	mov	r0, r3
 80013dc:	bd80      	pop	{r7, pc}

080013de <_ZStplRKSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 80013ea:	68b9      	ldr	r1, [r7, #8]
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f000 f84f 	bl	8001490 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EC1ERKS5_>
	__tmp += __n;
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f000 f867 	bl	80014c8 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EpLEi>
	return __tmp;
 80013fa:	bf00      	nop
      }
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <_ZNKSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE7destroyIS3_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8001424:	6838      	ldr	r0, [r7, #0]
 8001426:	f000 f8b3 	bl	8001590 <_ZNSt6vectorIhSaIhEED1Ev>
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE18_M_deallocate_nodeEPS2_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8001432:	b590      	push	{r4, r7, lr}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 800143c:	687c      	ldr	r4, [r7, #4]
 800143e:	200c      	movs	r0, #12
 8001440:	f7ff fca6 	bl	8000d90 <_ZSt16__deque_buf_sizej>
 8001444:	4603      	mov	r3, r0
 8001446:	461a      	mov	r2, r3
 8001448:	6839      	ldr	r1, [r7, #0]
 800144a:	4620      	mov	r0, r4
 800144c:	f000 f8bb 	bl	80015c6 <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE10deallocateERS3_PS2_j>
      }
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bd90      	pop	{r4, r7, pc}

08001458 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_E11_M_set_nodeEPS4_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685c      	ldr	r4, [r3, #4]
 8001474:	f7ff ffab 	bl	80013ce <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_E14_S_buffer_sizeEv>
 8001478:	4602      	mov	r2, r0
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	18e2      	adds	r2, r4, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	609a      	str	r2, [r3, #8]
      }
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bd90      	pop	{r4, r7, pc}

08001490 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EC1ERKS5_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
	...

080014c8 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	109b      	asrs	r3, r3, #2
 80014de:	4a2b      	ldr	r2, [pc, #172]	; (800158c <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EpLEi+0xc4>)
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	db08      	blt.n	8001504 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EpLEi+0x3c>
 80014f2:	f7ff ff6c 	bl	80013ce <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_E14_S_buffer_sizeEv>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4293      	cmp	r3, r2
 80014fe:	da01      	bge.n	8001504 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EpLEi+0x3c>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EpLEi+0x3e>
 8001504:	2300      	movs	r3, #0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00a      	beq.n	8001520 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EpLEi+0x58>
	  _M_cur += __n;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6819      	ldr	r1, [r3, #0]
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	18ca      	adds	r2, r1, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	e02f      	b.n	8001580 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	dd07      	ble.n	8001536 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EpLEi+0x6e>
 8001526:	f7ff ff52 	bl	80013ce <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_E14_S_buffer_sizeEv>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	fb93 f3f2 	sdiv	r3, r3, r2
 8001534:	e007      	b.n	8001546 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 800153a:	f7ff ff48 	bl	80013ce <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_E14_S_buffer_sizeEv>
 800153e:	4603      	mov	r3, r0
 8001540:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8001544:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 8001546:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68da      	ldr	r2, [r3, #12]
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	4619      	mov	r1, r3
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ff7f 	bl	8001458 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_E11_M_set_nodeEPS4_>
	    _M_cur = _M_first + (__offset - __node_offset
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 800155e:	f7ff ff36 	bl	80013ce <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_E14_S_buffer_sizeEv>
 8001562:	4603      	mov	r3, r0
 8001564:	461a      	mov	r2, r3
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	461a      	mov	r2, r3
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	18e2      	adds	r2, r4, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	601a      	str	r2, [r3, #0]
	return *this;
 8001580:	687b      	ldr	r3, [r7, #4]
      }
 8001582:	4618      	mov	r0, r3
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}
 800158a:	bf00      	nop
 800158c:	aaaaaaab 	.word	0xaaaaaaab

08001590 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681c      	ldr	r4, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f842 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80015a8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80015aa:	461a      	mov	r2, r3
 80015ac:	4629      	mov	r1, r5
 80015ae:	4620      	mov	r0, r4
 80015b0:	f000 f846 	bl	8001640 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f820 	bl	80015fc <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bdb0      	pop	{r4, r5, r7, pc}

080015c6 <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 f840 	bl	800165c <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE10deallocateEPS3_j>
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
      struct _Vector_impl
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f848 	bl	8001682 <_ZNSaIhED1Ev>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8001612:	461a      	mov	r2, r3
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f840 	bl	800169a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ffe1 	bl	80015e4 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f000 f836 	bl	80016c0 <_ZSt8_DestroyIPhEvT_S1_>
    }
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4619      	mov	r1, r3
 8001674:	68b8      	ldr	r0, [r7, #8]
 8001676:	f008 fe02 	bl	800a27e <_ZdlPvj>
      }
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f825 	bl	80016da <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 800169a:	b580      	push	{r7, lr}
 800169c:	b084      	sub	sp, #16
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
	if (__p)
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f81b 	bl	80016ee <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80016ca:	6839      	ldr	r1, [r7, #0]
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f81d 	bl	800170c <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b084      	sub	sp, #16
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 f80e 	bl	8001720 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 8001704:	bf00      	nop
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __t)
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	68b8      	ldr	r0, [r7, #8]
 8001730:	f008 fda5 	bl	800a27e <_ZdlPvj>
      }
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d10e      	bne.n	800176a <_Z41__static_initialization_and_destruction_0ii+0x2e>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001752:	4293      	cmp	r3, r2
 8001754:	d109      	bne.n	800176a <_Z41__static_initialization_and_destruction_0ii+0x2e>
Terminal Terminal(&huart1);
 8001756:	490e      	ldr	r1, [pc, #56]	; (8001790 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001758:	480e      	ldr	r0, [pc, #56]	; (8001794 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800175a:	f008 f91a 	bl	8009992 <_ZN8TerminalC1EP20__UART_HandleTypeDef>
Ina219 Ina219(&hi2c1, &htim1);
 800175e:	2340      	movs	r3, #64	; 0x40
 8001760:	4a0d      	ldr	r2, [pc, #52]	; (8001798 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001762:	490e      	ldr	r1, [pc, #56]	; (800179c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001764:	480e      	ldr	r0, [pc, #56]	; (80017a0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001766:	f005 fcdb 	bl	8007120 <_ZN6Ina219C1EP17I2C_HandleTypeDefP17TIM_HandleTypeDefh>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10a      	bne.n	8001786 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001776:	4293      	cmp	r3, r2
 8001778:	d105      	bne.n	8001786 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 800177a:	4809      	ldr	r0, [pc, #36]	; (80017a0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800177c:	f005 fcfe 	bl	800717c <_ZN6Ina219D1Ev>
Terminal Terminal(&huart1);
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001782:	f008 f92a 	bl	80099da <_ZN8TerminalD1Ev>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000af8 	.word	0x20000af8
 8001794:	20000bc4 	.word	0x20000bc4
 8001798:	20000ab0 	.word	0x20000ab0
 800179c:	200009d4 	.word	0x200009d4
 80017a0:	20000c38 	.word	0x20000c38

080017a4 <_GLOBAL__sub_I_hi2c1>:
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017ac:	2001      	movs	r0, #1
 80017ae:	f7ff ffc5 	bl	800173c <_Z41__static_initialization_and_destruction_0ii>
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_GLOBAL__sub_D_hi2c1>:
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff ffbd 	bl	800173c <_Z41__static_initialization_and_destruction_0ii>
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_MspInit+0x5c>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	4a14      	ldr	r2, [pc, #80]	; (8001820 <HAL_MspInit+0x5c>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6193      	str	r3, [r2, #24]
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_MspInit+0x5c>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_MspInit+0x5c>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_MspInit+0x5c>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	61d3      	str	r3, [r2, #28]
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_MspInit+0x5c>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_MspInit+0x60>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	4a04      	ldr	r2, [pc, #16]	; (8001824 <HAL_MspInit+0x60>)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	40021000 	.word	0x40021000
 8001824:	40010000 	.word	0x40010000

08001828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a43      	ldr	r2, [pc, #268]	; (8001950 <HAL_I2C_MspInit+0x128>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d17f      	bne.n	8001948 <HAL_I2C_MspInit+0x120>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001848:	4b42      	ldr	r3, [pc, #264]	; (8001954 <HAL_I2C_MspInit+0x12c>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a41      	ldr	r2, [pc, #260]	; (8001954 <HAL_I2C_MspInit+0x12c>)
 800184e:	f043 0308 	orr.w	r3, r3, #8
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <HAL_I2C_MspInit+0x12c>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001860:	23c0      	movs	r3, #192	; 0xc0
 8001862:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001864:	2312      	movs	r3, #18
 8001866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	4619      	mov	r1, r3
 8001872:	4839      	ldr	r0, [pc, #228]	; (8001958 <HAL_I2C_MspInit+0x130>)
 8001874:	f000 fec2 	bl	80025fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001878:	4b36      	ldr	r3, [pc, #216]	; (8001954 <HAL_I2C_MspInit+0x12c>)
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	4a35      	ldr	r2, [pc, #212]	; (8001954 <HAL_I2C_MspInit+0x12c>)
 800187e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001882:	61d3      	str	r3, [r2, #28]
 8001884:	4b33      	ldr	r3, [pc, #204]	; (8001954 <HAL_I2C_MspInit+0x12c>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001890:	4b32      	ldr	r3, [pc, #200]	; (800195c <HAL_I2C_MspInit+0x134>)
 8001892:	4a33      	ldr	r2, [pc, #204]	; (8001960 <HAL_I2C_MspInit+0x138>)
 8001894:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001896:	4b31      	ldr	r3, [pc, #196]	; (800195c <HAL_I2C_MspInit+0x134>)
 8001898:	2200      	movs	r2, #0
 800189a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800189c:	4b2f      	ldr	r3, [pc, #188]	; (800195c <HAL_I2C_MspInit+0x134>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018a2:	4b2e      	ldr	r3, [pc, #184]	; (800195c <HAL_I2C_MspInit+0x134>)
 80018a4:	2280      	movs	r2, #128	; 0x80
 80018a6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018a8:	4b2c      	ldr	r3, [pc, #176]	; (800195c <HAL_I2C_MspInit+0x134>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ae:	4b2b      	ldr	r3, [pc, #172]	; (800195c <HAL_I2C_MspInit+0x134>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80018b4:	4b29      	ldr	r3, [pc, #164]	; (800195c <HAL_I2C_MspInit+0x134>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018ba:	4b28      	ldr	r3, [pc, #160]	; (800195c <HAL_I2C_MspInit+0x134>)
 80018bc:	2200      	movs	r2, #0
 80018be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80018c0:	4826      	ldr	r0, [pc, #152]	; (800195c <HAL_I2C_MspInit+0x134>)
 80018c2:	f000 fbf1 	bl	80020a8 <HAL_DMA_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80018cc:	f7ff fcb2 	bl	8001234 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a22      	ldr	r2, [pc, #136]	; (800195c <HAL_I2C_MspInit+0x134>)
 80018d4:	639a      	str	r2, [r3, #56]	; 0x38
 80018d6:	4a21      	ldr	r2, [pc, #132]	; (800195c <HAL_I2C_MspInit+0x134>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80018dc:	4b21      	ldr	r3, [pc, #132]	; (8001964 <HAL_I2C_MspInit+0x13c>)
 80018de:	4a22      	ldr	r2, [pc, #136]	; (8001968 <HAL_I2C_MspInit+0x140>)
 80018e0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_I2C_MspInit+0x13c>)
 80018e4:	2210      	movs	r2, #16
 80018e6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e8:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <HAL_I2C_MspInit+0x13c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <HAL_I2C_MspInit+0x13c>)
 80018f0:	2280      	movs	r2, #128	; 0x80
 80018f2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_I2C_MspInit+0x13c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <HAL_I2C_MspInit+0x13c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_I2C_MspInit+0x13c>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <HAL_I2C_MspInit+0x13c>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800190c:	4815      	ldr	r0, [pc, #84]	; (8001964 <HAL_I2C_MspInit+0x13c>)
 800190e:	f000 fbcb 	bl	80020a8 <HAL_DMA_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8001918:	f7ff fc8c 	bl	8001234 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a11      	ldr	r2, [pc, #68]	; (8001964 <HAL_I2C_MspInit+0x13c>)
 8001920:	635a      	str	r2, [r3, #52]	; 0x34
 8001922:	4a10      	ldr	r2, [pc, #64]	; (8001964 <HAL_I2C_MspInit+0x13c>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001928:	2200      	movs	r2, #0
 800192a:	2100      	movs	r1, #0
 800192c:	201f      	movs	r0, #31
 800192e:	f000 fb84 	bl	800203a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001932:	201f      	movs	r0, #31
 8001934:	f000 fb9d 	bl	8002072 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	2020      	movs	r0, #32
 800193e:	f000 fb7c 	bl	800203a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001942:	2020      	movs	r0, #32
 8001944:	f000 fb95 	bl	8002072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001948:	bf00      	nop
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40005400 	.word	0x40005400
 8001954:	40021000 	.word	0x40021000
 8001958:	40010c00 	.word	0x40010c00
 800195c:	20000a28 	.word	0x20000a28
 8001960:	40020080 	.word	0x40020080
 8001964:	20000a6c 	.word	0x20000a6c
 8001968:	4002006c 	.word	0x4002006c

0800196c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a09      	ldr	r2, [pc, #36]	; (80019a0 <HAL_TIM_Base_MspInit+0x34>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d10b      	bne.n	8001996 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_TIM_Base_MspInit+0x38>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <HAL_TIM_Base_MspInit+0x38>)
 8001984:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001988:	6193      	str	r3, [r2, #24]
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_TIM_Base_MspInit+0x38>)
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001996:	bf00      	nop
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	40012c00 	.word	0x40012c00
 80019a4:	40021000 	.word	0x40021000

080019a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a47      	ldr	r2, [pc, #284]	; (8001ae0 <HAL_UART_MspInit+0x138>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	f040 8086 	bne.w	8001ad6 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ca:	4b46      	ldr	r3, [pc, #280]	; (8001ae4 <HAL_UART_MspInit+0x13c>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	4a45      	ldr	r2, [pc, #276]	; (8001ae4 <HAL_UART_MspInit+0x13c>)
 80019d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d4:	6193      	str	r3, [r2, #24]
 80019d6:	4b43      	ldr	r3, [pc, #268]	; (8001ae4 <HAL_UART_MspInit+0x13c>)
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	4b40      	ldr	r3, [pc, #256]	; (8001ae4 <HAL_UART_MspInit+0x13c>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	4a3f      	ldr	r2, [pc, #252]	; (8001ae4 <HAL_UART_MspInit+0x13c>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6193      	str	r3, [r2, #24]
 80019ee:	4b3d      	ldr	r3, [pc, #244]	; (8001ae4 <HAL_UART_MspInit+0x13c>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a08:	f107 0310 	add.w	r3, r7, #16
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4836      	ldr	r0, [pc, #216]	; (8001ae8 <HAL_UART_MspInit+0x140>)
 8001a10:	f000 fdf4 	bl	80025fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	4619      	mov	r1, r3
 8001a28:	482f      	ldr	r0, [pc, #188]	; (8001ae8 <HAL_UART_MspInit+0x140>)
 8001a2a:	f000 fde7 	bl	80025fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001a2e:	4b2f      	ldr	r3, [pc, #188]	; (8001aec <HAL_UART_MspInit+0x144>)
 8001a30:	4a2f      	ldr	r2, [pc, #188]	; (8001af0 <HAL_UART_MspInit+0x148>)
 8001a32:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a34:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <HAL_UART_MspInit+0x144>)
 8001a36:	2210      	movs	r2, #16
 8001a38:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a3a:	4b2c      	ldr	r3, [pc, #176]	; (8001aec <HAL_UART_MspInit+0x144>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a40:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <HAL_UART_MspInit+0x144>)
 8001a42:	2280      	movs	r2, #128	; 0x80
 8001a44:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a46:	4b29      	ldr	r3, [pc, #164]	; (8001aec <HAL_UART_MspInit+0x144>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a4c:	4b27      	ldr	r3, [pc, #156]	; (8001aec <HAL_UART_MspInit+0x144>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001a52:	4b26      	ldr	r3, [pc, #152]	; (8001aec <HAL_UART_MspInit+0x144>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a58:	4b24      	ldr	r3, [pc, #144]	; (8001aec <HAL_UART_MspInit+0x144>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001a5e:	4823      	ldr	r0, [pc, #140]	; (8001aec <HAL_UART_MspInit+0x144>)
 8001a60:	f000 fb22 	bl	80020a8 <HAL_DMA_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001a6a:	f7ff fbe3 	bl	8001234 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a1e      	ldr	r2, [pc, #120]	; (8001aec <HAL_UART_MspInit+0x144>)
 8001a72:	635a      	str	r2, [r3, #52]	; 0x34
 8001a74:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <HAL_UART_MspInit+0x144>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <HAL_UART_MspInit+0x14c>)
 8001a7c:	4a1e      	ldr	r2, [pc, #120]	; (8001af8 <HAL_UART_MspInit+0x150>)
 8001a7e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a80:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <HAL_UART_MspInit+0x14c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a86:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <HAL_UART_MspInit+0x14c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <HAL_UART_MspInit+0x14c>)
 8001a8e:	2280      	movs	r2, #128	; 0x80
 8001a90:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a92:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <HAL_UART_MspInit+0x14c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <HAL_UART_MspInit+0x14c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_UART_MspInit+0x14c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <HAL_UART_MspInit+0x14c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001aaa:	4812      	ldr	r0, [pc, #72]	; (8001af4 <HAL_UART_MspInit+0x14c>)
 8001aac:	f000 fafc 	bl	80020a8 <HAL_DMA_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001ab6:	f7ff fbbd 	bl	8001234 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <HAL_UART_MspInit+0x14c>)
 8001abe:	639a      	str	r2, [r3, #56]	; 0x38
 8001ac0:	4a0c      	ldr	r2, [pc, #48]	; (8001af4 <HAL_UART_MspInit+0x14c>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2025      	movs	r0, #37	; 0x25
 8001acc:	f000 fab5 	bl	800203a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ad0:	2025      	movs	r0, #37	; 0x25
 8001ad2:	f000 face 	bl	8002072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ad6:	bf00      	nop
 8001ad8:	3720      	adds	r7, #32
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40013800 	.word	0x40013800
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010800 	.word	0x40010800
 8001aec:	20000b3c 	.word	0x20000b3c
 8001af0:	40020044 	.word	0x40020044
 8001af4:	20000b80 	.word	0x20000b80
 8001af8:	40020058 	.word	0x40020058

08001afc <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001b00:	e7fe      	b.n	8001b00 <NMI_Handler+0x4>

08001b02 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8001b06:	e7fe      	b.n	8001b06 <HardFault_Handler+0x4>

08001b08 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8001b0c:	e7fe      	b.n	8001b0c <MemManage_Handler+0x4>

08001b0e <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8001b12:	e7fe      	b.n	8001b12 <BusFault_Handler+0x4>

08001b14 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8001b18:	e7fe      	b.n	8001b18 <UsageFault_Handler+0x4>

08001b1a <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001b42:	f000 f987 	bl	8001e54 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <DMA1_Channel4_IRQHandler>:

/**
 * @brief This function handles DMA1 channel4 global interrupt.
 */
void DMA1_Channel4_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

	/* USER CODE END DMA1_Channel4_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <DMA1_Channel4_IRQHandler+0x10>)
 8001b52:	f000 fc13 	bl	800237c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

	/* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000b3c 	.word	0x20000b3c

08001b60 <DMA1_Channel5_IRQHandler>:

/**
 * @brief This function handles DMA1 channel5 global interrupt.
 */
void DMA1_Channel5_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

	/* USER CODE END DMA1_Channel5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <DMA1_Channel5_IRQHandler+0x10>)
 8001b66:	f000 fc09 	bl	800237c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

	/* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000b80 	.word	0x20000b80

08001b74 <DMA1_Channel6_IRQHandler>:

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

	/* USER CODE END DMA1_Channel6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <DMA1_Channel6_IRQHandler+0x10>)
 8001b7a:	f000 fbff 	bl	800237c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

	/* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000a6c 	.word	0x20000a6c

08001b88 <DMA1_Channel7_IRQHandler>:

/**
 * @brief This function handles DMA1 channel7 global interrupt.
 */
void DMA1_Channel7_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

	/* USER CODE END DMA1_Channel7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <DMA1_Channel7_IRQHandler+0x10>)
 8001b8e:	f000 fbf5 	bl	800237c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

	/* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000a28 	.word	0x20000a28

08001b9c <I2C1_EV_IRQHandler>:

/**
 * @brief This function handles I2C1 event interrupt.
 */
void I2C1_EV_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_EV_IRQn 0 */

	/* USER CODE END I2C1_EV_IRQn 0 */
	HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <I2C1_EV_IRQHandler+0x10>)
 8001ba2:	f001 fcd7 	bl	8003554 <HAL_I2C_EV_IRQHandler>
	/* USER CODE BEGIN I2C1_EV_IRQn 1 */

	/* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200009d4 	.word	0x200009d4

08001bb0 <I2C1_ER_IRQHandler>:

/**
 * @brief This function handles I2C1 error interrupt.
 */
void I2C1_ER_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_ER_IRQn 0 */

	/* USER CODE END I2C1_ER_IRQn 0 */
	HAL_I2C_ER_IRQHandler(&hi2c1);
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <I2C1_ER_IRQHandler+0x10>)
 8001bb6:	f001 fe3e 	bl	8003836 <HAL_I2C_ER_IRQHandler>
	/* USER CODE BEGIN I2C1_ER_IRQn 1 */

	/* USER CODE END I2C1_ER_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200009d4 	.word	0x200009d4

08001bc4 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* Check if IDLE flag is set */
	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) huart1_flag_idle = SET;
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <USART1_IRQHandler+0x24>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b10      	cmp	r3, #16
 8001bd4:	d102      	bne.n	8001bdc <USART1_IRQHandler+0x18>
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <USART1_IRQHandler+0x28>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <USART1_IRQHandler+0x24>)
 8001bde:	f004 fd79 	bl	80066d4 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000af8 	.word	0x20000af8
 8001bec:	20000cc8 	.word	0x20000cc8

08001bf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return 1;
 8001bf4:	2301      	movs	r3, #1
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr

08001bfe <_kill>:

int _kill(int pid, int sig)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c08:	f008 fb7e 	bl	800a308 <__errno>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2216      	movs	r2, #22
 8001c10:	601a      	str	r2, [r3, #0]
  return -1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <_exit>:

void _exit (int status)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c26:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ffe7 	bl	8001bfe <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c30:	e7fe      	b.n	8001c30 <_exit+0x12>

08001c32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e00a      	b.n	8001c5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c44:	f3af 8000 	nop.w
 8001c48:	4601      	mov	r1, r0
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	60ba      	str	r2, [r7, #8]
 8001c50:	b2ca      	uxtb	r2, r1
 8001c52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	dbf0      	blt.n	8001c44 <_read+0x12>
  }

  return len;
 8001c62:	687b      	ldr	r3, [r7, #4]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e009      	b.n	8001c92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	60ba      	str	r2, [r7, #8]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	dbf1      	blt.n	8001c7e <_write+0x12>
  }
  return len;
 8001c9a:	687b      	ldr	r3, [r7, #4]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_close>:

int _close(int file)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cca:	605a      	str	r2, [r3, #4]
  return 0;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <_isatty>:

int _isatty(int file)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ce0:	2301      	movs	r3, #1
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <_sbrk+0x5c>)
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <_sbrk+0x60>)
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d102      	bne.n	8001d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <_sbrk+0x64>)
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <_sbrk+0x68>)
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d207      	bcs.n	8001d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d34:	f008 fae8 	bl	800a308 <__errno>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	e009      	b.n	8001d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <_sbrk+0x64>)
 8001d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d56:	68fb      	ldr	r3, [r7, #12]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20005000 	.word	0x20005000
 8001d64:	00000400 	.word	0x00000400
 8001d68:	20000ccc 	.word	0x20000ccc
 8001d6c:	20000d28 	.word	0x20000d28

08001d70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d7e:	490d      	ldr	r1, [pc, #52]	; (8001db4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d80:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d94:	4c0a      	ldr	r4, [pc, #40]	; (8001dc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001da2:	f7ff ffe5 	bl	8001d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001da6:	f008 fab5 	bl	800a314 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001daa:	f7ff f805 	bl	8000db8 <main>
  bx lr
 8001dae:	4770      	bx	lr
  ldr r0, =_sdata
 8001db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db4:	200009b8 	.word	0x200009b8
  ldr r2, =_sidata
 8001db8:	0800f358 	.word	0x0800f358
  ldr r2, =_sbss
 8001dbc:	200009b8 	.word	0x200009b8
  ldr r4, =_ebss
 8001dc0:	20000d28 	.word	0x20000d28

08001dc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dc4:	e7fe      	b.n	8001dc4 <ADC1_2_IRQHandler>
	...

08001dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HAL_Init+0x28>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a07      	ldr	r2, [pc, #28]	; (8001df0 <HAL_Init+0x28>)
 8001dd2:	f043 0310 	orr.w	r3, r3, #16
 8001dd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd8:	2003      	movs	r0, #3
 8001dda:	f000 f923 	bl	8002024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dde:	200f      	movs	r0, #15
 8001de0:	f000 f808 	bl	8001df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de4:	f7ff fcee 	bl	80017c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40022000 	.word	0x40022000

08001df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_InitTick+0x54>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_InitTick+0x58>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f93b 	bl	800208e <HAL_SYSTICK_Config>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e00e      	b.n	8001e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b0f      	cmp	r3, #15
 8001e26:	d80a      	bhi.n	8001e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e30:	f000 f903 	bl	800203a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e34:	4a06      	ldr	r2, [pc, #24]	; (8001e50 <HAL_InitTick+0x5c>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e000      	b.n	8001e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	20000004 	.word	0x20000004

08001e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_IncTick+0x1c>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_IncTick+0x20>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	4a03      	ldr	r2, [pc, #12]	; (8001e74 <HAL_IncTick+0x20>)
 8001e66:	6013      	str	r3, [r2, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	20000008 	.word	0x20000008
 8001e74:	20000cd0 	.word	0x20000cd0

08001e78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e7c:	4b02      	ldr	r3, [pc, #8]	; (8001e88 <HAL_GetTick+0x10>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	20000cd0 	.word	0x20000cd0

08001e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ebe:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	60d3      	str	r3, [r2, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <__NVIC_GetPriorityGrouping+0x18>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	f003 0307 	and.w	r3, r3, #7
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	db0b      	blt.n	8001f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	f003 021f 	and.w	r2, r3, #31
 8001f08:	4906      	ldr	r1, [pc, #24]	; (8001f24 <__NVIC_EnableIRQ+0x34>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	2001      	movs	r0, #1
 8001f12:	fa00 f202 	lsl.w	r2, r0, r2
 8001f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100

08001f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	6039      	str	r1, [r7, #0]
 8001f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	db0a      	blt.n	8001f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	490c      	ldr	r1, [pc, #48]	; (8001f74 <__NVIC_SetPriority+0x4c>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	0112      	lsls	r2, r2, #4
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f50:	e00a      	b.n	8001f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4908      	ldr	r1, [pc, #32]	; (8001f78 <__NVIC_SetPriority+0x50>)
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	3b04      	subs	r3, #4
 8001f60:	0112      	lsls	r2, r2, #4
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	440b      	add	r3, r1
 8001f66:	761a      	strb	r2, [r3, #24]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000e100 	.word	0xe000e100
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f1c3 0307 	rsb	r3, r3, #7
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	bf28      	it	cs
 8001f9a:	2304      	movcs	r3, #4
 8001f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d902      	bls.n	8001fac <NVIC_EncodePriority+0x30>
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3b03      	subs	r3, #3
 8001faa:	e000      	b.n	8001fae <NVIC_EncodePriority+0x32>
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	fa01 f303 	lsl.w	r3, r1, r3
 8001fce:	43d9      	mvns	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	4313      	orrs	r3, r2
         );
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3724      	adds	r7, #36	; 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff0:	d301      	bcc.n	8001ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00f      	b.n	8002016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <SysTick_Config+0x40>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffe:	210f      	movs	r1, #15
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	f7ff ff90 	bl	8001f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <SysTick_Config+0x40>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <SysTick_Config+0x40>)
 8002010:	2207      	movs	r2, #7
 8002012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	e000e010 	.word	0xe000e010

08002024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ff2d 	bl	8001e8c <__NVIC_SetPriorityGrouping>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203a:	b580      	push	{r7, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800204c:	f7ff ff42 	bl	8001ed4 <__NVIC_GetPriorityGrouping>
 8002050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	6978      	ldr	r0, [r7, #20]
 8002058:	f7ff ff90 	bl	8001f7c <NVIC_EncodePriority>
 800205c:	4602      	mov	r2, r0
 800205e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff5f 	bl	8001f28 <__NVIC_SetPriority>
}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff35 	bl	8001ef0 <__NVIC_EnableIRQ>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ffa2 	bl	8001fe0 <SysTick_Config>
 800209c:	4603      	mov	r3, r0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e043      	b.n	8002146 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b22      	ldr	r3, [pc, #136]	; (8002150 <HAL_DMA_Init+0xa8>)
 80020c6:	4413      	add	r3, r2
 80020c8:	4a22      	ldr	r2, [pc, #136]	; (8002154 <HAL_DMA_Init+0xac>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	009a      	lsls	r2, r3, #2
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <HAL_DMA_Init+0xb0>)
 80020da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80020f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002100:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002118:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	bffdfff8 	.word	0xbffdfff8
 8002154:	cccccccd 	.word	0xcccccccd
 8002158:	40020000 	.word	0x40020000

0800215c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_DMA_Start_IT+0x20>
 8002178:	2302      	movs	r3, #2
 800217a:	e04a      	b.n	8002212 <HAL_DMA_Start_IT+0xb6>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800218a:	2b01      	cmp	r3, #1
 800218c:	d13a      	bne.n	8002204 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2202      	movs	r2, #2
 8002192:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0201 	bic.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 f9f4 	bl	80025a0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 020e 	orr.w	r2, r2, #14
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	e00f      	b.n	80021f2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0204 	bic.w	r2, r2, #4
 80021e0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 020a 	orr.w	r2, r2, #10
 80021f0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	e005      	b.n	8002210 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800220c:	2302      	movs	r3, #2
 800220e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002210:	7dfb      	ldrb	r3, [r7, #23]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800222c:	2b02      	cmp	r3, #2
 800222e:	d008      	beq.n	8002242 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2204      	movs	r2, #4
 8002234:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e020      	b.n	8002284 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 020e 	bic.w	r2, r2, #14
 8002250:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0201 	bic.w	r2, r2, #1
 8002260:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226a:	2101      	movs	r1, #1
 800226c:	fa01 f202 	lsl.w	r2, r1, r2
 8002270:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002282:	7bfb      	ldrb	r3, [r7, #15]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
	...

08002290 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d005      	beq.n	80022b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2204      	movs	r2, #4
 80022aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	e051      	b.n	8002356 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 020e 	bic.w	r2, r2, #14
 80022c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0201 	bic.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a22      	ldr	r2, [pc, #136]	; (8002360 <HAL_DMA_Abort_IT+0xd0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d029      	beq.n	8002330 <HAL_DMA_Abort_IT+0xa0>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a20      	ldr	r2, [pc, #128]	; (8002364 <HAL_DMA_Abort_IT+0xd4>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d022      	beq.n	800232c <HAL_DMA_Abort_IT+0x9c>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a1f      	ldr	r2, [pc, #124]	; (8002368 <HAL_DMA_Abort_IT+0xd8>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d01a      	beq.n	8002326 <HAL_DMA_Abort_IT+0x96>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a1d      	ldr	r2, [pc, #116]	; (800236c <HAL_DMA_Abort_IT+0xdc>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d012      	beq.n	8002320 <HAL_DMA_Abort_IT+0x90>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a1c      	ldr	r2, [pc, #112]	; (8002370 <HAL_DMA_Abort_IT+0xe0>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d00a      	beq.n	800231a <HAL_DMA_Abort_IT+0x8a>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a1a      	ldr	r2, [pc, #104]	; (8002374 <HAL_DMA_Abort_IT+0xe4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d102      	bne.n	8002314 <HAL_DMA_Abort_IT+0x84>
 800230e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002312:	e00e      	b.n	8002332 <HAL_DMA_Abort_IT+0xa2>
 8002314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002318:	e00b      	b.n	8002332 <HAL_DMA_Abort_IT+0xa2>
 800231a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800231e:	e008      	b.n	8002332 <HAL_DMA_Abort_IT+0xa2>
 8002320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002324:	e005      	b.n	8002332 <HAL_DMA_Abort_IT+0xa2>
 8002326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800232a:	e002      	b.n	8002332 <HAL_DMA_Abort_IT+0xa2>
 800232c:	2310      	movs	r3, #16
 800232e:	e000      	b.n	8002332 <HAL_DMA_Abort_IT+0xa2>
 8002330:	2301      	movs	r3, #1
 8002332:	4a11      	ldr	r2, [pc, #68]	; (8002378 <HAL_DMA_Abort_IT+0xe8>)
 8002334:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	4798      	blx	r3
    } 
  }
  return status;
 8002356:	7bfb      	ldrb	r3, [r7, #15]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40020008 	.word	0x40020008
 8002364:	4002001c 	.word	0x4002001c
 8002368:	40020030 	.word	0x40020030
 800236c:	40020044 	.word	0x40020044
 8002370:	40020058 	.word	0x40020058
 8002374:	4002006c 	.word	0x4002006c
 8002378:	40020000 	.word	0x40020000

0800237c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	2204      	movs	r2, #4
 800239a:	409a      	lsls	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d04f      	beq.n	8002444 <HAL_DMA_IRQHandler+0xc8>
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d04a      	beq.n	8002444 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d107      	bne.n	80023cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0204 	bic.w	r2, r2, #4
 80023ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a66      	ldr	r2, [pc, #408]	; (800256c <HAL_DMA_IRQHandler+0x1f0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d029      	beq.n	800242a <HAL_DMA_IRQHandler+0xae>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a65      	ldr	r2, [pc, #404]	; (8002570 <HAL_DMA_IRQHandler+0x1f4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d022      	beq.n	8002426 <HAL_DMA_IRQHandler+0xaa>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a63      	ldr	r2, [pc, #396]	; (8002574 <HAL_DMA_IRQHandler+0x1f8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d01a      	beq.n	8002420 <HAL_DMA_IRQHandler+0xa4>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a62      	ldr	r2, [pc, #392]	; (8002578 <HAL_DMA_IRQHandler+0x1fc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d012      	beq.n	800241a <HAL_DMA_IRQHandler+0x9e>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a60      	ldr	r2, [pc, #384]	; (800257c <HAL_DMA_IRQHandler+0x200>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00a      	beq.n	8002414 <HAL_DMA_IRQHandler+0x98>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a5f      	ldr	r2, [pc, #380]	; (8002580 <HAL_DMA_IRQHandler+0x204>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d102      	bne.n	800240e <HAL_DMA_IRQHandler+0x92>
 8002408:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800240c:	e00e      	b.n	800242c <HAL_DMA_IRQHandler+0xb0>
 800240e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002412:	e00b      	b.n	800242c <HAL_DMA_IRQHandler+0xb0>
 8002414:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002418:	e008      	b.n	800242c <HAL_DMA_IRQHandler+0xb0>
 800241a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800241e:	e005      	b.n	800242c <HAL_DMA_IRQHandler+0xb0>
 8002420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002424:	e002      	b.n	800242c <HAL_DMA_IRQHandler+0xb0>
 8002426:	2340      	movs	r3, #64	; 0x40
 8002428:	e000      	b.n	800242c <HAL_DMA_IRQHandler+0xb0>
 800242a:	2304      	movs	r3, #4
 800242c:	4a55      	ldr	r2, [pc, #340]	; (8002584 <HAL_DMA_IRQHandler+0x208>)
 800242e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 8094 	beq.w	8002562 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002442:	e08e      	b.n	8002562 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	2202      	movs	r2, #2
 800244a:	409a      	lsls	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d056      	beq.n	8002502 <HAL_DMA_IRQHandler+0x186>
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d051      	beq.n	8002502 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10b      	bne.n	8002484 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 020a 	bic.w	r2, r2, #10
 800247a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a38      	ldr	r2, [pc, #224]	; (800256c <HAL_DMA_IRQHandler+0x1f0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d029      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x166>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a37      	ldr	r2, [pc, #220]	; (8002570 <HAL_DMA_IRQHandler+0x1f4>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d022      	beq.n	80024de <HAL_DMA_IRQHandler+0x162>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a35      	ldr	r2, [pc, #212]	; (8002574 <HAL_DMA_IRQHandler+0x1f8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d01a      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x15c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a34      	ldr	r2, [pc, #208]	; (8002578 <HAL_DMA_IRQHandler+0x1fc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d012      	beq.n	80024d2 <HAL_DMA_IRQHandler+0x156>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a32      	ldr	r2, [pc, #200]	; (800257c <HAL_DMA_IRQHandler+0x200>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00a      	beq.n	80024cc <HAL_DMA_IRQHandler+0x150>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a31      	ldr	r2, [pc, #196]	; (8002580 <HAL_DMA_IRQHandler+0x204>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d102      	bne.n	80024c6 <HAL_DMA_IRQHandler+0x14a>
 80024c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024c4:	e00e      	b.n	80024e4 <HAL_DMA_IRQHandler+0x168>
 80024c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ca:	e00b      	b.n	80024e4 <HAL_DMA_IRQHandler+0x168>
 80024cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024d0:	e008      	b.n	80024e4 <HAL_DMA_IRQHandler+0x168>
 80024d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024d6:	e005      	b.n	80024e4 <HAL_DMA_IRQHandler+0x168>
 80024d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024dc:	e002      	b.n	80024e4 <HAL_DMA_IRQHandler+0x168>
 80024de:	2320      	movs	r3, #32
 80024e0:	e000      	b.n	80024e4 <HAL_DMA_IRQHandler+0x168>
 80024e2:	2302      	movs	r3, #2
 80024e4:	4a27      	ldr	r2, [pc, #156]	; (8002584 <HAL_DMA_IRQHandler+0x208>)
 80024e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d034      	beq.n	8002562 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002500:	e02f      	b.n	8002562 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	2208      	movs	r2, #8
 8002508:	409a      	lsls	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4013      	ands	r3, r2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d028      	beq.n	8002564 <HAL_DMA_IRQHandler+0x1e8>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d023      	beq.n	8002564 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 020e 	bic.w	r2, r2, #14
 800252a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002534:	2101      	movs	r1, #1
 8002536:	fa01 f202 	lsl.w	r2, r1, r2
 800253a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
    }
  }
  return;
 8002562:	bf00      	nop
 8002564:	bf00      	nop
}
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40020008 	.word	0x40020008
 8002570:	4002001c 	.word	0x4002001c
 8002574:	40020030 	.word	0x40020030
 8002578:	40020044 	.word	0x40020044
 800257c:	40020058 	.word	0x40020058
 8002580:	4002006c 	.word	0x4002006c
 8002584:	40020000 	.word	0x40020000

08002588 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
 80025ac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b6:	2101      	movs	r1, #1
 80025b8:	fa01 f202 	lsl.w	r2, r1, r2
 80025bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b10      	cmp	r3, #16
 80025cc:	d108      	bne.n	80025e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025de:	e007      	b.n	80025f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	60da      	str	r2, [r3, #12]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b08b      	sub	sp, #44	; 0x2c
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002606:	2300      	movs	r3, #0
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800260a:	2300      	movs	r3, #0
 800260c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800260e:	e169      	b.n	80028e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002610:	2201      	movs	r2, #1
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	429a      	cmp	r2, r3
 800262a:	f040 8158 	bne.w	80028de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	4a9a      	ldr	r2, [pc, #616]	; (800289c <HAL_GPIO_Init+0x2a0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d05e      	beq.n	80026f6 <HAL_GPIO_Init+0xfa>
 8002638:	4a98      	ldr	r2, [pc, #608]	; (800289c <HAL_GPIO_Init+0x2a0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d875      	bhi.n	800272a <HAL_GPIO_Init+0x12e>
 800263e:	4a98      	ldr	r2, [pc, #608]	; (80028a0 <HAL_GPIO_Init+0x2a4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d058      	beq.n	80026f6 <HAL_GPIO_Init+0xfa>
 8002644:	4a96      	ldr	r2, [pc, #600]	; (80028a0 <HAL_GPIO_Init+0x2a4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d86f      	bhi.n	800272a <HAL_GPIO_Init+0x12e>
 800264a:	4a96      	ldr	r2, [pc, #600]	; (80028a4 <HAL_GPIO_Init+0x2a8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d052      	beq.n	80026f6 <HAL_GPIO_Init+0xfa>
 8002650:	4a94      	ldr	r2, [pc, #592]	; (80028a4 <HAL_GPIO_Init+0x2a8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d869      	bhi.n	800272a <HAL_GPIO_Init+0x12e>
 8002656:	4a94      	ldr	r2, [pc, #592]	; (80028a8 <HAL_GPIO_Init+0x2ac>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d04c      	beq.n	80026f6 <HAL_GPIO_Init+0xfa>
 800265c:	4a92      	ldr	r2, [pc, #584]	; (80028a8 <HAL_GPIO_Init+0x2ac>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d863      	bhi.n	800272a <HAL_GPIO_Init+0x12e>
 8002662:	4a92      	ldr	r2, [pc, #584]	; (80028ac <HAL_GPIO_Init+0x2b0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d046      	beq.n	80026f6 <HAL_GPIO_Init+0xfa>
 8002668:	4a90      	ldr	r2, [pc, #576]	; (80028ac <HAL_GPIO_Init+0x2b0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d85d      	bhi.n	800272a <HAL_GPIO_Init+0x12e>
 800266e:	2b12      	cmp	r3, #18
 8002670:	d82a      	bhi.n	80026c8 <HAL_GPIO_Init+0xcc>
 8002672:	2b12      	cmp	r3, #18
 8002674:	d859      	bhi.n	800272a <HAL_GPIO_Init+0x12e>
 8002676:	a201      	add	r2, pc, #4	; (adr r2, 800267c <HAL_GPIO_Init+0x80>)
 8002678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267c:	080026f7 	.word	0x080026f7
 8002680:	080026d1 	.word	0x080026d1
 8002684:	080026e3 	.word	0x080026e3
 8002688:	08002725 	.word	0x08002725
 800268c:	0800272b 	.word	0x0800272b
 8002690:	0800272b 	.word	0x0800272b
 8002694:	0800272b 	.word	0x0800272b
 8002698:	0800272b 	.word	0x0800272b
 800269c:	0800272b 	.word	0x0800272b
 80026a0:	0800272b 	.word	0x0800272b
 80026a4:	0800272b 	.word	0x0800272b
 80026a8:	0800272b 	.word	0x0800272b
 80026ac:	0800272b 	.word	0x0800272b
 80026b0:	0800272b 	.word	0x0800272b
 80026b4:	0800272b 	.word	0x0800272b
 80026b8:	0800272b 	.word	0x0800272b
 80026bc:	0800272b 	.word	0x0800272b
 80026c0:	080026d9 	.word	0x080026d9
 80026c4:	080026ed 	.word	0x080026ed
 80026c8:	4a79      	ldr	r2, [pc, #484]	; (80028b0 <HAL_GPIO_Init+0x2b4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d013      	beq.n	80026f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026ce:	e02c      	b.n	800272a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	623b      	str	r3, [r7, #32]
          break;
 80026d6:	e029      	b.n	800272c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	3304      	adds	r3, #4
 80026de:	623b      	str	r3, [r7, #32]
          break;
 80026e0:	e024      	b.n	800272c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	3308      	adds	r3, #8
 80026e8:	623b      	str	r3, [r7, #32]
          break;
 80026ea:	e01f      	b.n	800272c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	330c      	adds	r3, #12
 80026f2:	623b      	str	r3, [r7, #32]
          break;
 80026f4:	e01a      	b.n	800272c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d102      	bne.n	8002704 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026fe:	2304      	movs	r3, #4
 8002700:	623b      	str	r3, [r7, #32]
          break;
 8002702:	e013      	b.n	800272c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d105      	bne.n	8002718 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800270c:	2308      	movs	r3, #8
 800270e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	611a      	str	r2, [r3, #16]
          break;
 8002716:	e009      	b.n	800272c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002718:	2308      	movs	r3, #8
 800271a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	615a      	str	r2, [r3, #20]
          break;
 8002722:	e003      	b.n	800272c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002724:	2300      	movs	r3, #0
 8002726:	623b      	str	r3, [r7, #32]
          break;
 8002728:	e000      	b.n	800272c <HAL_GPIO_Init+0x130>
          break;
 800272a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	2bff      	cmp	r3, #255	; 0xff
 8002730:	d801      	bhi.n	8002736 <HAL_GPIO_Init+0x13a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	e001      	b.n	800273a <HAL_GPIO_Init+0x13e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3304      	adds	r3, #4
 800273a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	2bff      	cmp	r3, #255	; 0xff
 8002740:	d802      	bhi.n	8002748 <HAL_GPIO_Init+0x14c>
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	e002      	b.n	800274e <HAL_GPIO_Init+0x152>
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	3b08      	subs	r3, #8
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	210f      	movs	r1, #15
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	fa01 f303 	lsl.w	r3, r1, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	401a      	ands	r2, r3
 8002760:	6a39      	ldr	r1, [r7, #32]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	431a      	orrs	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 80b1 	beq.w	80028de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800277c:	4b4d      	ldr	r3, [pc, #308]	; (80028b4 <HAL_GPIO_Init+0x2b8>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	4a4c      	ldr	r2, [pc, #304]	; (80028b4 <HAL_GPIO_Init+0x2b8>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6193      	str	r3, [r2, #24]
 8002788:	4b4a      	ldr	r3, [pc, #296]	; (80028b4 <HAL_GPIO_Init+0x2b8>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002794:	4a48      	ldr	r2, [pc, #288]	; (80028b8 <HAL_GPIO_Init+0x2bc>)
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	089b      	lsrs	r3, r3, #2
 800279a:	3302      	adds	r3, #2
 800279c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	220f      	movs	r2, #15
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4013      	ands	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a40      	ldr	r2, [pc, #256]	; (80028bc <HAL_GPIO_Init+0x2c0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d013      	beq.n	80027e8 <HAL_GPIO_Init+0x1ec>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a3f      	ldr	r2, [pc, #252]	; (80028c0 <HAL_GPIO_Init+0x2c4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00d      	beq.n	80027e4 <HAL_GPIO_Init+0x1e8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a3e      	ldr	r2, [pc, #248]	; (80028c4 <HAL_GPIO_Init+0x2c8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d007      	beq.n	80027e0 <HAL_GPIO_Init+0x1e4>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a3d      	ldr	r2, [pc, #244]	; (80028c8 <HAL_GPIO_Init+0x2cc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d101      	bne.n	80027dc <HAL_GPIO_Init+0x1e0>
 80027d8:	2303      	movs	r3, #3
 80027da:	e006      	b.n	80027ea <HAL_GPIO_Init+0x1ee>
 80027dc:	2304      	movs	r3, #4
 80027de:	e004      	b.n	80027ea <HAL_GPIO_Init+0x1ee>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e002      	b.n	80027ea <HAL_GPIO_Init+0x1ee>
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <HAL_GPIO_Init+0x1ee>
 80027e8:	2300      	movs	r3, #0
 80027ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ec:	f002 0203 	and.w	r2, r2, #3
 80027f0:	0092      	lsls	r2, r2, #2
 80027f2:	4093      	lsls	r3, r2
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027fa:	492f      	ldr	r1, [pc, #188]	; (80028b8 <HAL_GPIO_Init+0x2bc>)
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	089b      	lsrs	r3, r3, #2
 8002800:	3302      	adds	r3, #2
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d006      	beq.n	8002822 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002814:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <HAL_GPIO_Init+0x2d0>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	492c      	ldr	r1, [pc, #176]	; (80028cc <HAL_GPIO_Init+0x2d0>)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	600b      	str	r3, [r1, #0]
 8002820:	e006      	b.n	8002830 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002822:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <HAL_GPIO_Init+0x2d0>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	43db      	mvns	r3, r3
 800282a:	4928      	ldr	r1, [pc, #160]	; (80028cc <HAL_GPIO_Init+0x2d0>)
 800282c:	4013      	ands	r3, r2
 800282e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d006      	beq.n	800284a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800283c:	4b23      	ldr	r3, [pc, #140]	; (80028cc <HAL_GPIO_Init+0x2d0>)
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	4922      	ldr	r1, [pc, #136]	; (80028cc <HAL_GPIO_Init+0x2d0>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
 8002848:	e006      	b.n	8002858 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800284a:	4b20      	ldr	r3, [pc, #128]	; (80028cc <HAL_GPIO_Init+0x2d0>)
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	43db      	mvns	r3, r3
 8002852:	491e      	ldr	r1, [pc, #120]	; (80028cc <HAL_GPIO_Init+0x2d0>)
 8002854:	4013      	ands	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d006      	beq.n	8002872 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_GPIO_Init+0x2d0>)
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	4918      	ldr	r1, [pc, #96]	; (80028cc <HAL_GPIO_Init+0x2d0>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	608b      	str	r3, [r1, #8]
 8002870:	e006      	b.n	8002880 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002872:	4b16      	ldr	r3, [pc, #88]	; (80028cc <HAL_GPIO_Init+0x2d0>)
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	43db      	mvns	r3, r3
 800287a:	4914      	ldr	r1, [pc, #80]	; (80028cc <HAL_GPIO_Init+0x2d0>)
 800287c:	4013      	ands	r3, r2
 800287e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d021      	beq.n	80028d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <HAL_GPIO_Init+0x2d0>)
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	490e      	ldr	r1, [pc, #56]	; (80028cc <HAL_GPIO_Init+0x2d0>)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	60cb      	str	r3, [r1, #12]
 8002898:	e021      	b.n	80028de <HAL_GPIO_Init+0x2e2>
 800289a:	bf00      	nop
 800289c:	10320000 	.word	0x10320000
 80028a0:	10310000 	.word	0x10310000
 80028a4:	10220000 	.word	0x10220000
 80028a8:	10210000 	.word	0x10210000
 80028ac:	10120000 	.word	0x10120000
 80028b0:	10110000 	.word	0x10110000
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40010000 	.word	0x40010000
 80028bc:	40010800 	.word	0x40010800
 80028c0:	40010c00 	.word	0x40010c00
 80028c4:	40011000 	.word	0x40011000
 80028c8:	40011400 	.word	0x40011400
 80028cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_GPIO_Init+0x304>)
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	43db      	mvns	r3, r3
 80028d8:	4909      	ldr	r1, [pc, #36]	; (8002900 <HAL_GPIO_Init+0x304>)
 80028da:	4013      	ands	r3, r2
 80028dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	3301      	adds	r3, #1
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	fa22 f303 	lsr.w	r3, r2, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f47f ae8e 	bne.w	8002610 <HAL_GPIO_Init+0x14>
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	372c      	adds	r7, #44	; 0x2c
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr
 8002900:	40010400 	.word	0x40010400

08002904 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e12b      	b.n	8002b6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7fe ff7c 	bl	8001828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2224      	movs	r2, #36	; 0x24
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0201 	bic.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002956:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002966:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002968:	f003 fab0 	bl	8005ecc <HAL_RCC_GetPCLK1Freq>
 800296c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4a81      	ldr	r2, [pc, #516]	; (8002b78 <HAL_I2C_Init+0x274>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d807      	bhi.n	8002988 <HAL_I2C_Init+0x84>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4a80      	ldr	r2, [pc, #512]	; (8002b7c <HAL_I2C_Init+0x278>)
 800297c:	4293      	cmp	r3, r2
 800297e:	bf94      	ite	ls
 8002980:	2301      	movls	r3, #1
 8002982:	2300      	movhi	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	e006      	b.n	8002996 <HAL_I2C_Init+0x92>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a7d      	ldr	r2, [pc, #500]	; (8002b80 <HAL_I2C_Init+0x27c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	bf94      	ite	ls
 8002990:	2301      	movls	r3, #1
 8002992:	2300      	movhi	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0e7      	b.n	8002b6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4a78      	ldr	r2, [pc, #480]	; (8002b84 <HAL_I2C_Init+0x280>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	0c9b      	lsrs	r3, r3, #18
 80029a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4a6a      	ldr	r2, [pc, #424]	; (8002b78 <HAL_I2C_Init+0x274>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d802      	bhi.n	80029d8 <HAL_I2C_Init+0xd4>
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	3301      	adds	r3, #1
 80029d6:	e009      	b.n	80029ec <HAL_I2C_Init+0xe8>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029de:	fb02 f303 	mul.w	r3, r2, r3
 80029e2:	4a69      	ldr	r2, [pc, #420]	; (8002b88 <HAL_I2C_Init+0x284>)
 80029e4:	fba2 2303 	umull	r2, r3, r2, r3
 80029e8:	099b      	lsrs	r3, r3, #6
 80029ea:	3301      	adds	r3, #1
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	430b      	orrs	r3, r1
 80029f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	495c      	ldr	r1, [pc, #368]	; (8002b78 <HAL_I2C_Init+0x274>)
 8002a08:	428b      	cmp	r3, r1
 8002a0a:	d819      	bhi.n	8002a40 <HAL_I2C_Init+0x13c>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1e59      	subs	r1, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a1a:	1c59      	adds	r1, r3, #1
 8002a1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a20:	400b      	ands	r3, r1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_I2C_Init+0x138>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1e59      	subs	r1, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a34:	3301      	adds	r3, #1
 8002a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a3a:	e051      	b.n	8002ae0 <HAL_I2C_Init+0x1dc>
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	e04f      	b.n	8002ae0 <HAL_I2C_Init+0x1dc>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d111      	bne.n	8002a6c <HAL_I2C_Init+0x168>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1e58      	subs	r0, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	440b      	add	r3, r1
 8002a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	e012      	b.n	8002a92 <HAL_I2C_Init+0x18e>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1e58      	subs	r0, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	0099      	lsls	r1, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a82:	3301      	adds	r3, #1
 8002a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_Init+0x196>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e022      	b.n	8002ae0 <HAL_I2C_Init+0x1dc>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10e      	bne.n	8002ac0 <HAL_I2C_Init+0x1bc>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1e58      	subs	r0, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6859      	ldr	r1, [r3, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	440b      	add	r3, r1
 8002ab0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002abe:	e00f      	b.n	8002ae0 <HAL_I2C_Init+0x1dc>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1e58      	subs	r0, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	0099      	lsls	r1, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	6809      	ldr	r1, [r1, #0]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6911      	ldr	r1, [r2, #16]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68d2      	ldr	r2, [r2, #12]
 8002b1a:	4311      	orrs	r1, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	000186a0 	.word	0x000186a0
 8002b7c:	001e847f 	.word	0x001e847f
 8002b80:	003d08ff 	.word	0x003d08ff
 8002b84:	431bde83 	.word	0x431bde83
 8002b88:	10624dd3 	.word	0x10624dd3

08002b8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08c      	sub	sp, #48	; 0x30
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	4608      	mov	r0, r1
 8002b96:	4611      	mov	r1, r2
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	817b      	strh	r3, [r7, #10]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	813b      	strh	r3, [r7, #8]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002baa:	f7ff f965 	bl	8001e78 <HAL_GetTick>
 8002bae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	f040 8244 	bne.w	8003046 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2319      	movs	r3, #25
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	4982      	ldr	r1, [pc, #520]	; (8002dd0 <HAL_I2C_Mem_Read+0x244>)
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f002 fbc3 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e237      	b.n	8003048 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_I2C_Mem_Read+0x5a>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e230      	b.n	8003048 <HAL_I2C_Mem_Read+0x4bc>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d007      	beq.n	8002c0c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2222      	movs	r2, #34	; 0x22
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2240      	movs	r2, #64	; 0x40
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4a62      	ldr	r2, [pc, #392]	; (8002dd4 <HAL_I2C_Mem_Read+0x248>)
 8002c4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c4e:	88f8      	ldrh	r0, [r7, #6]
 8002c50:	893a      	ldrh	r2, [r7, #8]
 8002c52:	8979      	ldrh	r1, [r7, #10]
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f002 f8dc 	bl	8004e1c <I2C_RequestMemoryRead>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e1ec      	b.n	8003048 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d113      	bne.n	8002c9e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e1c0      	b.n	8003020 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d11e      	bne.n	8002ce4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb6:	b672      	cpsid	i
}
 8002cb8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61bb      	str	r3, [r7, #24]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ce0:	b662      	cpsie	i
}
 8002ce2:	e035      	b.n	8002d50 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d11e      	bne.n	8002d2a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cfa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cfc:	b672      	cpsid	i
}
 8002cfe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d26:	b662      	cpsie	i
}
 8002d28:	e012      	b.n	8002d50 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d38:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002d50:	e166      	b.n	8003020 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	f200 811f 	bhi.w	8002f9a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d123      	bne.n	8002dac <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f002 fc3d 	bl	80055e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e167      	b.n	8003048 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002daa:	e139      	b.n	8003020 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d152      	bne.n	8002e5a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dba:	2200      	movs	r2, #0
 8002dbc:	4906      	ldr	r1, [pc, #24]	; (8002dd8 <HAL_I2C_Mem_Read+0x24c>)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f002 fac8 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e13c      	b.n	8003048 <HAL_I2C_Mem_Read+0x4bc>
 8002dce:	bf00      	nop
 8002dd0:	00100002 	.word	0x00100002
 8002dd4:	ffff0000 	.word	0xffff0000
 8002dd8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002ddc:	b672      	cpsid	i
}
 8002dde:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691a      	ldr	r2, [r3, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e22:	b662      	cpsie	i
}
 8002e24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e58:	e0e2      	b.n	8003020 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e60:	2200      	movs	r2, #0
 8002e62:	497b      	ldr	r1, [pc, #492]	; (8003050 <HAL_I2C_Mem_Read+0x4c4>)
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f002 fa75 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0e9      	b.n	8003048 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e84:	b672      	cpsid	i
}
 8002e86:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002eba:	4b66      	ldr	r3, [pc, #408]	; (8003054 <HAL_I2C_Mem_Read+0x4c8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	08db      	lsrs	r3, r3, #3
 8002ec0:	4a65      	ldr	r2, [pc, #404]	; (8003058 <HAL_I2C_Mem_Read+0x4cc>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	0a1a      	lsrs	r2, r3, #8
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	00da      	lsls	r2, r3, #3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d118      	bne.n	8002f12 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f043 0220 	orr.w	r2, r3, #32
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002f02:	b662      	cpsie	i
}
 8002f04:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e09a      	b.n	8003048 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d1d9      	bne.n	8002ed4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f62:	b662      	cpsie	i
}
 8002f64:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f98:	e042      	b.n	8003020 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f002 fb22 	bl	80055e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e04c      	b.n	8003048 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d118      	bne.n	8003020 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003024:	2b00      	cmp	r3, #0
 8003026:	f47f ae94 	bne.w	8002d52 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	e000      	b.n	8003048 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003046:	2302      	movs	r3, #2
  }
}
 8003048:	4618      	mov	r0, r3
 800304a:	3728      	adds	r7, #40	; 0x28
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	00010004 	.word	0x00010004
 8003054:	20000000 	.word	0x20000000
 8003058:	14f8b589 	.word	0x14f8b589

0800305c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af02      	add	r7, sp, #8
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	4608      	mov	r0, r1
 8003066:	4611      	mov	r1, r2
 8003068:	461a      	mov	r2, r3
 800306a:	4603      	mov	r3, r0
 800306c:	817b      	strh	r3, [r7, #10]
 800306e:	460b      	mov	r3, r1
 8003070:	813b      	strh	r3, [r7, #8]
 8003072:	4613      	mov	r3, r2
 8003074:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800307a:	f7fe fefd 	bl	8001e78 <HAL_GetTick>
 800307e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b20      	cmp	r3, #32
 800308a:	f040 8126 	bne.w	80032da <HAL_I2C_Mem_Write_DMA+0x27e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800308e:	4b95      	ldr	r3, [pc, #596]	; (80032e4 <HAL_I2C_Mem_Write_DMA+0x288>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	08db      	lsrs	r3, r3, #3
 8003094:	4a94      	ldr	r2, [pc, #592]	; (80032e8 <HAL_I2C_Mem_Write_DMA+0x28c>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	0a1a      	lsrs	r2, r3, #8
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	009a      	lsls	r2, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d116      	bne.n	80030e2 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f043 0220 	orr.w	r2, r3, #32
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e0fc      	b.n	80032dc <HAL_I2C_Mem_Write_DMA+0x280>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d0db      	beq.n	80030a8 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_I2C_Mem_Write_DMA+0xa2>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e0ee      	b.n	80032dc <HAL_I2C_Mem_Write_DMA+0x280>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d007      	beq.n	8003124 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003132:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2221      	movs	r2, #33	; 0x21
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2240      	movs	r2, #64	; 0x40
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800314e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003154:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4a62      	ldr	r2, [pc, #392]	; (80032ec <HAL_I2C_Mem_Write_DMA+0x290>)
 8003164:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80a1 	beq.w	80032b2 <HAL_I2C_Mem_Write_DMA+0x256>
    {
      if (hi2c->hdmatx != NULL)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003174:	2b00      	cmp	r3, #0
 8003176:	d022      	beq.n	80031be <HAL_I2C_Mem_Write_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317c:	4a5c      	ldr	r2, [pc, #368]	; (80032f0 <HAL_I2C_Mem_Write_DMA+0x294>)
 800317e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003184:	4a5b      	ldr	r2, [pc, #364]	; (80032f4 <HAL_I2C_Mem_Write_DMA+0x298>)
 8003186:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318c:	2200      	movs	r2, #0
 800318e:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003194:	2200      	movs	r2, #0
 8003196:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	4619      	mov	r1, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3310      	adds	r3, #16
 80031a8:	461a      	mov	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	f7fe ffd5 	bl	800215c <HAL_DMA_Start_IT>
 80031b2:	4603      	mov	r3, r0
 80031b4:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80031b6:	7efb      	ldrb	r3, [r7, #27]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d166      	bne.n	800328a <HAL_I2C_Mem_Write_DMA+0x22e>
 80031bc:	e013      	b.n	80031e6 <HAL_I2C_Mem_Write_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e07a      	b.n	80032dc <HAL_I2C_Mem_Write_DMA+0x280>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80031e6:	88f8      	ldrh	r0, [r7, #6]
 80031e8:	893a      	ldrh	r2, [r7, #8]
 80031ea:	8979      	ldrh	r1, [r7, #10]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	9301      	str	r3, [sp, #4]
 80031f0:	2323      	movs	r3, #35	; 0x23
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	4603      	mov	r3, r0
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f001 fd7a 	bl	8004cf0 <I2C_RequestMemoryWrite>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d022      	beq.n	8003248 <HAL_I2C_Mem_Write_DMA+0x1ec>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff f842 	bl	8002290 <HAL_DMA_Abort_IT>
 800320c:	4603      	mov	r3, r0
 800320e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003214:	2200      	movs	r2, #0
 8003216:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003226:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e049      	b.n	80032dc <HAL_I2C_Mem_Write_DMA+0x280>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003248:	2300      	movs	r3, #0
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003274:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003284:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	e028      	b.n	80032dc <HAL_I2C_Mem_Write_DMA+0x280>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f043 0210 	orr.w	r2, r3, #16
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e014      	b.n	80032dc <HAL_I2C_Mem_Write_DMA+0x280>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_I2C_Mem_Write_DMA+0x280>
    }
  }
  else
  {
    return HAL_BUSY;
 80032da:	2302      	movs	r3, #2
  }
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3720      	adds	r7, #32
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000000 	.word	0x20000000
 80032e8:	14f8b589 	.word	0x14f8b589
 80032ec:	ffff0000 	.word	0xffff0000
 80032f0:	08004fed 	.word	0x08004fed
 80032f4:	08005197 	.word	0x08005197

080032f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	460b      	mov	r3, r1
 8003306:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003308:	f7fe fdb6 	bl	8001e78 <HAL_GetTick>
 800330c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800330e:	2301      	movs	r3, #1
 8003310:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b20      	cmp	r3, #32
 800331c:	f040 8111 	bne.w	8003542 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2319      	movs	r3, #25
 8003326:	2201      	movs	r2, #1
 8003328:	4988      	ldr	r1, [pc, #544]	; (800354c <HAL_I2C_IsDeviceReady+0x254>)
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f002 f812 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003336:	2302      	movs	r3, #2
 8003338:	e104      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_I2C_IsDeviceReady+0x50>
 8003344:	2302      	movs	r3, #2
 8003346:	e0fd      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b01      	cmp	r3, #1
 800335c:	d007      	beq.n	800336e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0201 	orr.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800337c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2224      	movs	r2, #36	; 0x24
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a70      	ldr	r2, [pc, #448]	; (8003550 <HAL_I2C_IsDeviceReady+0x258>)
 8003390:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f001 ffd0 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c8:	d103      	bne.n	80033d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e0b6      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033d6:	897b      	ldrh	r3, [r7, #10]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80033e6:	f7fe fd47 	bl	8001e78 <HAL_GetTick>
 80033ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	bf0c      	ite	eq
 80033fa:	2301      	moveq	r3, #1
 80033fc:	2300      	movne	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003410:	bf0c      	ite	eq
 8003412:	2301      	moveq	r3, #1
 8003414:	2300      	movne	r3, #0
 8003416:	b2db      	uxtb	r3, r3
 8003418:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800341a:	e025      	b.n	8003468 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800341c:	f7fe fd2c 	bl	8001e78 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d302      	bcc.n	8003432 <HAL_I2C_IsDeviceReady+0x13a>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d103      	bne.n	800343a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	22a0      	movs	r2, #160	; 0xa0
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b02      	cmp	r3, #2
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2ba0      	cmp	r3, #160	; 0xa0
 8003472:	d005      	beq.n	8003480 <HAL_I2C_IsDeviceReady+0x188>
 8003474:	7dfb      	ldrb	r3, [r7, #23]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <HAL_I2C_IsDeviceReady+0x188>
 800347a:	7dbb      	ldrb	r3, [r7, #22]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0cd      	beq.n	800341c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b02      	cmp	r3, #2
 8003494:	d129      	bne.n	80034ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a6:	2300      	movs	r3, #0
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2319      	movs	r3, #25
 80034c2:	2201      	movs	r2, #1
 80034c4:	4921      	ldr	r1, [pc, #132]	; (800354c <HAL_I2C_IsDeviceReady+0x254>)
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f001 ff44 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e036      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	e02c      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003502:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2319      	movs	r3, #25
 800350a:	2201      	movs	r2, #1
 800350c:	490f      	ldr	r1, [pc, #60]	; (800354c <HAL_I2C_IsDeviceReady+0x254>)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f001 ff20 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e012      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	3301      	adds	r3, #1
 8003522:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	429a      	cmp	r2, r3
 800352a:	f4ff af32 	bcc.w	8003392 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003542:	2302      	movs	r3, #2
  }
}
 8003544:	4618      	mov	r0, r3
 8003546:	3720      	adds	r7, #32
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	00100002 	.word	0x00100002
 8003550:	ffff0000 	.word	0xffff0000

08003554 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003574:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	2b10      	cmp	r3, #16
 8003582:	d003      	beq.n	800358c <HAL_I2C_EV_IRQHandler+0x38>
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	f040 80c1 	bne.w	800370e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10d      	bne.n	80035c2 <HAL_I2C_EV_IRQHandler+0x6e>
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80035ac:	d003      	beq.n	80035b6 <HAL_I2C_EV_IRQHandler+0x62>
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80035b4:	d101      	bne.n	80035ba <HAL_I2C_EV_IRQHandler+0x66>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_I2C_EV_IRQHandler+0x68>
 80035ba:	2300      	movs	r3, #0
 80035bc:	2b01      	cmp	r3, #1
 80035be:	f000 8132 	beq.w	8003826 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00c      	beq.n	80035e6 <HAL_I2C_EV_IRQHandler+0x92>
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	0a5b      	lsrs	r3, r3, #9
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d006      	beq.n	80035e6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f002 f889 	bl	80056f0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fd65 	bl	80040ae <I2C_Master_SB>
 80035e4:	e092      	b.n	800370c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	08db      	lsrs	r3, r3, #3
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d009      	beq.n	8003606 <HAL_I2C_EV_IRQHandler+0xb2>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	0a5b      	lsrs	r3, r3, #9
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fdda 	bl	80041b8 <I2C_Master_ADD10>
 8003604:	e082      	b.n	800370c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d009      	beq.n	8003626 <HAL_I2C_EV_IRQHandler+0xd2>
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	0a5b      	lsrs	r3, r3, #9
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fdf3 	bl	800420a <I2C_Master_ADDR>
 8003624:	e072      	b.n	800370c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	089b      	lsrs	r3, r3, #2
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d03b      	beq.n	80036aa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800363c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003640:	f000 80f3 	beq.w	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	09db      	lsrs	r3, r3, #7
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00f      	beq.n	8003670 <HAL_I2C_EV_IRQHandler+0x11c>
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	0a9b      	lsrs	r3, r3, #10
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d009      	beq.n	8003670 <HAL_I2C_EV_IRQHandler+0x11c>
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	089b      	lsrs	r3, r3, #2
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d103      	bne.n	8003670 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f9df 	bl	8003a2c <I2C_MasterTransmit_TXE>
 800366e:	e04d      	b.n	800370c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	089b      	lsrs	r3, r3, #2
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80d6 	beq.w	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	0a5b      	lsrs	r3, r3, #9
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80cf 	beq.w	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800368c:	7bbb      	ldrb	r3, [r7, #14]
 800368e:	2b21      	cmp	r3, #33	; 0x21
 8003690:	d103      	bne.n	800369a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fa66 	bl	8003b64 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003698:	e0c7      	b.n	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	2b40      	cmp	r3, #64	; 0x40
 800369e:	f040 80c4 	bne.w	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fad4 	bl	8003c50 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036a8:	e0bf      	b.n	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b8:	f000 80b7 	beq.w	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	099b      	lsrs	r3, r3, #6
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00f      	beq.n	80036e8 <HAL_I2C_EV_IRQHandler+0x194>
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	0a9b      	lsrs	r3, r3, #10
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d009      	beq.n	80036e8 <HAL_I2C_EV_IRQHandler+0x194>
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	089b      	lsrs	r3, r3, #2
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d103      	bne.n	80036e8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fb49 	bl	8003d78 <I2C_MasterReceive_RXNE>
 80036e6:	e011      	b.n	800370c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	089b      	lsrs	r3, r3, #2
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 809a 	beq.w	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	0a5b      	lsrs	r3, r3, #9
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8093 	beq.w	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fbe8 	bl	8003eda <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800370a:	e08e      	b.n	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
 800370c:	e08d      	b.n	800382a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d004      	beq.n	8003720 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	e007      	b.n	8003730 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	085b      	lsrs	r3, r3, #1
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d012      	beq.n	8003762 <HAL_I2C_EV_IRQHandler+0x20e>
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	0a5b      	lsrs	r3, r3, #9
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00c      	beq.n	8003762 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003758:	69b9      	ldr	r1, [r7, #24]
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 ffac 	bl	80046b8 <I2C_Slave_ADDR>
 8003760:	e066      	b.n	8003830 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	091b      	lsrs	r3, r3, #4
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d009      	beq.n	8003782 <HAL_I2C_EV_IRQHandler+0x22e>
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	0a5b      	lsrs	r3, r3, #9
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 ffe6 	bl	800474c <I2C_Slave_STOPF>
 8003780:	e056      	b.n	8003830 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003782:	7bbb      	ldrb	r3, [r7, #14]
 8003784:	2b21      	cmp	r3, #33	; 0x21
 8003786:	d002      	beq.n	800378e <HAL_I2C_EV_IRQHandler+0x23a>
 8003788:	7bbb      	ldrb	r3, [r7, #14]
 800378a:	2b29      	cmp	r3, #41	; 0x29
 800378c:	d125      	bne.n	80037da <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	09db      	lsrs	r3, r3, #7
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00f      	beq.n	80037ba <HAL_I2C_EV_IRQHandler+0x266>
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	0a9b      	lsrs	r3, r3, #10
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_I2C_EV_IRQHandler+0x266>
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	089b      	lsrs	r3, r3, #2
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fec4 	bl	8004540 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037b8:	e039      	b.n	800382e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	089b      	lsrs	r3, r3, #2
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d033      	beq.n	800382e <HAL_I2C_EV_IRQHandler+0x2da>
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	0a5b      	lsrs	r3, r3, #9
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d02d      	beq.n	800382e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fef1 	bl	80045ba <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037d8:	e029      	b.n	800382e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	099b      	lsrs	r3, r3, #6
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00f      	beq.n	8003806 <HAL_I2C_EV_IRQHandler+0x2b2>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	0a9b      	lsrs	r3, r3, #10
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d009      	beq.n	8003806 <HAL_I2C_EV_IRQHandler+0x2b2>
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	089b      	lsrs	r3, r3, #2
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fefb 	bl	80045fa <I2C_SlaveReceive_RXNE>
 8003804:	e014      	b.n	8003830 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	089b      	lsrs	r3, r3, #2
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00e      	beq.n	8003830 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	0a5b      	lsrs	r3, r3, #9
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d008      	beq.n	8003830 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 ff29 	bl	8004676 <I2C_SlaveReceive_BTF>
 8003824:	e004      	b.n	8003830 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003826:	bf00      	nop
 8003828:	e002      	b.n	8003830 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800382a:	bf00      	nop
 800382c:	e000      	b.n	8003830 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800382e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003830:	3720      	adds	r7, #32
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b08a      	sub	sp, #40	; 0x28
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800384e:	2300      	movs	r3, #0
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003858:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	0a1b      	lsrs	r3, r3, #8
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d016      	beq.n	8003894 <HAL_I2C_ER_IRQHandler+0x5e>
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	0a1b      	lsrs	r3, r3, #8
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d010      	beq.n	8003894 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003882:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003892:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	0a5b      	lsrs	r3, r3, #9
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00e      	beq.n	80038be <HAL_I2C_ER_IRQHandler+0x88>
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	0a1b      	lsrs	r3, r3, #8
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	f043 0302 	orr.w	r3, r3, #2
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80038bc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	0a9b      	lsrs	r3, r3, #10
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d03f      	beq.n	800394a <HAL_I2C_ER_IRQHandler+0x114>
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d039      	beq.n	800394a <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80038d6:	7efb      	ldrb	r3, [r7, #27]
 80038d8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80038f0:	7ebb      	ldrb	r3, [r7, #26]
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d112      	bne.n	800391c <HAL_I2C_ER_IRQHandler+0xe6>
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10f      	bne.n	800391c <HAL_I2C_ER_IRQHandler+0xe6>
 80038fc:	7cfb      	ldrb	r3, [r7, #19]
 80038fe:	2b21      	cmp	r3, #33	; 0x21
 8003900:	d008      	beq.n	8003914 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003902:	7cfb      	ldrb	r3, [r7, #19]
 8003904:	2b29      	cmp	r3, #41	; 0x29
 8003906:	d005      	beq.n	8003914 <HAL_I2C_ER_IRQHandler+0xde>
 8003908:	7cfb      	ldrb	r3, [r7, #19]
 800390a:	2b28      	cmp	r3, #40	; 0x28
 800390c:	d106      	bne.n	800391c <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b21      	cmp	r3, #33	; 0x21
 8003912:	d103      	bne.n	800391c <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f001 f849 	bl	80049ac <I2C_Slave_AF>
 800391a:	e016      	b.n	800394a <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003924:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	f043 0304 	orr.w	r3, r3, #4
 800392c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800392e:	7efb      	ldrb	r3, [r7, #27]
 8003930:	2b10      	cmp	r3, #16
 8003932:	d002      	beq.n	800393a <HAL_I2C_ER_IRQHandler+0x104>
 8003934:	7efb      	ldrb	r3, [r7, #27]
 8003936:	2b40      	cmp	r3, #64	; 0x40
 8003938:	d107      	bne.n	800394a <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003948:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	0adb      	lsrs	r3, r3, #11
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00e      	beq.n	8003974 <HAL_I2C_ER_IRQHandler+0x13e>
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	0a1b      	lsrs	r3, r3, #8
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d008      	beq.n	8003974 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	f043 0308 	orr.w	r3, r3, #8
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003972:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f001 f880 	bl	8004a8c <I2C_ITError>
  }
}
 800398c:	bf00      	nop
 800398e:	3728      	adds	r7, #40	; 0x28
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr

080039dc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	70fb      	strb	r3, [r7, #3]
 80039e8:	4613      	mov	r3, r2
 80039ea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr

08003a1a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr

08003a2c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a42:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d150      	bne.n	8003af4 <I2C_MasterTransmit_TXE+0xc8>
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	2b21      	cmp	r3, #33	; 0x21
 8003a56:	d14d      	bne.n	8003af4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d01d      	beq.n	8003a9a <I2C_MasterTransmit_TXE+0x6e>
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d01a      	beq.n	8003a9a <I2C_MasterTransmit_TXE+0x6e>
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a6a:	d016      	beq.n	8003a9a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a7a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2211      	movs	r2, #17
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff ff7e 	bl	8003994 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a98:	e060      	b.n	8003b5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003aa8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b40      	cmp	r3, #64	; 0x40
 8003ad2:	d107      	bne.n	8003ae4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7fd fb6b 	bl	80011b8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ae2:	e03b      	b.n	8003b5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff ff51 	bl	8003994 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003af2:	e033      	b.n	8003b5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	2b21      	cmp	r3, #33	; 0x21
 8003af8:	d005      	beq.n	8003b06 <I2C_MasterTransmit_TXE+0xda>
 8003afa:	7bbb      	ldrb	r3, [r7, #14]
 8003afc:	2b40      	cmp	r3, #64	; 0x40
 8003afe:	d12d      	bne.n	8003b5c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	2b22      	cmp	r3, #34	; 0x22
 8003b04:	d12a      	bne.n	8003b5c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d108      	bne.n	8003b22 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003b20:	e01c      	b.n	8003b5c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d103      	bne.n	8003b36 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f88e 	bl	8003c50 <I2C_MemoryTransmit_TXE_BTF>
}
 8003b34:	e012      	b.n	8003b5c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	781a      	ldrb	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b5a:	e7ff      	b.n	8003b5c <I2C_MasterTransmit_TXE+0x130>
 8003b5c:	bf00      	nop
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b21      	cmp	r3, #33	; 0x21
 8003b7c:	d164      	bne.n	8003c48 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d012      	beq.n	8003bae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003bac:	e04c      	b.n	8003c48 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d01d      	beq.n	8003bf0 <I2C_MasterTransmit_BTF+0x8c>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d01a      	beq.n	8003bf0 <I2C_MasterTransmit_BTF+0x8c>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bc0:	d016      	beq.n	8003bf0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bd0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2211      	movs	r2, #17
 8003bd6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff fed3 	bl	8003994 <HAL_I2C_MasterTxCpltCallback>
}
 8003bee:	e02b      	b.n	8003c48 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bfe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b40      	cmp	r3, #64	; 0x40
 8003c28:	d107      	bne.n	8003c3a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fd fac0 	bl	80011b8 <HAL_I2C_MemTxCpltCallback>
}
 8003c38:	e006      	b.n	8003c48 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff fea6 	bl	8003994 <HAL_I2C_MasterTxCpltCallback>
}
 8003c48:	bf00      	nop
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d11d      	bne.n	8003ca4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d10b      	bne.n	8003c88 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c80:	1c9a      	adds	r2, r3, #2
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003c86:	e073      	b.n	8003d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	121b      	asrs	r3, r3, #8
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ca2:	e065      	b.n	8003d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d10b      	bne.n	8003cc4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cc2:	e055      	b.n	8003d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d151      	bne.n	8003d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	2b22      	cmp	r3, #34	; 0x22
 8003cd0:	d10d      	bne.n	8003cee <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ce0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cec:	e040      	b.n	8003d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d015      	beq.n	8003d24 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b21      	cmp	r3, #33	; 0x21
 8003cfc:	d112      	bne.n	8003d24 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	781a      	ldrb	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d22:	e025      	b.n	8003d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d120      	bne.n	8003d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	2b21      	cmp	r3, #33	; 0x21
 8003d32:	d11d      	bne.n	8003d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d42:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d52:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fd fa24 	bl	80011b8 <HAL_I2C_MemTxCpltCallback>
}
 8003d70:	bf00      	nop
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b22      	cmp	r3, #34	; 0x22
 8003d8a:	f040 80a2 	bne.w	8003ed2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d921      	bls.n	8003de0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	f040 8082 	bne.w	8003ed2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ddc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003dde:	e078      	b.n	8003ed2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d074      	beq.n	8003ed2 <I2C_MasterReceive_RXNE+0x15a>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d002      	beq.n	8003df4 <I2C_MasterReceive_RXNE+0x7c>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d16e      	bne.n	8003ed2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f001 fbc5 	bl	8005584 <I2C_WaitOnSTOPRequestThroughIT>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d142      	bne.n	8003e86 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e0e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e1e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b40      	cmp	r3, #64	; 0x40
 8003e58:	d10a      	bne.n	8003e70 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff fdcd 	bl	8003a08 <HAL_I2C_MemRxCpltCallback>
}
 8003e6e:	e030      	b.n	8003ed2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2212      	movs	r2, #18
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff fd91 	bl	80039a6 <HAL_I2C_MasterRxCpltCallback>
}
 8003e84:	e025      	b.n	8003ed2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e94:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7fd f981 	bl	80011d4 <HAL_I2C_ErrorCallback>
}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d11b      	bne.n	8003f2a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f00:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003f28:	e0bd      	b.n	80040a6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d129      	bne.n	8003f88 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f42:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d00a      	beq.n	8003f60 <I2C_MasterReceive_BTF+0x86>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d007      	beq.n	8003f60 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f5e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691a      	ldr	r2, [r3, #16]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f86:	e08e      	b.n	80040a6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d176      	bne.n	8004080 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d002      	beq.n	8003f9e <I2C_MasterReceive_BTF+0xc4>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b10      	cmp	r3, #16
 8003f9c:	d108      	bne.n	8003fb0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	e019      	b.n	8003fe4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d002      	beq.n	8003fbc <I2C_MasterReceive_BTF+0xe2>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d108      	bne.n	8003fce <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	e00a      	b.n	8003fe4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b10      	cmp	r3, #16
 8003fd2:	d007      	beq.n	8003fe4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800403e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b40      	cmp	r3, #64	; 0x40
 8004052:	d10a      	bne.n	800406a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fcd0 	bl	8003a08 <HAL_I2C_MemRxCpltCallback>
}
 8004068:	e01d      	b.n	80040a6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2212      	movs	r2, #18
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff fc94 	bl	80039a6 <HAL_I2C_MasterRxCpltCallback>
}
 800407e:	e012      	b.n	80040a6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040a6:	bf00      	nop
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b40      	cmp	r3, #64	; 0x40
 80040c0:	d117      	bne.n	80040f2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	461a      	mov	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040da:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80040dc:	e067      	b.n	80041ae <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	611a      	str	r2, [r3, #16]
}
 80040f0:	e05d      	b.n	80041ae <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040fa:	d133      	bne.n	8004164 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b21      	cmp	r3, #33	; 0x21
 8004106:	d109      	bne.n	800411c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410c:	b2db      	uxtb	r3, r3
 800410e:	461a      	mov	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004118:	611a      	str	r2, [r3, #16]
 800411a:	e008      	b.n	800412e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004120:	b2db      	uxtb	r3, r3
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	b2da      	uxtb	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004132:	2b00      	cmp	r3, #0
 8004134:	d004      	beq.n	8004140 <I2C_Master_SB+0x92>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	2b00      	cmp	r3, #0
 800413e:	d108      	bne.n	8004152 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	2b00      	cmp	r3, #0
 8004146:	d032      	beq.n	80041ae <I2C_Master_SB+0x100>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	2b00      	cmp	r3, #0
 8004150:	d02d      	beq.n	80041ae <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004160:	605a      	str	r2, [r3, #4]
}
 8004162:	e024      	b.n	80041ae <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10e      	bne.n	800418a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004170:	b29b      	uxth	r3, r3
 8004172:	11db      	asrs	r3, r3, #7
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f003 0306 	and.w	r3, r3, #6
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f063 030f 	orn	r3, r3, #15
 8004180:	b2da      	uxtb	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	611a      	str	r2, [r3, #16]
}
 8004188:	e011      	b.n	80041ae <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418e:	2b01      	cmp	r3, #1
 8004190:	d10d      	bne.n	80041ae <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	b29b      	uxth	r3, r3
 8004198:	11db      	asrs	r3, r3, #7
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f003 0306 	and.w	r3, r3, #6
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	f063 030e 	orn	r3, r3, #14
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	611a      	str	r2, [r3, #16]
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d004      	beq.n	80041de <I2C_Master_ADD10+0x26>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d108      	bne.n	80041f0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00c      	beq.n	8004200 <I2C_Master_ADD10+0x48>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d007      	beq.n	8004200 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041fe:	605a      	str	r2, [r3, #4]
  }
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr

0800420a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800420a:	b480      	push	{r7}
 800420c:	b091      	sub	sp, #68	; 0x44
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004218:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b22      	cmp	r3, #34	; 0x22
 8004232:	f040 8174 	bne.w	800451e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10f      	bne.n	800425e <I2C_Master_ADDR+0x54>
 800423e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004242:	2b40      	cmp	r3, #64	; 0x40
 8004244:	d10b      	bne.n	800425e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004246:	2300      	movs	r3, #0
 8004248:	633b      	str	r3, [r7, #48]	; 0x30
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	633b      	str	r3, [r7, #48]	; 0x30
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	633b      	str	r3, [r7, #48]	; 0x30
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	e16b      	b.n	8004536 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004262:	2b00      	cmp	r3, #0
 8004264:	d11d      	bne.n	80042a2 <I2C_Master_ADDR+0x98>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800426e:	d118      	bne.n	80042a2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004270:	2300      	movs	r3, #0
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004284:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004294:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	651a      	str	r2, [r3, #80]	; 0x50
 80042a0:	e149      	b.n	8004536 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d113      	bne.n	80042d4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ac:	2300      	movs	r3, #0
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e120      	b.n	8004516 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b01      	cmp	r3, #1
 80042dc:	f040 808a 	bne.w	80043f4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80042e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042e6:	d137      	bne.n	8004358 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004306:	d113      	bne.n	8004330 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004316:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004318:	2300      	movs	r3, #0
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	e0f2      	b.n	8004516 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004330:	2300      	movs	r3, #0
 8004332:	623b      	str	r3, [r7, #32]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	623b      	str	r3, [r7, #32]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	623b      	str	r3, [r7, #32]
 8004344:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	e0de      	b.n	8004516 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435a:	2b08      	cmp	r3, #8
 800435c:	d02e      	beq.n	80043bc <I2C_Master_ADDR+0x1b2>
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	2b20      	cmp	r3, #32
 8004362:	d02b      	beq.n	80043bc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004366:	2b12      	cmp	r3, #18
 8004368:	d102      	bne.n	8004370 <I2C_Master_ADDR+0x166>
 800436a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436c:	2b01      	cmp	r3, #1
 800436e:	d125      	bne.n	80043bc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004372:	2b04      	cmp	r3, #4
 8004374:	d00e      	beq.n	8004394 <I2C_Master_ADDR+0x18a>
 8004376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004378:	2b02      	cmp	r3, #2
 800437a:	d00b      	beq.n	8004394 <I2C_Master_ADDR+0x18a>
 800437c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437e:	2b10      	cmp	r3, #16
 8004380:	d008      	beq.n	8004394 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	e007      	b.n	80043a4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043a2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a4:	2300      	movs	r3, #0
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	e0ac      	b.n	8004516 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043cc:	2300      	movs	r3, #0
 80043ce:	61bb      	str	r3, [r7, #24]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	61bb      	str	r3, [r7, #24]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e090      	b.n	8004516 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d158      	bne.n	80044b0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80043fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004400:	2b04      	cmp	r3, #4
 8004402:	d021      	beq.n	8004448 <I2C_Master_ADDR+0x23e>
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	2b02      	cmp	r3, #2
 8004408:	d01e      	beq.n	8004448 <I2C_Master_ADDR+0x23e>
 800440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440c:	2b10      	cmp	r3, #16
 800440e:	d01b      	beq.n	8004448 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800441e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	e012      	b.n	800446e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004456:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800447c:	d14b      	bne.n	8004516 <I2C_Master_ADDR+0x30c>
 800447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004480:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004484:	d00b      	beq.n	800449e <I2C_Master_ADDR+0x294>
 8004486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004488:	2b01      	cmp	r3, #1
 800448a:	d008      	beq.n	800449e <I2C_Master_ADDR+0x294>
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	2b08      	cmp	r3, #8
 8004490:	d005      	beq.n	800449e <I2C_Master_ADDR+0x294>
 8004492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004494:	2b10      	cmp	r3, #16
 8004496:	d002      	beq.n	800449e <I2C_Master_ADDR+0x294>
 8004498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449a:	2b20      	cmp	r3, #32
 800449c:	d13b      	bne.n	8004516 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	e032      	b.n	8004516 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044be:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ce:	d117      	bne.n	8004500 <I2C_Master_ADDR+0x2f6>
 80044d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044d6:	d00b      	beq.n	80044f0 <I2C_Master_ADDR+0x2e6>
 80044d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d008      	beq.n	80044f0 <I2C_Master_ADDR+0x2e6>
 80044de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d005      	beq.n	80044f0 <I2C_Master_ADDR+0x2e6>
 80044e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e6:	2b10      	cmp	r3, #16
 80044e8:	d002      	beq.n	80044f0 <I2C_Master_ADDR+0x2e6>
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d107      	bne.n	8004500 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044fe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800451c:	e00b      	b.n	8004536 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451e:	2300      	movs	r3, #0
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	68bb      	ldr	r3, [r7, #8]
}
 8004534:	e7ff      	b.n	8004536 <I2C_Master_ADDR+0x32c>
 8004536:	bf00      	nop
 8004538:	3744      	adds	r7, #68	; 0x44
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr

08004540 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d02b      	beq.n	80045b2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	781a      	ldrb	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d114      	bne.n	80045b2 <I2C_SlaveTransmit_TXE+0x72>
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	2b29      	cmp	r3, #41	; 0x29
 800458c:	d111      	bne.n	80045b2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2221      	movs	r2, #33	; 0x21
 80045a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2228      	movs	r2, #40	; 0x28
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff fa03 	bl	80039b8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d011      	beq.n	80045f0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	781a      	ldrb	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bc80      	pop	{r7}
 80045f8:	4770      	bx	lr

080045fa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004608:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d02c      	beq.n	800466e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d114      	bne.n	800466e <I2C_SlaveReceive_RXNE+0x74>
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	2b2a      	cmp	r3, #42	; 0x2a
 8004648:	d111      	bne.n	800466e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004658:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2222      	movs	r2, #34	; 0x22
 800465e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2228      	movs	r2, #40	; 0x28
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7ff f9ae 	bl	80039ca <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800466e:	bf00      	nop
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d012      	beq.n	80046ae <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr

080046b8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046d2:	2b28      	cmp	r3, #40	; 0x28
 80046d4:	d127      	bne.n	8004726 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	089b      	lsrs	r3, r3, #2
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80046f2:	2301      	movs	r3, #1
 80046f4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	09db      	lsrs	r3, r3, #7
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d103      	bne.n	800470a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	81bb      	strh	r3, [r7, #12]
 8004708:	e002      	b.n	8004710 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004718:	89ba      	ldrh	r2, [r7, #12]
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	4619      	mov	r1, r3
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff f95c 	bl	80039dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004724:	e00e      	b.n	8004744 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004726:	2300      	movs	r3, #0
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004744:	bf00      	nop
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800476a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800476c:	2300      	movs	r3, #0
 800476e:	60bb      	str	r3, [r7, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004798:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a8:	d172      	bne.n	8004890 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	2b22      	cmp	r3, #34	; 0x22
 80047ae:	d002      	beq.n	80047b6 <I2C_Slave_STOPF+0x6a>
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	2b2a      	cmp	r3, #42	; 0x2a
 80047b4:	d135      	bne.n	8004822 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	b29a      	uxth	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d005      	beq.n	80047da <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f043 0204 	orr.w	r2, r3, #4
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fd feca 	bl	8002588 <HAL_DMA_GetState>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d049      	beq.n	800488e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	4a69      	ldr	r2, [pc, #420]	; (80049a4 <I2C_Slave_STOPF+0x258>)
 8004800:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	4618      	mov	r0, r3
 8004808:	f7fd fd42 	bl	8002290 <HAL_DMA_Abort_IT>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d03d      	beq.n	800488e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800481c:	4610      	mov	r0, r2
 800481e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004820:	e035      	b.n	800488e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	b29a      	uxth	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f043 0204 	orr.w	r2, r3, #4
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004854:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485a:	4618      	mov	r0, r3
 800485c:	f7fd fe94 	bl	8002588 <HAL_DMA_GetState>
 8004860:	4603      	mov	r3, r0
 8004862:	2b01      	cmp	r3, #1
 8004864:	d014      	beq.n	8004890 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486a:	4a4e      	ldr	r2, [pc, #312]	; (80049a4 <I2C_Slave_STOPF+0x258>)
 800486c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004872:	4618      	mov	r0, r3
 8004874:	f7fd fd0c 	bl	8002290 <HAL_DMA_Abort_IT>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d008      	beq.n	8004890 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004888:	4610      	mov	r0, r2
 800488a:	4798      	blx	r3
 800488c:	e000      	b.n	8004890 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800488e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d03e      	beq.n	8004918 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d112      	bne.n	80048ce <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691a      	ldr	r2, [r3, #16]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	1c5a      	adds	r2, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d112      	bne.n	8004902 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004906:	b29b      	uxth	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	f043 0204 	orr.w	r2, r3, #4
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f8b3 	bl	8004a8c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004926:	e039      	b.n	800499c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004928:	7bfb      	ldrb	r3, [r7, #15]
 800492a:	2b2a      	cmp	r3, #42	; 0x2a
 800492c:	d109      	bne.n	8004942 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2228      	movs	r2, #40	; 0x28
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff f844 	bl	80039ca <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b28      	cmp	r3, #40	; 0x28
 800494c:	d111      	bne.n	8004972 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a15      	ldr	r2, [pc, #84]	; (80049a8 <I2C_Slave_STOPF+0x25c>)
 8004952:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff f843 	bl	80039f6 <HAL_I2C_ListenCpltCallback>
}
 8004970:	e014      	b.n	800499c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	2b22      	cmp	r3, #34	; 0x22
 8004978:	d002      	beq.n	8004980 <I2C_Slave_STOPF+0x234>
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	2b22      	cmp	r3, #34	; 0x22
 800497e:	d10d      	bne.n	800499c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff f817 	bl	80039ca <HAL_I2C_SlaveRxCpltCallback>
}
 800499c:	bf00      	nop
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	08005205 	.word	0x08005205
 80049a8:	ffff0000 	.word	0xffff0000

080049ac <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ba:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d002      	beq.n	80049ce <I2C_Slave_AF+0x22>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	d129      	bne.n	8004a22 <I2C_Slave_AF+0x76>
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
 80049d0:	2b28      	cmp	r3, #40	; 0x28
 80049d2:	d126      	bne.n	8004a22 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a2c      	ldr	r2, [pc, #176]	; (8004a88 <I2C_Slave_AF+0xdc>)
 80049d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049e8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049f2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a02:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fe ffeb 	bl	80039f6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004a20:	e02e      	b.n	8004a80 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	2b21      	cmp	r3, #33	; 0x21
 8004a26:	d126      	bne.n	8004a76 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a17      	ldr	r2, [pc, #92]	; (8004a88 <I2C_Slave_AF+0xdc>)
 8004a2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2221      	movs	r2, #33	; 0x21
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a52:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a5c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a6c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fe ffa2 	bl	80039b8 <HAL_I2C_SlaveTxCpltCallback>
}
 8004a74:	e004      	b.n	8004a80 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a7e:	615a      	str	r2, [r3, #20]
}
 8004a80:	bf00      	nop
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	ffff0000 	.word	0xffff0000

08004a8c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aa2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004aa4:	7bbb      	ldrb	r3, [r7, #14]
 8004aa6:	2b10      	cmp	r3, #16
 8004aa8:	d002      	beq.n	8004ab0 <I2C_ITError+0x24>
 8004aaa:	7bbb      	ldrb	r3, [r7, #14]
 8004aac:	2b40      	cmp	r3, #64	; 0x40
 8004aae:	d10a      	bne.n	8004ac6 <I2C_ITError+0x3a>
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b22      	cmp	r3, #34	; 0x22
 8004ab4:	d107      	bne.n	8004ac6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ac4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004acc:	2b28      	cmp	r3, #40	; 0x28
 8004ace:	d107      	bne.n	8004ae0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2228      	movs	r2, #40	; 0x28
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ade:	e015      	b.n	8004b0c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aee:	d00a      	beq.n	8004b06 <I2C_ITError+0x7a>
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	2b60      	cmp	r3, #96	; 0x60
 8004af4:	d007      	beq.n	8004b06 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b1a:	d161      	bne.n	8004be0 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b2a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d020      	beq.n	8004b7a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3c:	4a6a      	ldr	r2, [pc, #424]	; (8004ce8 <I2C_ITError+0x25c>)
 8004b3e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fd fba3 	bl	8002290 <HAL_DMA_Abort_IT>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 8089 	beq.w	8004c64 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0201 	bic.w	r2, r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b74:	4610      	mov	r0, r2
 8004b76:	4798      	blx	r3
 8004b78:	e074      	b.n	8004c64 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	4a5a      	ldr	r2, [pc, #360]	; (8004ce8 <I2C_ITError+0x25c>)
 8004b80:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fd fb82 	bl	8002290 <HAL_DMA_Abort_IT>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d068      	beq.n	8004c64 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9c:	2b40      	cmp	r3, #64	; 0x40
 8004b9e:	d10b      	bne.n	8004bb8 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0201 	bic.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bda:	4610      	mov	r0, r2
 8004bdc:	4798      	blx	r3
 8004bde:	e041      	b.n	8004c64 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b60      	cmp	r3, #96	; 0x60
 8004bea:	d125      	bne.n	8004c38 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c04:	2b40      	cmp	r3, #64	; 0x40
 8004c06:	d10b      	bne.n	8004c20 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691a      	ldr	r2, [r3, #16]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7fe fef2 	bl	8003a1a <HAL_I2C_AbortCpltCallback>
 8004c36:	e015      	b.n	8004c64 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c42:	2b40      	cmp	r3, #64	; 0x40
 8004c44:	d10b      	bne.n	8004c5e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	b2d2      	uxtb	r2, r2
 8004c52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fc fab8 	bl	80011d4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10e      	bne.n	8004c92 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d104      	bne.n	8004c92 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ca0:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d113      	bne.n	8004cde <I2C_ITError+0x252>
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	2b28      	cmp	r3, #40	; 0x28
 8004cba:	d110      	bne.n	8004cde <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a0b      	ldr	r2, [pc, #44]	; (8004cec <I2C_ITError+0x260>)
 8004cc0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7fe fe8c 	bl	80039f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	08005205 	.word	0x08005205
 8004cec:	ffff0000 	.word	0xffff0000

08004cf0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	4608      	mov	r0, r1
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4603      	mov	r3, r0
 8004d00:	817b      	strh	r3, [r7, #10]
 8004d02:	460b      	mov	r3, r1
 8004d04:	813b      	strh	r3, [r7, #8]
 8004d06:	4613      	mov	r3, r2
 8004d08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 fb14 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00d      	beq.n	8004d4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d40:	d103      	bne.n	8004d4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e05f      	b.n	8004e0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d4e:	897b      	ldrh	r3, [r7, #10]
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	6a3a      	ldr	r2, [r7, #32]
 8004d62:	492d      	ldr	r1, [pc, #180]	; (8004e18 <I2C_RequestMemoryWrite+0x128>)
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 fb4c 	bl	8005402 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e04c      	b.n	8004e0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d8c:	6a39      	ldr	r1, [r7, #32]
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 fbb6 	bl	8005500 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00d      	beq.n	8004db6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d107      	bne.n	8004db2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e02b      	b.n	8004e0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d105      	bne.n	8004dc8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dbc:	893b      	ldrh	r3, [r7, #8]
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	611a      	str	r2, [r3, #16]
 8004dc6:	e021      	b.n	8004e0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004dc8:	893b      	ldrh	r3, [r7, #8]
 8004dca:	0a1b      	lsrs	r3, r3, #8
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd8:	6a39      	ldr	r1, [r7, #32]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fb90 	bl	8005500 <I2C_WaitOnTXEFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00d      	beq.n	8004e02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d107      	bne.n	8004dfe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e005      	b.n	8004e0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e02:	893b      	ldrh	r3, [r7, #8]
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	00010002 	.word	0x00010002

08004e1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	4608      	mov	r0, r1
 8004e26:	4611      	mov	r1, r2
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	817b      	strh	r3, [r7, #10]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	813b      	strh	r3, [r7, #8]
 8004e32:	4613      	mov	r3, r2
 8004e34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fa76 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00d      	beq.n	8004e8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e7c:	d103      	bne.n	8004e86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e0aa      	b.n	8004fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e8a:	897b      	ldrh	r3, [r7, #10]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	461a      	mov	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	6a3a      	ldr	r2, [r7, #32]
 8004e9e:	4952      	ldr	r1, [pc, #328]	; (8004fe8 <I2C_RequestMemoryRead+0x1cc>)
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 faae 	bl	8005402 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e097      	b.n	8004fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec8:	6a39      	ldr	r1, [r7, #32]
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 fb18 	bl	8005500 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00d      	beq.n	8004ef2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d107      	bne.n	8004eee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e076      	b.n	8004fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ef2:	88fb      	ldrh	r3, [r7, #6]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d105      	bne.n	8004f04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ef8:	893b      	ldrh	r3, [r7, #8]
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	611a      	str	r2, [r3, #16]
 8004f02:	e021      	b.n	8004f48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f04:	893b      	ldrh	r3, [r7, #8]
 8004f06:	0a1b      	lsrs	r3, r3, #8
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f14:	6a39      	ldr	r1, [r7, #32]
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 faf2 	bl	8005500 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00d      	beq.n	8004f3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d107      	bne.n	8004f3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e050      	b.n	8004fe0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f3e:	893b      	ldrh	r3, [r7, #8]
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4a:	6a39      	ldr	r1, [r7, #32]
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 fad7 	bl	8005500 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00d      	beq.n	8004f74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d107      	bne.n	8004f70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e035      	b.n	8004fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 f9df 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00d      	beq.n	8004fb8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004faa:	d103      	bne.n	8004fb4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e013      	b.n	8004fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004fb8:	897b      	ldrh	r3, [r7, #10]
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	f043 0301 	orr.w	r3, r3, #1
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	6a3a      	ldr	r2, [r7, #32]
 8004fcc:	4906      	ldr	r1, [pc, #24]	; (8004fe8 <I2C_RequestMemoryRead+0x1cc>)
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fa17 	bl	8005402 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	00010002 	.word	0x00010002

08004fec <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005000:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005008:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800501e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502c:	2200      	movs	r2, #0
 800502e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	2200      	movs	r2, #0
 800503e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005040:	7cfb      	ldrb	r3, [r7, #19]
 8005042:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005046:	2b21      	cmp	r3, #33	; 0x21
 8005048:	d007      	beq.n	800505a <I2C_DMAXferCplt+0x6e>
 800504a:	7cfb      	ldrb	r3, [r7, #19]
 800504c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005050:	2b22      	cmp	r3, #34	; 0x22
 8005052:	d131      	bne.n	80050b8 <I2C_DMAXferCplt+0xcc>
 8005054:	7cbb      	ldrb	r3, [r7, #18]
 8005056:	2b20      	cmp	r3, #32
 8005058:	d12e      	bne.n	80050b8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005068:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2200      	movs	r2, #0
 800506e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005070:	7cfb      	ldrb	r3, [r7, #19]
 8005072:	2b29      	cmp	r3, #41	; 0x29
 8005074:	d10a      	bne.n	800508c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2221      	movs	r2, #33	; 0x21
 800507a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2228      	movs	r2, #40	; 0x28
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005084:	6978      	ldr	r0, [r7, #20]
 8005086:	f7fe fc97 	bl	80039b8 <HAL_I2C_SlaveTxCpltCallback>
 800508a:	e00c      	b.n	80050a6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800508c:	7cfb      	ldrb	r3, [r7, #19]
 800508e:	2b2a      	cmp	r3, #42	; 0x2a
 8005090:	d109      	bne.n	80050a6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2222      	movs	r2, #34	; 0x22
 8005096:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	2228      	movs	r2, #40	; 0x28
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050a0:	6978      	ldr	r0, [r7, #20]
 80050a2:	f7fe fc92 	bl	80039ca <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80050b4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80050b6:	e06a      	b.n	800518e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d064      	beq.n	800518e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d107      	bne.n	80050de <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050dc:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80050ec:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050f4:	d009      	beq.n	800510a <I2C_DMAXferCplt+0x11e>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d006      	beq.n	800510a <I2C_DMAXferCplt+0x11e>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005102:	d002      	beq.n	800510a <I2C_DMAXferCplt+0x11e>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b20      	cmp	r3, #32
 8005108:	d107      	bne.n	800511a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005118:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005128:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005138:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2200      	movs	r2, #0
 800513e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005148:	6978      	ldr	r0, [r7, #20]
 800514a:	f7fc f843 	bl	80011d4 <HAL_I2C_ErrorCallback>
}
 800514e:	e01e      	b.n	800518e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b40      	cmp	r3, #64	; 0x40
 8005162:	d10a      	bne.n	800517a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2200      	movs	r2, #0
 8005170:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005172:	6978      	ldr	r0, [r7, #20]
 8005174:	f7fe fc48 	bl	8003a08 <HAL_I2C_MemRxCpltCallback>
}
 8005178:	e009      	b.n	800518e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2212      	movs	r2, #18
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005188:	6978      	ldr	r0, [r7, #20]
 800518a:	f7fe fc0c 	bl	80039a6 <HAL_I2C_MasterRxCpltCallback>
}
 800518e:	bf00      	nop
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b0:	2200      	movs	r2, #0
 80051b2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	2200      	movs	r2, #0
 80051c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d2:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f043 0210 	orr.w	r2, r3, #16
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f7fb ffec 	bl	80011d4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80051fc:	bf00      	nop
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800521e:	4b4b      	ldr	r3, [pc, #300]	; (800534c <I2C_DMAAbort+0x148>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	08db      	lsrs	r3, r3, #3
 8005224:	4a4a      	ldr	r2, [pc, #296]	; (8005350 <I2C_DMAAbort+0x14c>)
 8005226:	fba2 2303 	umull	r2, r3, r2, r3
 800522a:	0a1a      	lsrs	r2, r3, #8
 800522c:	4613      	mov	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	00da      	lsls	r2, r3, #3
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f043 0220 	orr.w	r2, r3, #32
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800524a:	e00a      	b.n	8005262 <I2C_DMAAbort+0x5e>
    }
    count--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	3b01      	subs	r3, #1
 8005250:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800525c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005260:	d0ea      	beq.n	8005238 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526e:	2200      	movs	r2, #0
 8005270:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	2200      	movs	r2, #0
 8005280:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005290:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2200      	movs	r2, #0
 8005296:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a4:	2200      	movs	r2, #0
 80052a6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	2200      	movs	r2, #0
 80052b6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0201 	bic.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b60      	cmp	r3, #96	; 0x60
 80052d2:	d10e      	bne.n	80052f2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2200      	movs	r2, #0
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052ea:	6978      	ldr	r0, [r7, #20]
 80052ec:	f7fe fb95 	bl	8003a1a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052f0:	e027      	b.n	8005342 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052f2:	7cfb      	ldrb	r3, [r7, #19]
 80052f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052f8:	2b28      	cmp	r3, #40	; 0x28
 80052fa:	d117      	bne.n	800532c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800531a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2200      	movs	r2, #0
 8005320:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2228      	movs	r2, #40	; 0x28
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800532a:	e007      	b.n	800533c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800533c:	6978      	ldr	r0, [r7, #20]
 800533e:	f7fb ff49 	bl	80011d4 <HAL_I2C_ErrorCallback>
}
 8005342:	bf00      	nop
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20000000 	.word	0x20000000
 8005350:	14f8b589 	.word	0x14f8b589

08005354 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	4613      	mov	r3, r2
 8005362:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005364:	e025      	b.n	80053b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536c:	d021      	beq.n	80053b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536e:	f7fc fd83 	bl	8001e78 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d302      	bcc.n	8005384 <I2C_WaitOnFlagUntilTimeout+0x30>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d116      	bne.n	80053b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2220      	movs	r2, #32
 800538e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f043 0220 	orr.w	r2, r3, #32
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e023      	b.n	80053fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	0c1b      	lsrs	r3, r3, #16
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d10d      	bne.n	80053d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	43da      	mvns	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4013      	ands	r3, r2
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	bf0c      	ite	eq
 80053ce:	2301      	moveq	r3, #1
 80053d0:	2300      	movne	r3, #0
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	461a      	mov	r2, r3
 80053d6:	e00c      	b.n	80053f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	43da      	mvns	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4013      	ands	r3, r2
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	bf0c      	ite	eq
 80053ea:	2301      	moveq	r3, #1
 80053ec:	2300      	movne	r3, #0
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d0b6      	beq.n	8005366 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	607a      	str	r2, [r7, #4]
 800540e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005410:	e051      	b.n	80054b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800541c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005420:	d123      	bne.n	800546a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005430:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800543a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2220      	movs	r2, #32
 8005446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	f043 0204 	orr.w	r2, r3, #4
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e046      	b.n	80054f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005470:	d021      	beq.n	80054b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005472:	f7fc fd01 	bl	8001e78 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	429a      	cmp	r2, r3
 8005480:	d302      	bcc.n	8005488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d116      	bne.n	80054b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2220      	movs	r2, #32
 8005492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	f043 0220 	orr.w	r2, r3, #32
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e020      	b.n	80054f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	0c1b      	lsrs	r3, r3, #16
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d10c      	bne.n	80054da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	43da      	mvns	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4013      	ands	r3, r2
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	bf14      	ite	ne
 80054d2:	2301      	movne	r3, #1
 80054d4:	2300      	moveq	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	e00b      	b.n	80054f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	43da      	mvns	r2, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4013      	ands	r3, r2
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bf14      	ite	ne
 80054ec:	2301      	movne	r3, #1
 80054ee:	2300      	moveq	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d18d      	bne.n	8005412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800550c:	e02d      	b.n	800556a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 f8c0 	bl	8005694 <I2C_IsAcknowledgeFailed>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e02d      	b.n	800557a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005524:	d021      	beq.n	800556a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005526:	f7fc fca7 	bl	8001e78 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	429a      	cmp	r2, r3
 8005534:	d302      	bcc.n	800553c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d116      	bne.n	800556a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2220      	movs	r2, #32
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	f043 0220 	orr.w	r2, r3, #32
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e007      	b.n	800557a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005574:	2b80      	cmp	r3, #128	; 0x80
 8005576:	d1ca      	bne.n	800550e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005590:	4b13      	ldr	r3, [pc, #76]	; (80055e0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	08db      	lsrs	r3, r3, #3
 8005596:	4a13      	ldr	r2, [pc, #76]	; (80055e4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005598:	fba2 2303 	umull	r2, r3, r2, r3
 800559c:	0a1a      	lsrs	r2, r3, #8
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d107      	bne.n	80055c2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f043 0220 	orr.w	r2, r3, #32
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e008      	b.n	80055d4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d0:	d0e9      	beq.n	80055a6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	bc80      	pop	{r7}
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	20000000 	.word	0x20000000
 80055e4:	14f8b589 	.word	0x14f8b589

080055e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055f4:	e042      	b.n	800567c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	f003 0310 	and.w	r3, r3, #16
 8005600:	2b10      	cmp	r3, #16
 8005602:	d119      	bne.n	8005638 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0210 	mvn.w	r2, #16
 800560c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e029      	b.n	800568c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005638:	f7fc fc1e 	bl	8001e78 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	429a      	cmp	r2, r3
 8005646:	d302      	bcc.n	800564e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d116      	bne.n	800567c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	f043 0220 	orr.w	r2, r3, #32
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e007      	b.n	800568c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005686:	2b40      	cmp	r3, #64	; 0x40
 8005688:	d1b5      	bne.n	80055f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056aa:	d11b      	bne.n	80056e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	f043 0204 	orr.w	r2, r3, #4
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr

080056f0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005700:	d103      	bne.n	800570a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005708:	e007      	b.n	800571a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005712:	d102      	bne.n	800571a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2208      	movs	r2, #8
 8005718:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr

08005724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e272      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 8087 	beq.w	8005852 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005744:	4b92      	ldr	r3, [pc, #584]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f003 030c 	and.w	r3, r3, #12
 800574c:	2b04      	cmp	r3, #4
 800574e:	d00c      	beq.n	800576a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005750:	4b8f      	ldr	r3, [pc, #572]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f003 030c 	and.w	r3, r3, #12
 8005758:	2b08      	cmp	r3, #8
 800575a:	d112      	bne.n	8005782 <HAL_RCC_OscConfig+0x5e>
 800575c:	4b8c      	ldr	r3, [pc, #560]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005768:	d10b      	bne.n	8005782 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800576a:	4b89      	ldr	r3, [pc, #548]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d06c      	beq.n	8005850 <HAL_RCC_OscConfig+0x12c>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d168      	bne.n	8005850 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e24c      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800578a:	d106      	bne.n	800579a <HAL_RCC_OscConfig+0x76>
 800578c:	4b80      	ldr	r3, [pc, #512]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a7f      	ldr	r2, [pc, #508]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 8005792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	e02e      	b.n	80057f8 <HAL_RCC_OscConfig+0xd4>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10c      	bne.n	80057bc <HAL_RCC_OscConfig+0x98>
 80057a2:	4b7b      	ldr	r3, [pc, #492]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a7a      	ldr	r2, [pc, #488]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	4b78      	ldr	r3, [pc, #480]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a77      	ldr	r2, [pc, #476]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	e01d      	b.n	80057f8 <HAL_RCC_OscConfig+0xd4>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057c4:	d10c      	bne.n	80057e0 <HAL_RCC_OscConfig+0xbc>
 80057c6:	4b72      	ldr	r3, [pc, #456]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a71      	ldr	r2, [pc, #452]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	4b6f      	ldr	r3, [pc, #444]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a6e      	ldr	r2, [pc, #440]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	e00b      	b.n	80057f8 <HAL_RCC_OscConfig+0xd4>
 80057e0:	4b6b      	ldr	r3, [pc, #428]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a6a      	ldr	r2, [pc, #424]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	4b68      	ldr	r3, [pc, #416]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a67      	ldr	r2, [pc, #412]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d013      	beq.n	8005828 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005800:	f7fc fb3a 	bl	8001e78 <HAL_GetTick>
 8005804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005808:	f7fc fb36 	bl	8001e78 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b64      	cmp	r3, #100	; 0x64
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e200      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800581a:	4b5d      	ldr	r3, [pc, #372]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0f0      	beq.n	8005808 <HAL_RCC_OscConfig+0xe4>
 8005826:	e014      	b.n	8005852 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005828:	f7fc fb26 	bl	8001e78 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005830:	f7fc fb22 	bl	8001e78 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b64      	cmp	r3, #100	; 0x64
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e1ec      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005842:	4b53      	ldr	r3, [pc, #332]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1f0      	bne.n	8005830 <HAL_RCC_OscConfig+0x10c>
 800584e:	e000      	b.n	8005852 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d063      	beq.n	8005926 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800585e:	4b4c      	ldr	r3, [pc, #304]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f003 030c 	and.w	r3, r3, #12
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00b      	beq.n	8005882 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800586a:	4b49      	ldr	r3, [pc, #292]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f003 030c 	and.w	r3, r3, #12
 8005872:	2b08      	cmp	r3, #8
 8005874:	d11c      	bne.n	80058b0 <HAL_RCC_OscConfig+0x18c>
 8005876:	4b46      	ldr	r3, [pc, #280]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d116      	bne.n	80058b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005882:	4b43      	ldr	r3, [pc, #268]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d005      	beq.n	800589a <HAL_RCC_OscConfig+0x176>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d001      	beq.n	800589a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e1c0      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800589a:	4b3d      	ldr	r3, [pc, #244]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	4939      	ldr	r1, [pc, #228]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ae:	e03a      	b.n	8005926 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d020      	beq.n	80058fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058b8:	4b36      	ldr	r3, [pc, #216]	; (8005994 <HAL_RCC_OscConfig+0x270>)
 80058ba:	2201      	movs	r2, #1
 80058bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058be:	f7fc fadb 	bl	8001e78 <HAL_GetTick>
 80058c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058c4:	e008      	b.n	80058d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058c6:	f7fc fad7 	bl	8001e78 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e1a1      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058d8:	4b2d      	ldr	r3, [pc, #180]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0f0      	beq.n	80058c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e4:	4b2a      	ldr	r3, [pc, #168]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	4927      	ldr	r1, [pc, #156]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	600b      	str	r3, [r1, #0]
 80058f8:	e015      	b.n	8005926 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058fa:	4b26      	ldr	r3, [pc, #152]	; (8005994 <HAL_RCC_OscConfig+0x270>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005900:	f7fc faba 	bl	8001e78 <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005908:	f7fc fab6 	bl	8001e78 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e180      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800591a:	4b1d      	ldr	r3, [pc, #116]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1f0      	bne.n	8005908 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	2b00      	cmp	r3, #0
 8005930:	d03a      	beq.n	80059a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d019      	beq.n	800596e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800593a:	4b17      	ldr	r3, [pc, #92]	; (8005998 <HAL_RCC_OscConfig+0x274>)
 800593c:	2201      	movs	r2, #1
 800593e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005940:	f7fc fa9a 	bl	8001e78 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005948:	f7fc fa96 	bl	8001e78 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e160      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800595a:	4b0d      	ldr	r3, [pc, #52]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0f0      	beq.n	8005948 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005966:	2001      	movs	r0, #1
 8005968:	f000 fad8 	bl	8005f1c <RCC_Delay>
 800596c:	e01c      	b.n	80059a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800596e:	4b0a      	ldr	r3, [pc, #40]	; (8005998 <HAL_RCC_OscConfig+0x274>)
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005974:	f7fc fa80 	bl	8001e78 <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800597a:	e00f      	b.n	800599c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800597c:	f7fc fa7c 	bl	8001e78 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d908      	bls.n	800599c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e146      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
 800598e:	bf00      	nop
 8005990:	40021000 	.word	0x40021000
 8005994:	42420000 	.word	0x42420000
 8005998:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800599c:	4b92      	ldr	r3, [pc, #584]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e9      	bne.n	800597c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 80a6 	beq.w	8005b02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059b6:	2300      	movs	r3, #0
 80059b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ba:	4b8b      	ldr	r3, [pc, #556]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10d      	bne.n	80059e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059c6:	4b88      	ldr	r3, [pc, #544]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	4a87      	ldr	r2, [pc, #540]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 80059cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d0:	61d3      	str	r3, [r2, #28]
 80059d2:	4b85      	ldr	r3, [pc, #532]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059da:	60bb      	str	r3, [r7, #8]
 80059dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059de:	2301      	movs	r3, #1
 80059e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e2:	4b82      	ldr	r3, [pc, #520]	; (8005bec <HAL_RCC_OscConfig+0x4c8>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d118      	bne.n	8005a20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059ee:	4b7f      	ldr	r3, [pc, #508]	; (8005bec <HAL_RCC_OscConfig+0x4c8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a7e      	ldr	r2, [pc, #504]	; (8005bec <HAL_RCC_OscConfig+0x4c8>)
 80059f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059fa:	f7fc fa3d 	bl	8001e78 <HAL_GetTick>
 80059fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a00:	e008      	b.n	8005a14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a02:	f7fc fa39 	bl	8001e78 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b64      	cmp	r3, #100	; 0x64
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e103      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a14:	4b75      	ldr	r3, [pc, #468]	; (8005bec <HAL_RCC_OscConfig+0x4c8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0f0      	beq.n	8005a02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d106      	bne.n	8005a36 <HAL_RCC_OscConfig+0x312>
 8005a28:	4b6f      	ldr	r3, [pc, #444]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	4a6e      	ldr	r2, [pc, #440]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a2e:	f043 0301 	orr.w	r3, r3, #1
 8005a32:	6213      	str	r3, [r2, #32]
 8005a34:	e02d      	b.n	8005a92 <HAL_RCC_OscConfig+0x36e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10c      	bne.n	8005a58 <HAL_RCC_OscConfig+0x334>
 8005a3e:	4b6a      	ldr	r3, [pc, #424]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	4a69      	ldr	r2, [pc, #420]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a44:	f023 0301 	bic.w	r3, r3, #1
 8005a48:	6213      	str	r3, [r2, #32]
 8005a4a:	4b67      	ldr	r3, [pc, #412]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	4a66      	ldr	r2, [pc, #408]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a50:	f023 0304 	bic.w	r3, r3, #4
 8005a54:	6213      	str	r3, [r2, #32]
 8005a56:	e01c      	b.n	8005a92 <HAL_RCC_OscConfig+0x36e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	2b05      	cmp	r3, #5
 8005a5e:	d10c      	bne.n	8005a7a <HAL_RCC_OscConfig+0x356>
 8005a60:	4b61      	ldr	r3, [pc, #388]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	4a60      	ldr	r2, [pc, #384]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a66:	f043 0304 	orr.w	r3, r3, #4
 8005a6a:	6213      	str	r3, [r2, #32]
 8005a6c:	4b5e      	ldr	r3, [pc, #376]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	4a5d      	ldr	r2, [pc, #372]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a72:	f043 0301 	orr.w	r3, r3, #1
 8005a76:	6213      	str	r3, [r2, #32]
 8005a78:	e00b      	b.n	8005a92 <HAL_RCC_OscConfig+0x36e>
 8005a7a:	4b5b      	ldr	r3, [pc, #364]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	4a5a      	ldr	r2, [pc, #360]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a80:	f023 0301 	bic.w	r3, r3, #1
 8005a84:	6213      	str	r3, [r2, #32]
 8005a86:	4b58      	ldr	r3, [pc, #352]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	4a57      	ldr	r2, [pc, #348]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a8c:	f023 0304 	bic.w	r3, r3, #4
 8005a90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d015      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a9a:	f7fc f9ed 	bl	8001e78 <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aa0:	e00a      	b.n	8005ab8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa2:	f7fc f9e9 	bl	8001e78 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e0b1      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab8:	4b4b      	ldr	r3, [pc, #300]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0ee      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x37e>
 8005ac4:	e014      	b.n	8005af0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ac6:	f7fc f9d7 	bl	8001e78 <HAL_GetTick>
 8005aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005acc:	e00a      	b.n	8005ae4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ace:	f7fc f9d3 	bl	8001e78 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e09b      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ae4:	4b40      	ldr	r3, [pc, #256]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1ee      	bne.n	8005ace <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d105      	bne.n	8005b02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005af6:	4b3c      	ldr	r3, [pc, #240]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	4a3b      	ldr	r2, [pc, #236]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 8087 	beq.w	8005c1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b0c:	4b36      	ldr	r3, [pc, #216]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f003 030c 	and.w	r3, r3, #12
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d061      	beq.n	8005bdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d146      	bne.n	8005bae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b20:	4b33      	ldr	r3, [pc, #204]	; (8005bf0 <HAL_RCC_OscConfig+0x4cc>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b26:	f7fc f9a7 	bl	8001e78 <HAL_GetTick>
 8005b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b2e:	f7fc f9a3 	bl	8001e78 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e06d      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b40:	4b29      	ldr	r3, [pc, #164]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1f0      	bne.n	8005b2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b54:	d108      	bne.n	8005b68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b56:	4b24      	ldr	r3, [pc, #144]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	4921      	ldr	r1, [pc, #132]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b68:	4b1f      	ldr	r3, [pc, #124]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a19      	ldr	r1, [r3, #32]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	491b      	ldr	r1, [pc, #108]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b80:	4b1b      	ldr	r3, [pc, #108]	; (8005bf0 <HAL_RCC_OscConfig+0x4cc>)
 8005b82:	2201      	movs	r2, #1
 8005b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b86:	f7fc f977 	bl	8001e78 <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b8e:	f7fc f973 	bl	8001e78 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e03d      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ba0:	4b11      	ldr	r3, [pc, #68]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0f0      	beq.n	8005b8e <HAL_RCC_OscConfig+0x46a>
 8005bac:	e035      	b.n	8005c1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bae:	4b10      	ldr	r3, [pc, #64]	; (8005bf0 <HAL_RCC_OscConfig+0x4cc>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb4:	f7fc f960 	bl	8001e78 <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bbc:	f7fc f95c 	bl	8001e78 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e026      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bce:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1f0      	bne.n	8005bbc <HAL_RCC_OscConfig+0x498>
 8005bda:	e01e      	b.n	8005c1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d107      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e019      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
 8005be8:	40021000 	.word	0x40021000
 8005bec:	40007000 	.word	0x40007000
 8005bf0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005bf4:	4b0b      	ldr	r3, [pc, #44]	; (8005c24 <HAL_RCC_OscConfig+0x500>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d106      	bne.n	8005c16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d001      	beq.n	8005c1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e000      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	40021000 	.word	0x40021000

08005c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0d0      	b.n	8005dde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c3c:	4b6a      	ldr	r3, [pc, #424]	; (8005de8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d910      	bls.n	8005c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4a:	4b67      	ldr	r3, [pc, #412]	; (8005de8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f023 0207 	bic.w	r2, r3, #7
 8005c52:	4965      	ldr	r1, [pc, #404]	; (8005de8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5a:	4b63      	ldr	r3, [pc, #396]	; (8005de8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d001      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e0b8      	b.n	8005dde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d020      	beq.n	8005cba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c84:	4b59      	ldr	r3, [pc, #356]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	4a58      	ldr	r2, [pc, #352]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005c8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c9c:	4b53      	ldr	r3, [pc, #332]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	4a52      	ldr	r2, [pc, #328]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005ca2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005ca6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ca8:	4b50      	ldr	r3, [pc, #320]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	494d      	ldr	r1, [pc, #308]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d040      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d107      	bne.n	8005cde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cce:	4b47      	ldr	r3, [pc, #284]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d115      	bne.n	8005d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e07f      	b.n	8005dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d107      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce6:	4b41      	ldr	r3, [pc, #260]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d109      	bne.n	8005d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e073      	b.n	8005dde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf6:	4b3d      	ldr	r3, [pc, #244]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e06b      	b.n	8005dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d06:	4b39      	ldr	r3, [pc, #228]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f023 0203 	bic.w	r2, r3, #3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	4936      	ldr	r1, [pc, #216]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d18:	f7fc f8ae 	bl	8001e78 <HAL_GetTick>
 8005d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d1e:	e00a      	b.n	8005d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d20:	f7fc f8aa 	bl	8001e78 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e053      	b.n	8005dde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d36:	4b2d      	ldr	r3, [pc, #180]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f003 020c 	and.w	r2, r3, #12
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d1eb      	bne.n	8005d20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d48:	4b27      	ldr	r3, [pc, #156]	; (8005de8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d210      	bcs.n	8005d78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d56:	4b24      	ldr	r3, [pc, #144]	; (8005de8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f023 0207 	bic.w	r2, r3, #7
 8005d5e:	4922      	ldr	r1, [pc, #136]	; (8005de8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d66:	4b20      	ldr	r3, [pc, #128]	; (8005de8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0307 	and.w	r3, r3, #7
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d001      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e032      	b.n	8005dde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d008      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d84:	4b19      	ldr	r3, [pc, #100]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	4916      	ldr	r1, [pc, #88]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0308 	and.w	r3, r3, #8
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005da2:	4b12      	ldr	r3, [pc, #72]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	490e      	ldr	r1, [pc, #56]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005db6:	f000 f821 	bl	8005dfc <HAL_RCC_GetSysClockFreq>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	091b      	lsrs	r3, r3, #4
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	490a      	ldr	r1, [pc, #40]	; (8005df0 <HAL_RCC_ClockConfig+0x1c8>)
 8005dc8:	5ccb      	ldrb	r3, [r1, r3]
 8005dca:	fa22 f303 	lsr.w	r3, r2, r3
 8005dce:	4a09      	ldr	r2, [pc, #36]	; (8005df4 <HAL_RCC_ClockConfig+0x1cc>)
 8005dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005dd2:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <HAL_RCC_ClockConfig+0x1d0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fc f80c 	bl	8001df4 <HAL_InitTick>

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	40022000 	.word	0x40022000
 8005dec:	40021000 	.word	0x40021000
 8005df0:	0800ef90 	.word	0x0800ef90
 8005df4:	20000000 	.word	0x20000000
 8005df8:	20000004 	.word	0x20000004

08005dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dfc:	b490      	push	{r4, r7}
 8005dfe:	b08a      	sub	sp, #40	; 0x28
 8005e00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005e02:	4b29      	ldr	r3, [pc, #164]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0xac>)
 8005e04:	1d3c      	adds	r4, r7, #4
 8005e06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005e0c:	f240 2301 	movw	r3, #513	; 0x201
 8005e10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61fb      	str	r3, [r7, #28]
 8005e16:	2300      	movs	r3, #0
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1e:	2300      	movs	r3, #0
 8005e20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e26:	4b21      	ldr	r3, [pc, #132]	; (8005eac <HAL_RCC_GetSysClockFreq+0xb0>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f003 030c 	and.w	r3, r3, #12
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d002      	beq.n	8005e3c <HAL_RCC_GetSysClockFreq+0x40>
 8005e36:	2b08      	cmp	r3, #8
 8005e38:	d003      	beq.n	8005e42 <HAL_RCC_GetSysClockFreq+0x46>
 8005e3a:	e02b      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e3c:	4b1c      	ldr	r3, [pc, #112]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e3e:	623b      	str	r3, [r7, #32]
      break;
 8005e40:	e02b      	b.n	8005e9a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	0c9b      	lsrs	r3, r3, #18
 8005e46:	f003 030f 	and.w	r3, r3, #15
 8005e4a:	3328      	adds	r3, #40	; 0x28
 8005e4c:	443b      	add	r3, r7
 8005e4e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005e52:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d012      	beq.n	8005e84 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e5e:	4b13      	ldr	r3, [pc, #76]	; (8005eac <HAL_RCC_GetSysClockFreq+0xb0>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	0c5b      	lsrs	r3, r3, #17
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	3328      	adds	r3, #40	; 0x28
 8005e6a:	443b      	add	r3, r7
 8005e6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005e70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	4a0e      	ldr	r2, [pc, #56]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e76:	fb03 f202 	mul.w	r2, r3, r2
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e80:	627b      	str	r3, [r7, #36]	; 0x24
 8005e82:	e004      	b.n	8005e8e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	4a0b      	ldr	r2, [pc, #44]	; (8005eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e88:	fb02 f303 	mul.w	r3, r2, r3
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	623b      	str	r3, [r7, #32]
      break;
 8005e92:	e002      	b.n	8005e9a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e94:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e96:	623b      	str	r3, [r7, #32]
      break;
 8005e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3728      	adds	r7, #40	; 0x28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bc90      	pop	{r4, r7}
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	0800ee78 	.word	0x0800ee78
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	007a1200 	.word	0x007a1200
 8005eb4:	003d0900 	.word	0x003d0900

08005eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ebc:	4b02      	ldr	r3, [pc, #8]	; (8005ec8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bc80      	pop	{r7}
 8005ec6:	4770      	bx	lr
 8005ec8:	20000000 	.word	0x20000000

08005ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ed0:	f7ff fff2 	bl	8005eb8 <HAL_RCC_GetHCLKFreq>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	4b05      	ldr	r3, [pc, #20]	; (8005eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	0a1b      	lsrs	r3, r3, #8
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	4903      	ldr	r1, [pc, #12]	; (8005ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ee2:	5ccb      	ldrb	r3, [r1, r3]
 8005ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	0800efa0 	.word	0x0800efa0

08005ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ef8:	f7ff ffde 	bl	8005eb8 <HAL_RCC_GetHCLKFreq>
 8005efc:	4602      	mov	r2, r0
 8005efe:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	0adb      	lsrs	r3, r3, #11
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	4903      	ldr	r1, [pc, #12]	; (8005f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f0a:	5ccb      	ldrb	r3, [r1, r3]
 8005f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	40021000 	.word	0x40021000
 8005f18:	0800efa0 	.word	0x0800efa0

08005f1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f24:	4b0a      	ldr	r3, [pc, #40]	; (8005f50 <RCC_Delay+0x34>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a0a      	ldr	r2, [pc, #40]	; (8005f54 <RCC_Delay+0x38>)
 8005f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2e:	0a5b      	lsrs	r3, r3, #9
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	fb02 f303 	mul.w	r3, r2, r3
 8005f36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f38:	bf00      	nop
  }
  while (Delay --);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	1e5a      	subs	r2, r3, #1
 8005f3e:	60fa      	str	r2, [r7, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1f9      	bne.n	8005f38 <RCC_Delay+0x1c>
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr
 8005f50:	20000000 	.word	0x20000000
 8005f54:	10624dd3 	.word	0x10624dd3

08005f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e041      	b.n	8005fee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fb fcf4 	bl	800196c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3304      	adds	r3, #4
 8005f94:	4619      	mov	r1, r3
 8005f96:	4610      	mov	r0, r2
 8005f98:	f000 f93c 	bl	8006214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d001      	beq.n	8006010 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e032      	b.n	8006076 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a18      	ldr	r2, [pc, #96]	; (8006080 <HAL_TIM_Base_Start+0x88>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00e      	beq.n	8006040 <HAL_TIM_Base_Start+0x48>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800602a:	d009      	beq.n	8006040 <HAL_TIM_Base_Start+0x48>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a14      	ldr	r2, [pc, #80]	; (8006084 <HAL_TIM_Base_Start+0x8c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d004      	beq.n	8006040 <HAL_TIM_Base_Start+0x48>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a13      	ldr	r2, [pc, #76]	; (8006088 <HAL_TIM_Base_Start+0x90>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d111      	bne.n	8006064 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2b06      	cmp	r3, #6
 8006050:	d010      	beq.n	8006074 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 0201 	orr.w	r2, r2, #1
 8006060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006062:	e007      	b.n	8006074 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	bc80      	pop	{r7}
 800607e:	4770      	bx	lr
 8006080:	40012c00 	.word	0x40012c00
 8006084:	40000400 	.word	0x40000400
 8006088:	40000800 	.word	0x40000800

0800608c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_TIM_ConfigClockSource+0x18>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e0b3      	b.n	800620c <HAL_TIM_ConfigClockSource+0x180>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060dc:	d03e      	beq.n	800615c <HAL_TIM_ConfigClockSource+0xd0>
 80060de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e2:	f200 8087 	bhi.w	80061f4 <HAL_TIM_ConfigClockSource+0x168>
 80060e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ea:	f000 8085 	beq.w	80061f8 <HAL_TIM_ConfigClockSource+0x16c>
 80060ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f2:	d87f      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x168>
 80060f4:	2b70      	cmp	r3, #112	; 0x70
 80060f6:	d01a      	beq.n	800612e <HAL_TIM_ConfigClockSource+0xa2>
 80060f8:	2b70      	cmp	r3, #112	; 0x70
 80060fa:	d87b      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x168>
 80060fc:	2b60      	cmp	r3, #96	; 0x60
 80060fe:	d050      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x116>
 8006100:	2b60      	cmp	r3, #96	; 0x60
 8006102:	d877      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x168>
 8006104:	2b50      	cmp	r3, #80	; 0x50
 8006106:	d03c      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0xf6>
 8006108:	2b50      	cmp	r3, #80	; 0x50
 800610a:	d873      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x168>
 800610c:	2b40      	cmp	r3, #64	; 0x40
 800610e:	d058      	beq.n	80061c2 <HAL_TIM_ConfigClockSource+0x136>
 8006110:	2b40      	cmp	r3, #64	; 0x40
 8006112:	d86f      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x168>
 8006114:	2b30      	cmp	r3, #48	; 0x30
 8006116:	d064      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x156>
 8006118:	2b30      	cmp	r3, #48	; 0x30
 800611a:	d86b      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x168>
 800611c:	2b20      	cmp	r3, #32
 800611e:	d060      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x156>
 8006120:	2b20      	cmp	r3, #32
 8006122:	d867      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x168>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d05c      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x156>
 8006128:	2b10      	cmp	r3, #16
 800612a:	d05a      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800612c:	e062      	b.n	80061f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6818      	ldr	r0, [r3, #0]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	6899      	ldr	r1, [r3, #8]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f000 f942 	bl	80063c6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006150:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	609a      	str	r2, [r3, #8]
      break;
 800615a:	e04e      	b.n	80061fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	6899      	ldr	r1, [r3, #8]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f000 f92b 	bl	80063c6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800617e:	609a      	str	r2, [r3, #8]
      break;
 8006180:	e03b      	b.n	80061fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	6859      	ldr	r1, [r3, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	461a      	mov	r2, r3
 8006190:	f000 f8a2 	bl	80062d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2150      	movs	r1, #80	; 0x50
 800619a:	4618      	mov	r0, r3
 800619c:	f000 f8f9 	bl	8006392 <TIM_ITRx_SetConfig>
      break;
 80061a0:	e02b      	b.n	80061fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6859      	ldr	r1, [r3, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	461a      	mov	r2, r3
 80061b0:	f000 f8c0 	bl	8006334 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2160      	movs	r1, #96	; 0x60
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 f8e9 	bl	8006392 <TIM_ITRx_SetConfig>
      break;
 80061c0:	e01b      	b.n	80061fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	6859      	ldr	r1, [r3, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	461a      	mov	r2, r3
 80061d0:	f000 f882 	bl	80062d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2140      	movs	r1, #64	; 0x40
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 f8d9 	bl	8006392 <TIM_ITRx_SetConfig>
      break;
 80061e0:	e00b      	b.n	80061fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4619      	mov	r1, r3
 80061ec:	4610      	mov	r0, r2
 80061ee:	f000 f8d0 	bl	8006392 <TIM_ITRx_SetConfig>
        break;
 80061f2:	e002      	b.n	80061fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80061f4:	bf00      	nop
 80061f6:	e000      	b.n	80061fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80061f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a29      	ldr	r2, [pc, #164]	; (80062cc <TIM_Base_SetConfig+0xb8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d00b      	beq.n	8006244 <TIM_Base_SetConfig+0x30>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006232:	d007      	beq.n	8006244 <TIM_Base_SetConfig+0x30>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a26      	ldr	r2, [pc, #152]	; (80062d0 <TIM_Base_SetConfig+0xbc>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d003      	beq.n	8006244 <TIM_Base_SetConfig+0x30>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a25      	ldr	r2, [pc, #148]	; (80062d4 <TIM_Base_SetConfig+0xc0>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d108      	bne.n	8006256 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a1c      	ldr	r2, [pc, #112]	; (80062cc <TIM_Base_SetConfig+0xb8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d00b      	beq.n	8006276 <TIM_Base_SetConfig+0x62>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006264:	d007      	beq.n	8006276 <TIM_Base_SetConfig+0x62>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a19      	ldr	r2, [pc, #100]	; (80062d0 <TIM_Base_SetConfig+0xbc>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d003      	beq.n	8006276 <TIM_Base_SetConfig+0x62>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a18      	ldr	r2, [pc, #96]	; (80062d4 <TIM_Base_SetConfig+0xc0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d108      	bne.n	8006288 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800627c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a07      	ldr	r2, [pc, #28]	; (80062cc <TIM_Base_SetConfig+0xb8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d103      	bne.n	80062bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	615a      	str	r2, [r3, #20]
}
 80062c2:	bf00      	nop
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bc80      	pop	{r7}
 80062ca:	4770      	bx	lr
 80062cc:	40012c00 	.word	0x40012c00
 80062d0:	40000400 	.word	0x40000400
 80062d4:	40000800 	.word	0x40000800

080062d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	f023 0201 	bic.w	r2, r3, #1
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f023 030a 	bic.w	r3, r3, #10
 8006314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	621a      	str	r2, [r3, #32]
}
 800632a:	bf00      	nop
 800632c:	371c      	adds	r7, #28
 800632e:	46bd      	mov	sp, r7
 8006330:	bc80      	pop	{r7}
 8006332:	4770      	bx	lr

08006334 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	f023 0210 	bic.w	r2, r3, #16
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800635e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	031b      	lsls	r3, r3, #12
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	4313      	orrs	r3, r2
 8006368:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006370:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	621a      	str	r2, [r3, #32]
}
 8006388:	bf00      	nop
 800638a:	371c      	adds	r7, #28
 800638c:	46bd      	mov	sp, r7
 800638e:	bc80      	pop	{r7}
 8006390:	4770      	bx	lr

08006392 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006392:	b480      	push	{r7}
 8006394:	b085      	sub	sp, #20
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	f043 0307 	orr.w	r3, r3, #7
 80063b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	609a      	str	r2, [r3, #8]
}
 80063bc:	bf00      	nop
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bc80      	pop	{r7}
 80063c4:	4770      	bx	lr

080063c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b087      	sub	sp, #28
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	60f8      	str	r0, [r7, #12]
 80063ce:	60b9      	str	r1, [r7, #8]
 80063d0:	607a      	str	r2, [r7, #4]
 80063d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	021a      	lsls	r2, r3, #8
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	431a      	orrs	r2, r3
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	609a      	str	r2, [r3, #8]
}
 80063fa:	bf00      	nop
 80063fc:	371c      	adds	r7, #28
 80063fe:	46bd      	mov	sp, r7
 8006400:	bc80      	pop	{r7}
 8006402:	4770      	bx	lr

08006404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006418:	2302      	movs	r3, #2
 800641a:	e046      	b.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	4313      	orrs	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a16      	ldr	r2, [pc, #88]	; (80064b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d00e      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006468:	d009      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a12      	ldr	r2, [pc, #72]	; (80064b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d004      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a10      	ldr	r2, [pc, #64]	; (80064bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d10c      	bne.n	8006498 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	4313      	orrs	r3, r2
 800648e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bc80      	pop	{r7}
 80064b2:	4770      	bx	lr
 80064b4:	40012c00 	.word	0x40012c00
 80064b8:	40000400 	.word	0x40000400
 80064bc:	40000800 	.word	0x40000800

080064c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e03f      	b.n	8006552 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d106      	bne.n	80064ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7fb fa5e 	bl	80019a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2224      	movs	r2, #36	; 0x24
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68da      	ldr	r2, [r3, #12]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006502:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fd65 	bl	8006fd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	691a      	ldr	r2, [r3, #16]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006518:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	695a      	ldr	r2, [r3, #20]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006528:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006538:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2220      	movs	r2, #32
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2220      	movs	r2, #32
 800654c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	4613      	mov	r3, r2
 8006568:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b20      	cmp	r3, #32
 8006574:	d153      	bne.n	800661e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <HAL_UART_Transmit_DMA+0x26>
 800657c:	88fb      	ldrh	r3, [r7, #6]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e04c      	b.n	8006620 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800658c:	2b01      	cmp	r3, #1
 800658e:	d101      	bne.n	8006594 <HAL_UART_Transmit_DMA+0x38>
 8006590:	2302      	movs	r3, #2
 8006592:	e045      	b.n	8006620 <HAL_UART_Transmit_DMA+0xc4>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	88fa      	ldrh	r2, [r7, #6]
 80065a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	88fa      	ldrh	r2, [r7, #6]
 80065ac:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2221      	movs	r2, #33	; 0x21
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c0:	4a19      	ldr	r2, [pc, #100]	; (8006628 <HAL_UART_Transmit_DMA+0xcc>)
 80065c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c8:	4a18      	ldr	r2, [pc, #96]	; (800662c <HAL_UART_Transmit_DMA+0xd0>)
 80065ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d0:	4a17      	ldr	r2, [pc, #92]	; (8006630 <HAL_UART_Transmit_DMA+0xd4>)
 80065d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d8:	2200      	movs	r2, #0
 80065da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80065dc:	f107 0308 	add.w	r3, r7, #8
 80065e0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	6819      	ldr	r1, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3304      	adds	r3, #4
 80065f0:	461a      	mov	r2, r3
 80065f2:	88fb      	ldrh	r3, [r7, #6]
 80065f4:	f7fb fdb2 	bl	800215c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006600:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	695a      	ldr	r2, [r3, #20]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006618:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	e000      	b.n	8006620 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800661e:	2302      	movs	r3, #2
  }
}
 8006620:	4618      	mov	r0, r3
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	08006a71 	.word	0x08006a71
 800662c:	08006ac3 	.word	0x08006ac3
 8006630:	08006bab 	.word	0x08006bab

08006634 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	4613      	mov	r3, r2
 8006640:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b20      	cmp	r3, #32
 800664c:	d13c      	bne.n	80066c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006654:	88fb      	ldrh	r3, [r7, #6]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e035      	b.n	80066ca <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006664:	2b01      	cmp	r3, #1
 8006666:	d101      	bne.n	800666c <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006668:	2302      	movs	r3, #2
 800666a:	e02e      	b.n	80066ca <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2201      	movs	r2, #1
 8006678:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800667a:	88fb      	ldrh	r3, [r7, #6]
 800667c:	461a      	mov	r2, r3
 800667e:	68b9      	ldr	r1, [r7, #8]
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 fadd 	bl	8006c40 <UART_Start_Receive_DMA>
 8006686:	4603      	mov	r3, r0
 8006688:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800668a:	7dfb      	ldrb	r3, [r7, #23]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d119      	bne.n	80066c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006694:	2b01      	cmp	r3, #1
 8006696:	d113      	bne.n	80066c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006698:	2300      	movs	r3, #0
 800669a:	613b      	str	r3, [r7, #16]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	613b      	str	r3, [r7, #16]
 80066ac:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68da      	ldr	r2, [r3, #12]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0210 	orr.w	r2, r2, #16
 80066bc:	60da      	str	r2, [r3, #12]
 80066be:	e001      	b.n	80066c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80066c4:	7dfb      	ldrb	r3, [r7, #23]
 80066c6:	e000      	b.n	80066ca <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 80066c8:	2302      	movs	r3, #2
  }
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08a      	sub	sp, #40	; 0x28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10d      	bne.n	8006726 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b00      	cmp	r3, #0
 8006712:	d008      	beq.n	8006726 <HAL_UART_IRQHandler+0x52>
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	f003 0320 	and.w	r3, r3, #32
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fbae 	bl	8006e80 <UART_Receive_IT>
      return;
 8006724:	e17b      	b.n	8006a1e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 80b1 	beq.w	8006890 <HAL_UART_IRQHandler+0x1bc>
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d105      	bne.n	8006744 <HAL_UART_IRQHandler+0x70>
 8006738:	6a3b      	ldr	r3, [r7, #32]
 800673a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 80a6 	beq.w	8006890 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <HAL_UART_IRQHandler+0x90>
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675c:	f043 0201 	orr.w	r2, r3, #1
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	f003 0304 	and.w	r3, r3, #4
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00a      	beq.n	8006784 <HAL_UART_IRQHandler+0xb0>
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	d005      	beq.n	8006784 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677c:	f043 0202 	orr.w	r2, r3, #2
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <HAL_UART_IRQHandler+0xd0>
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679c:	f043 0204 	orr.w	r2, r3, #4
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	f003 0308 	and.w	r3, r3, #8
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00f      	beq.n	80067ce <HAL_UART_IRQHandler+0xfa>
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	f003 0320 	and.w	r3, r3, #32
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <HAL_UART_IRQHandler+0xee>
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d005      	beq.n	80067ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	f043 0208 	orr.w	r2, r3, #8
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 811e 	beq.w	8006a14 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	f003 0320 	and.w	r3, r3, #32
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d007      	beq.n	80067f2 <HAL_UART_IRQHandler+0x11e>
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	f003 0320 	and.w	r3, r3, #32
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fb47 	bl	8006e80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	bf14      	ite	ne
 8006800:	2301      	movne	r3, #1
 8006802:	2300      	moveq	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b00      	cmp	r3, #0
 8006812:	d102      	bne.n	800681a <HAL_UART_IRQHandler+0x146>
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d031      	beq.n	800687e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fa89 	bl	8006d32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682a:	2b00      	cmp	r3, #0
 800682c:	d023      	beq.n	8006876 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	695a      	ldr	r2, [r3, #20]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800683c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006842:	2b00      	cmp	r3, #0
 8006844:	d013      	beq.n	800686e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684a:	4a76      	ldr	r2, [pc, #472]	; (8006a24 <HAL_UART_IRQHandler+0x350>)
 800684c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006852:	4618      	mov	r0, r3
 8006854:	f7fb fd1c 	bl	8002290 <HAL_DMA_Abort_IT>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d016      	beq.n	800688c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006868:	4610      	mov	r0, r2
 800686a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800686c:	e00e      	b.n	800688c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f8f5 	bl	8006a5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006874:	e00a      	b.n	800688c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f8f1 	bl	8006a5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687c:	e006      	b.n	800688c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f8ed 	bl	8006a5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800688a:	e0c3      	b.n	8006a14 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800688c:	bf00      	nop
    return;
 800688e:	e0c1      	b.n	8006a14 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006894:	2b01      	cmp	r3, #1
 8006896:	f040 80a1 	bne.w	80069dc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	f003 0310 	and.w	r3, r3, #16
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 809b 	beq.w	80069dc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	f003 0310 	and.w	r3, r3, #16
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 8095 	beq.w	80069dc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d04e      	beq.n	8006974 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80068e0:	8a3b      	ldrh	r3, [r7, #16]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 8098 	beq.w	8006a18 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068ec:	8a3a      	ldrh	r2, [r7, #16]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	f080 8092 	bcs.w	8006a18 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	8a3a      	ldrh	r2, [r7, #16]
 80068f8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	2b20      	cmp	r3, #32
 8006902:	d02b      	beq.n	800695c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68da      	ldr	r2, [r3, #12]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006912:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695a      	ldr	r2, [r3, #20]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0201 	bic.w	r2, r2, #1
 8006922:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	695a      	ldr	r2, [r3, #20]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006932:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2220      	movs	r2, #32
 8006938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0210 	bic.w	r2, r2, #16
 8006950:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	4618      	mov	r0, r3
 8006958:	f7fb fc5f 	bl	800221a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006964:	b29b      	uxth	r3, r3
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	b29b      	uxth	r3, r3
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7fa fc4d 	bl	800120c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006972:	e051      	b.n	8006a18 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800697c:	b29b      	uxth	r3, r3
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006986:	b29b      	uxth	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d047      	beq.n	8006a1c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800698c:	8a7b      	ldrh	r3, [r7, #18]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d044      	beq.n	8006a1c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80069a0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	695a      	ldr	r2, [r3, #20]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f022 0201 	bic.w	r2, r2, #1
 80069b0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0210 	bic.w	r2, r2, #16
 80069ce:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069d0:	8a7b      	ldrh	r3, [r7, #18]
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7fa fc19 	bl	800120c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80069da:	e01f      	b.n	8006a1c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d008      	beq.n	80069f8 <HAL_UART_IRQHandler+0x324>
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f9de 	bl	8006db2 <UART_Transmit_IT>
    return;
 80069f6:	e012      	b.n	8006a1e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00d      	beq.n	8006a1e <HAL_UART_IRQHandler+0x34a>
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d008      	beq.n	8006a1e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fa1f 	bl	8006e50 <UART_EndTransmit_IT>
    return;
 8006a12:	e004      	b.n	8006a1e <HAL_UART_IRQHandler+0x34a>
    return;
 8006a14:	bf00      	nop
 8006a16:	e002      	b.n	8006a1e <HAL_UART_IRQHandler+0x34a>
      return;
 8006a18:	bf00      	nop
 8006a1a:	e000      	b.n	8006a1e <HAL_UART_IRQHandler+0x34a>
      return;
 8006a1c:	bf00      	nop
  }
}
 8006a1e:	3728      	adds	r7, #40	; 0x28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	08006d8b 	.word	0x08006d8b

08006a28 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bc80      	pop	{r7}
 8006a38:	4770      	bx	lr

08006a3a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a42:	bf00      	nop
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bc80      	pop	{r7}
 8006a4a:	4770      	bx	lr

08006a4c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bc80      	pop	{r7}
 8006a5c:	4770      	bx	lr

08006a5e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a66:	bf00      	nop
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bc80      	pop	{r7}
 8006a6e:	4770      	bx	lr

08006a70 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0320 	and.w	r3, r3, #32
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d113      	bne.n	8006ab4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	695a      	ldr	r2, [r3, #20]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aa0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68da      	ldr	r2, [r3, #12]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ab0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ab2:	e002      	b.n	8006aba <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f7fa fb9b 	bl	80011f0 <HAL_UART_TxCpltCallback>
}
 8006aba:	bf00      	nop
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f7ff ffa9 	bl	8006a28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ad6:	bf00      	nop
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d12a      	bne.n	8006b50 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b0e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695a      	ldr	r2, [r3, #20]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f022 0201 	bic.w	r2, r2, #1
 8006b1e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	695a      	ldr	r2, [r3, #20]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b2e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d107      	bne.n	8006b50 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68da      	ldr	r2, [r3, #12]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 0210 	bic.w	r2, r2, #16
 8006b4e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d106      	bne.n	8006b66 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f7fa fb54 	bl	800120c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b64:	e002      	b.n	8006b6c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f7ff ff67 	bl	8006a3a <HAL_UART_RxCpltCallback>
}
 8006b6c:	bf00      	nop
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d108      	bne.n	8006b9c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b8e:	085b      	lsrs	r3, r3, #1
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	4619      	mov	r1, r3
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f7fa fb39 	bl	800120c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b9a:	e002      	b.n	8006ba2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f7ff ff55 	bl	8006a4c <HAL_UART_RxHalfCpltCallback>
}
 8006ba2:	bf00      	nop
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	bf14      	ite	ne
 8006bca:	2301      	movne	r3, #1
 8006bcc:	2300      	moveq	r3, #0
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b21      	cmp	r3, #33	; 0x21
 8006bdc:	d108      	bne.n	8006bf0 <UART_DMAError+0x46>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d005      	beq.n	8006bf0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2200      	movs	r2, #0
 8006be8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006bea:	68b8      	ldr	r0, [r7, #8]
 8006bec:	f000 f88c 	bl	8006d08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	bf14      	ite	ne
 8006bfe:	2301      	movne	r3, #1
 8006c00:	2300      	moveq	r3, #0
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b22      	cmp	r3, #34	; 0x22
 8006c10:	d108      	bne.n	8006c24 <UART_DMAError+0x7a>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006c1e:	68b8      	ldr	r0, [r7, #8]
 8006c20:	f000 f887 	bl	8006d32 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c28:	f043 0210 	orr.w	r2, r3, #16
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c30:	68b8      	ldr	r0, [r7, #8]
 8006c32:	f7ff ff14 	bl	8006a5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c36:	bf00      	nop
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
	...

08006c40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	88fa      	ldrh	r2, [r7, #6]
 8006c58:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2222      	movs	r2, #34	; 0x22
 8006c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	4a23      	ldr	r2, [pc, #140]	; (8006cfc <UART_Start_Receive_DMA+0xbc>)
 8006c6e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	4a22      	ldr	r2, [pc, #136]	; (8006d00 <UART_Start_Receive_DMA+0xc0>)
 8006c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	4a21      	ldr	r2, [pc, #132]	; (8006d04 <UART_Start_Receive_DMA+0xc4>)
 8006c7e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	2200      	movs	r2, #0
 8006c86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006c88:	f107 0308 	add.w	r3, r7, #8
 8006c8c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3304      	adds	r3, #4
 8006c98:	4619      	mov	r1, r3
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	88fb      	ldrh	r3, [r7, #6]
 8006ca0:	f7fb fa5c 	bl	800215c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	613b      	str	r3, [r7, #16]
 8006cb8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68da      	ldr	r2, [r3, #12]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cd0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	695a      	ldr	r2, [r3, #20]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f042 0201 	orr.w	r2, r2, #1
 8006ce0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	695a      	ldr	r2, [r3, #20]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cf0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	08006adf 	.word	0x08006adf
 8006d00:	08006b75 	.word	0x08006b75
 8006d04:	08006bab 	.word	0x08006bab

08006d08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68da      	ldr	r2, [r3, #12]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006d1e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bc80      	pop	{r7}
 8006d30:	4770      	bx	lr

08006d32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d48:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	695a      	ldr	r2, [r3, #20]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0201 	bic.w	r2, r2, #1
 8006d58:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d107      	bne.n	8006d72 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0210 	bic.w	r2, r2, #16
 8006d70:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc80      	pop	{r7}
 8006d88:	4770      	bx	lr

08006d8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b084      	sub	sp, #16
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f7ff fe5a 	bl	8006a5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006daa:	bf00      	nop
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b085      	sub	sp, #20
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b21      	cmp	r3, #33	; 0x21
 8006dc4:	d13e      	bne.n	8006e44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dce:	d114      	bne.n	8006dfa <UART_Transmit_IT+0x48>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d110      	bne.n	8006dfa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	1c9a      	adds	r2, r3, #2
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	621a      	str	r2, [r3, #32]
 8006df8:	e008      	b.n	8006e0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	1c59      	adds	r1, r3, #1
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6211      	str	r1, [r2, #32]
 8006e04:	781a      	ldrb	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	3b01      	subs	r3, #1
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	4619      	mov	r1, r3
 8006e1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10f      	bne.n	8006e40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	e000      	b.n	8006e46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e44:	2302      	movs	r3, #2
  }
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bc80      	pop	{r7}
 8006e4e:	4770      	bx	lr

08006e50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7fa f9bd 	bl	80011f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b22      	cmp	r3, #34	; 0x22
 8006e92:	f040 8099 	bne.w	8006fc8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e9e:	d117      	bne.n	8006ed0 <UART_Receive_IT+0x50>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d113      	bne.n	8006ed0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec8:	1c9a      	adds	r2, r3, #2
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	629a      	str	r2, [r3, #40]	; 0x28
 8006ece:	e026      	b.n	8006f1e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ee2:	d007      	beq.n	8006ef4 <UART_Receive_IT+0x74>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10a      	bne.n	8006f02 <UART_Receive_IT+0x82>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d106      	bne.n	8006f02 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	701a      	strb	r2, [r3, #0]
 8006f00:	e008      	b.n	8006f14 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	3b01      	subs	r3, #1
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d148      	bne.n	8006fc4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68da      	ldr	r2, [r3, #12]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0220 	bic.w	r2, r2, #32
 8006f40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	695a      	ldr	r2, [r3, #20]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f022 0201 	bic.w	r2, r2, #1
 8006f60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d123      	bne.n	8006fba <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f022 0210 	bic.w	r2, r2, #16
 8006f86:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0310 	and.w	r3, r3, #16
 8006f92:	2b10      	cmp	r3, #16
 8006f94:	d10a      	bne.n	8006fac <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	60fb      	str	r3, [r7, #12]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fa f92a 	bl	800120c <HAL_UARTEx_RxEventCallback>
 8006fb8:	e002      	b.n	8006fc0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff fd3d 	bl	8006a3a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	e002      	b.n	8006fca <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	e000      	b.n	8006fca <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006fc8:	2302      	movs	r3, #2
  }
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
	...

08006fd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68da      	ldr	r2, [r3, #12]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	689a      	ldr	r2, [r3, #8]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	695b      	ldr	r3, [r3, #20]
 8007000:	4313      	orrs	r3, r2
 8007002:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800700e:	f023 030c 	bic.w	r3, r3, #12
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	6812      	ldr	r2, [r2, #0]
 8007016:	68b9      	ldr	r1, [r7, #8]
 8007018:	430b      	orrs	r3, r1
 800701a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	699a      	ldr	r2, [r3, #24]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a2c      	ldr	r2, [pc, #176]	; (80070e8 <UART_SetConfig+0x114>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d103      	bne.n	8007044 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800703c:	f7fe ff5a 	bl	8005ef4 <HAL_RCC_GetPCLK2Freq>
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	e002      	b.n	800704a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007044:	f7fe ff42 	bl	8005ecc <HAL_RCC_GetPCLK1Freq>
 8007048:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	4613      	mov	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	009a      	lsls	r2, r3, #2
 8007054:	441a      	add	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007060:	4a22      	ldr	r2, [pc, #136]	; (80070ec <UART_SetConfig+0x118>)
 8007062:	fba2 2303 	umull	r2, r3, r2, r3
 8007066:	095b      	lsrs	r3, r3, #5
 8007068:	0119      	lsls	r1, r3, #4
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	4613      	mov	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	009a      	lsls	r2, r3, #2
 8007074:	441a      	add	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007080:	4b1a      	ldr	r3, [pc, #104]	; (80070ec <UART_SetConfig+0x118>)
 8007082:	fba3 0302 	umull	r0, r3, r3, r2
 8007086:	095b      	lsrs	r3, r3, #5
 8007088:	2064      	movs	r0, #100	; 0x64
 800708a:	fb00 f303 	mul.w	r3, r0, r3
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	011b      	lsls	r3, r3, #4
 8007092:	3332      	adds	r3, #50	; 0x32
 8007094:	4a15      	ldr	r2, [pc, #84]	; (80070ec <UART_SetConfig+0x118>)
 8007096:	fba2 2303 	umull	r2, r3, r2, r3
 800709a:	095b      	lsrs	r3, r3, #5
 800709c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070a0:	4419      	add	r1, r3
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	4613      	mov	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	009a      	lsls	r2, r3, #2
 80070ac:	441a      	add	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80070b8:	4b0c      	ldr	r3, [pc, #48]	; (80070ec <UART_SetConfig+0x118>)
 80070ba:	fba3 0302 	umull	r0, r3, r3, r2
 80070be:	095b      	lsrs	r3, r3, #5
 80070c0:	2064      	movs	r0, #100	; 0x64
 80070c2:	fb00 f303 	mul.w	r3, r0, r3
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	3332      	adds	r3, #50	; 0x32
 80070cc:	4a07      	ldr	r2, [pc, #28]	; (80070ec <UART_SetConfig+0x118>)
 80070ce:	fba2 2303 	umull	r2, r3, r2, r3
 80070d2:	095b      	lsrs	r3, r3, #5
 80070d4:	f003 020f 	and.w	r2, r3, #15
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	440a      	add	r2, r1
 80070de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80070e0:	bf00      	nop
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	40013800 	.word	0x40013800
 80070ec:	51eb851f 	.word	0x51eb851f

080070f0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	bc80      	pop	{r7}
 8007104:	4770      	bx	lr

08007106 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EEC1Ev>:
      deque() = default;
 8007106:	b580      	push	{r7, lr}
 8007108:	b082      	sub	sp, #8
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4618      	mov	r0, r3
 8007112:	f000 fc75 	bl	8007a00 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EEC1Ev>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <_ZN6Ina219C1EP17I2C_HandleTypeDefP17TIM_HandleTypeDefh>:

/*!
 *  @brief  Instantiates a new INA219 class
 *  @param addr the I2C address the device can be found on. Default is 0x40
 */
Ina219::Ina219(I2C_HandleTypeDef* hi2c, TIM_HandleTypeDef* htim, uint8_t addr) {
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	70fb      	strb	r3, [r7, #3]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	333c      	adds	r3, #60	; 0x3c
 8007132:	4618      	mov	r0, r3
 8007134:	f7ff ffe7 	bl	8007106 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EEC1Ev>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3364      	adds	r3, #100	; 0x64
 800713c:	4618      	mov	r0, r3
 800713e:	f7ff ffe2 	bl	8007106 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EEC1Ev>
	this->hi2c = hi2c;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	601a      	str	r2, [r3, #0]
	this->addr = addr << 1;
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	b2da      	uxtb	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	731a      	strb	r2, [r3, #12]
	this->htim = htim;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	605a      	str	r2, [r3, #4]

	flagTxDone = HAL_OK;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	stage = 0;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	761a      	strb	r2, [r3, #24]
	//	timeLife = 0;
	//	currentLife = 0;
	//
	//	pre_time = 0;

	flagSTART = HAL_ERROR;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2201      	movs	r2, #1
 800716a:	765a      	strb	r2, [r3, #25]
	flagPOWER = HAL_ERROR;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2201      	movs	r2, #1
 8007170:	769a      	strb	r2, [r3, #26]
}
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <_ZN6Ina219D1Ev>:
//}

/*!
 *  @brief INA219 class destructor
 */
Ina219::~Ina219() {
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	3364      	adds	r3, #100	; 0x64
 8007188:	4618      	mov	r0, r3
 800718a:	f000 fc6c 	bl	8007a66 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EED1Ev>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	333c      	adds	r3, #60	; 0x3c
 8007192:	4618      	mov	r0, r3
 8007194:	f000 fc67 	bl	8007a66 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EED1Ev>
}
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
	...

080071a4 <_ZN6Ina2197run_DMAE27INA219_Config_Bvoltagerange19INA_219_Config_Gain21INA219_Config_Badcres21INA219_Config_Sadcres18INA219_Config_Modet>:
void Ina219::run_DMA(	INA219_Config_Bvoltagerange BusVolRange,
		INA_219_Config_Gain PGA,
		INA219_Config_Badcres BADC,
		INA219_Config_Sadcres SADC,
		INA219_Config_Mode OperaMode,
		uint16_t Cal) {
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	4608      	mov	r0, r1
 80071ae:	4611      	mov	r1, r2
 80071b0:	461a      	mov	r2, r3
 80071b2:	4603      	mov	r3, r0
 80071b4:	817b      	strh	r3, [r7, #10]
 80071b6:	460b      	mov	r3, r1
 80071b8:	813b      	strh	r3, [r7, #8]
 80071ba:	4613      	mov	r3, r2
 80071bc:	80fb      	strh	r3, [r7, #6]
	static uint16_t Configuration = 0x0000U;

	if (stage == 0) {
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	7e1b      	ldrb	r3, [r3, #24]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d146      	bne.n	8007254 <_ZN6Ina2197run_DMAE27INA219_Config_Bvoltagerange19INA_219_Config_Gain21INA219_Config_Badcres21INA219_Config_Sadcres18INA219_Config_Modet+0xb0>

		this->timer_clk = HAL_RCC_GetSysClockFreq() / (this->htim->Init.Prescaler + 1);
 80071c6:	f7fe fe19 	bl	8005dfc <HAL_RCC_GetSysClockFreq>
 80071ca:	4602      	mov	r2, r0
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	3301      	adds	r3, #1
 80071d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	609a      	str	r2, [r3, #8]

		if (HAL_I2C_IsDeviceReady(hi2c, addr, 10, HAL_MAX_DELAY) != HAL_OK) return;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6818      	ldr	r0, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	7b1b      	ldrb	r3, [r3, #12]
 80071e4:	b299      	uxth	r1, r3
 80071e6:	f04f 33ff 	mov.w	r3, #4294967295
 80071ea:	220a      	movs	r2, #10
 80071ec:	f7fc f884 	bl	80032f8 <HAL_I2C_IsDeviceReady>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	bf14      	ite	ne
 80071f6:	2301      	movne	r3, #1
 80071f8:	2300      	moveq	r3, #0
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f040 8092 	bne.w	8007326 <_ZN6Ina2197run_DMAE27INA219_Config_Bvoltagerange19INA_219_Config_Gain21INA219_Config_Badcres21INA219_Config_Sadcres18INA219_Config_Modet+0x182>

		Configuration = Configuration | BusVolRange | PGA | BADC | SADC | OperaMode;
 8007202:	4b4d      	ldr	r3, [pc, #308]	; (8007338 <_ZN6Ina2197run_DMAE27INA219_Config_Bvoltagerange19INA_219_Config_Gain21INA219_Config_Badcres21INA219_Config_Sadcres18INA219_Config_Modet+0x194>)
 8007204:	881a      	ldrh	r2, [r3, #0]
 8007206:	897b      	ldrh	r3, [r7, #10]
 8007208:	4313      	orrs	r3, r2
 800720a:	b29a      	uxth	r2, r3
 800720c:	893b      	ldrh	r3, [r7, #8]
 800720e:	4313      	orrs	r3, r2
 8007210:	b29a      	uxth	r2, r3
 8007212:	88fb      	ldrh	r3, [r7, #6]
 8007214:	4313      	orrs	r3, r2
 8007216:	b29a      	uxth	r2, r3
 8007218:	7e3b      	ldrb	r3, [r7, #24]
 800721a:	b29b      	uxth	r3, r3
 800721c:	4313      	orrs	r3, r2
 800721e:	b29b      	uxth	r3, r3
 8007220:	b21a      	sxth	r2, r3
 8007222:	7f3b      	ldrb	r3, [r7, #28]
 8007224:	b21b      	sxth	r3, r3
 8007226:	4313      	orrs	r3, r2
 8007228:	b21b      	sxth	r3, r3
 800722a:	b29a      	uxth	r2, r3
 800722c:	4b42      	ldr	r3, [pc, #264]	; (8007338 <_ZN6Ina2197run_DMAE27INA219_Config_Bvoltagerange19INA_219_Config_Gain21INA219_Config_Badcres21INA219_Config_Sadcres18INA219_Config_Modet+0x194>)
 800722e:	801a      	strh	r2, [r3, #0]

		pData[0] = Configuration >> 8;
 8007230:	4b41      	ldr	r3, [pc, #260]	; (8007338 <_ZN6Ina2197run_DMAE27INA219_Config_Bvoltagerange19INA_219_Config_Gain21INA219_Config_Badcres21INA219_Config_Sadcres18INA219_Config_Modet+0x194>)
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	0a1b      	lsrs	r3, r3, #8
 8007236:	b29b      	uxth	r3, r3
 8007238:	b2da      	uxtb	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	735a      	strb	r2, [r3, #13]
		pData[1] = Configuration;
 800723e:	4b3e      	ldr	r3, [pc, #248]	; (8007338 <_ZN6Ina2197run_DMAE27INA219_Config_Bvoltagerange19INA_219_Config_Gain21INA219_Config_Badcres21INA219_Config_Sadcres18INA219_Config_Modet+0x194>)
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	b2da      	uxtb	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	739a      	strb	r2, [r3, #14]

		stage++;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	7e1b      	ldrb	r3, [r3, #24]
 800724c:	3301      	adds	r3, #1
 800724e:	b2da      	uxtb	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	761a      	strb	r2, [r3, #24]
	}

	if (stage == 1) {
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	7e1b      	ldrb	r3, [r3, #24]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d117      	bne.n	800728c <_ZN6Ina2197run_DMAE27INA219_Config_Bvoltagerange19INA_219_Config_Gain21INA219_Config_Badcres21INA219_Config_Sadcres18INA219_Config_Modet+0xe8>
		HAL_I2C_Mem_Write_DMA(hi2c, addr, INA219_REG_CONFIG, I2C_MEMADD_SIZE_8BIT, pData, sizeof(pData));
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6818      	ldr	r0, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	7b1b      	ldrb	r3, [r3, #12]
 8007264:	b299      	uxth	r1, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	330d      	adds	r3, #13
 800726a:	2202      	movs	r2, #2
 800726c:	9201      	str	r2, [sp, #4]
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	2301      	movs	r3, #1
 8007272:	2200      	movs	r2, #0
 8007274:	f7fb fef2 	bl	800305c <HAL_I2C_Mem_Write_DMA>
		flagTxDone = HAL_BUSY;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		stage++;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	7e1b      	ldrb	r3, [r3, #24]
 8007284:	3301      	adds	r3, #1
 8007286:	b2da      	uxtb	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	761a      	strb	r2, [r3, #24]
	}

	if (stage == 2) {
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	7e1b      	ldrb	r3, [r3, #24]
 8007290:	2b02      	cmp	r3, #2
 8007292:	d126      	bne.n	80072e2 <_ZN6Ina2197run_DMAE27INA219_Config_Bvoltagerange19INA_219_Config_Gain21INA219_Config_Badcres21INA219_Config_Sadcres18INA219_Config_Modet+0x13e>
		if (flagTxDone != HAL_OK) return;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800729a:	2b00      	cmp	r3, #0
 800729c:	d145      	bne.n	800732a <_ZN6Ina2197run_DMAE27INA219_Config_Bvoltagerange19INA_219_Config_Gain21INA219_Config_Badcres21INA219_Config_Sadcres18INA219_Config_Modet+0x186>

		pData[0] = Cal >> 8;
 800729e:	8c3b      	ldrh	r3, [r7, #32]
 80072a0:	0a1b      	lsrs	r3, r3, #8
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	b2da      	uxtb	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	735a      	strb	r2, [r3, #13]
		pData[1] = Cal;
 80072aa:	8c3b      	ldrh	r3, [r7, #32]
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	739a      	strb	r2, [r3, #14]
		HAL_I2C_Mem_Write_DMA(hi2c, addr, INA219_REG_CALIBRATION, I2C_MEMADD_SIZE_8BIT, pData, sizeof(pData));
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6818      	ldr	r0, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	7b1b      	ldrb	r3, [r3, #12]
 80072ba:	b299      	uxth	r1, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	330d      	adds	r3, #13
 80072c0:	2202      	movs	r2, #2
 80072c2:	9201      	str	r2, [sp, #4]
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	2301      	movs	r3, #1
 80072c8:	2205      	movs	r2, #5
 80072ca:	f7fb fec7 	bl	800305c <HAL_I2C_Mem_Write_DMA>
		flagTxDone = HAL_BUSY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2202      	movs	r2, #2
 80072d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		stage++;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	7e1b      	ldrb	r3, [r3, #24]
 80072da:	3301      	adds	r3, #1
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	761a      	strb	r2, [r3, #24]
	}

	if (stage == 3) {
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	7e1b      	ldrb	r3, [r3, #24]
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d10a      	bne.n	8007300 <_ZN6Ina2197run_DMAE27INA219_Config_Bvoltagerange19INA_219_Config_Gain21INA219_Config_Badcres21INA219_Config_Sadcres18INA219_Config_Modet+0x15c>
		if (flagTxDone != HAL_OK) return;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d11c      	bne.n	800732e <_ZN6Ina2197run_DMAE27INA219_Config_Bvoltagerange19INA_219_Config_Gain21INA219_Config_Badcres21INA219_Config_Sadcres18INA219_Config_Modet+0x18a>
		stage++;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	7e1b      	ldrb	r3, [r3, #24]
 80072f8:	3301      	adds	r3, #1
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	761a      	strb	r2, [r3, #24]
	}

	if (stage == 4) {
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	7e1b      	ldrb	r3, [r3, #24]
 8007304:	2b04      	cmp	r3, #4
 8007306:	d113      	bne.n	8007330 <_ZN6Ina2197run_DMAE27INA219_Config_Bvoltagerange19INA_219_Config_Gain21INA219_Config_Badcres21INA219_Config_Sadcres18INA219_Config_Modet+0x18c>
		if (flagSTART != HAL_OK) {
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	7e5b      	ldrb	r3, [r3, #25]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <_ZN6Ina2197run_DMAE27INA219_Config_Bvoltagerange19INA_219_Config_Gain21INA219_Config_Badcres21INA219_Config_Sadcres18INA219_Config_Modet+0x172>
			funcStart();
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 f907 	bl	8007524 <_ZN6Ina2199funcStartEv>
		}

		if (flagPOWER == HAL_OK) {
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	7e9b      	ldrb	r3, [r3, #26]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d108      	bne.n	8007330 <_ZN6Ina2197run_DMAE27INA219_Config_Bvoltagerange19INA_219_Config_Gain21INA219_Config_Badcres21INA219_Config_Sadcres18INA219_Config_Modet+0x18c>
			funcPower();
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 fad8 	bl	80078d4 <_ZN6Ina2199funcPowerEv>
 8007324:	e004      	b.n	8007330 <_ZN6Ina2197run_DMAE27INA219_Config_Bvoltagerange19INA_219_Config_Gain21INA219_Config_Badcres21INA219_Config_Sadcres18INA219_Config_Modet+0x18c>
		if (HAL_I2C_IsDeviceReady(hi2c, addr, 10, HAL_MAX_DELAY) != HAL_OK) return;
 8007326:	bf00      	nop
 8007328:	e002      	b.n	8007330 <_ZN6Ina2197run_DMAE27INA219_Config_Bvoltagerange19INA_219_Config_Gain21INA219_Config_Badcres21INA219_Config_Sadcres18INA219_Config_Modet+0x18c>
		if (flagTxDone != HAL_OK) return;
 800732a:	bf00      	nop
 800732c:	e000      	b.n	8007330 <_ZN6Ina2197run_DMAE27INA219_Config_Bvoltagerange19INA_219_Config_Gain21INA219_Config_Badcres21INA219_Config_Sadcres18INA219_Config_Modet+0x18c>
		if (flagTxDone != HAL_OK) return;
 800732e:	bf00      	nop
		}
	}
}
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	20000cd4 	.word	0x20000cd4

0800733c <_ZN6Ina21910IRQHandlerEv>:

void Ina219::IRQHandler() {
 800733c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007340:	b090      	sub	sp, #64	; 0x40
 8007342:	af00      	add	r7, sp, #0
 8007344:	60f8      	str	r0, [r7, #12]
	if (pRxListData.size() < 1) return;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	3364      	adds	r3, #100	; 0x64
 800734a:	4618      	mov	r0, r3
 800734c:	f7f9 ff77 	bl	800123e <_ZNKSt5dequeISt6vectorIhSaIhEESaIS2_EE4sizeEv>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	bf0c      	ite	eq
 8007356:	2301      	moveq	r3, #1
 8007358:	2300      	movne	r3, #0
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	f040 80bc 	bne.w	80074da <_ZN6Ina21910IRQHandlerEv+0x19e>

	uint8_t* data = pRxListData[0].data();
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3364      	adds	r3, #100	; 0x64
 8007366:	2100      	movs	r1, #0
 8007368:	4618      	mov	r0, r3
 800736a:	f7f9 ff7a 	bl	8001262 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EEixEj>
 800736e:	4603      	mov	r3, r0
 8007370:	4618      	mov	r0, r3
 8007372:	f000 fb9d 	bl	8007ab0 <_ZNSt6vectorIhSaIhEE4dataEv>
 8007376:	63f8      	str	r0, [r7, #60]	; 0x3c

	uint8_t start[6] = {'S', 'T', 'A', 'R', 'T', '='};
 8007378:	4a5a      	ldr	r2, [pc, #360]	; (80074e4 <_ZN6Ina21910IRQHandlerEv+0x1a8>)
 800737a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800737e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007382:	6018      	str	r0, [r3, #0]
 8007384:	3304      	adds	r3, #4
 8007386:	8019      	strh	r1, [r3, #0]
	uint8_t power[6] = {'P', 'O', 'W', 'E', 'R', '='};
 8007388:	4a57      	ldr	r2, [pc, #348]	; (80074e8 <_ZN6Ina21910IRQHandlerEv+0x1ac>)
 800738a:	f107 031c 	add.w	r3, r7, #28
 800738e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007392:	6018      	str	r0, [r3, #0]
 8007394:	3304      	adds	r3, #4
 8007396:	8019      	strh	r1, [r3, #0]

	if (memcmp(data, start, 6) == 0) {
 8007398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800739c:	2206      	movs	r2, #6
 800739e:	4619      	mov	r1, r3
 80073a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80073a2:	f003 fa27 	bl	800a7f4 <memcmp>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f040 8088 	bne.w	80074be <_ZN6Ina21910IRQHandlerEv+0x182>
		flagSTART = HAL_OK;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	765a      	strb	r2, [r3, #25]
		timeMax = (uint64_t)atoi((char* )data + 6) * timer_clk * 60;
 80073b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b6:	3306      	adds	r3, #6
 80073b8:	4618      	mov	r0, r3
 80073ba:	f002 ffa0 	bl	800a2fe <atoi>
 80073be:	4603      	mov	r3, r0
 80073c0:	17da      	asrs	r2, r3, #31
 80073c2:	603b      	str	r3, [r7, #0]
 80073c4:	607a      	str	r2, [r7, #4]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	2200      	movs	r2, #0
 80073cc:	469a      	mov	sl, r3
 80073ce:	4693      	mov	fp, r2
 80073d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073d4:	460b      	mov	r3, r1
 80073d6:	fb0a f203 	mul.w	r2, sl, r3
 80073da:	4603      	mov	r3, r0
 80073dc:	fb03 f30b 	mul.w	r3, r3, fp
 80073e0:	4413      	add	r3, r2
 80073e2:	4602      	mov	r2, r0
 80073e4:	fba2 450a 	umull	r4, r5, r2, sl
 80073e8:	442b      	add	r3, r5
 80073ea:	461d      	mov	r5, r3
 80073ec:	4622      	mov	r2, r4
 80073ee:	462b      	mov	r3, r5
 80073f0:	f04f 0000 	mov.w	r0, #0
 80073f4:	f04f 0100 	mov.w	r1, #0
 80073f8:	0119      	lsls	r1, r3, #4
 80073fa:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80073fe:	0110      	lsls	r0, r2, #4
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	ebb2 0804 	subs.w	r8, r2, r4
 8007408:	eb63 0905 	sbc.w	r9, r3, r5
 800740c:	f04f 0200 	mov.w	r2, #0
 8007410:	f04f 0300 	mov.w	r3, #0
 8007414:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8007418:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800741c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8007420:	4690      	mov	r8, r2
 8007422:	4699      	mov	r9, r3
 8007424:	4642      	mov	r2, r8
 8007426:	464b      	mov	r3, r9
 8007428:	68f9      	ldr	r1, [r7, #12]
 800742a:	e9c1 2308 	strd	r2, r3, [r1, #32]
		pRxListData.pop_front();
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3364      	adds	r3, #100	; 0x64
 8007432:	4618      	mov	r0, r3
 8007434:	f7f9 ff26 	bl	8001284 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE9pop_frontEv>

		std::vector<uint8_t> ok = { 'O', 'K', '\n'};
 8007438:	4a2c      	ldr	r2, [pc, #176]	; (80074ec <_ZN6Ina21910IRQHandlerEv+0x1b0>)
 800743a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800743e:	6812      	ldr	r2, [r2, #0]
 8007440:	4611      	mov	r1, r2
 8007442:	8019      	strh	r1, [r3, #0]
 8007444:	3302      	adds	r3, #2
 8007446:	0c12      	lsrs	r2, r2, #16
 8007448:	701a      	strb	r2, [r3, #0]
 800744a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800744e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007450:	2303      	movs	r3, #3
 8007452:	633b      	str	r3, [r7, #48]	; 0x30
 8007454:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007458:	4618      	mov	r0, r3
 800745a:	f000 fb38 	bl	8007ace <_ZNSaIhEC1Ev>
 800745e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007462:	f107 0010 	add.w	r0, r7, #16
 8007466:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800746a:	ca06      	ldmia	r2, {r1, r2}
 800746c:	f000 fb3b 	bl	8007ae6 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8007470:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007474:	4618      	mov	r0, r3
 8007476:	f7fa f904 	bl	8001682 <_ZNSaIhED1Ev>
		pTxListData.push_back(ok);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	333c      	adds	r3, #60	; 0x3c
 800747e:	f107 0210 	add.w	r2, r7, #16
 8007482:	4611      	mov	r1, r2
 8007484:	4618      	mov	r0, r3
 8007486:	f000 fb4f 	bl	8007b28 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE9push_backERKS2_>

		timePre = __HAL_TIM_GET_COUNTER(htim);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	b29a      	uxth	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	839a      	strh	r2, [r3, #28]
		timeCounter = 0;
 8007498:	68f9      	ldr	r1, [r7, #12]
 800749a:	f04f 0200 	mov.w	r2, #0
 800749e:	f04f 0300 	mov.w	r3, #0
 80074a2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		totalPower = 0;
 80074a6:	68f9      	ldr	r1, [r7, #12]
 80074a8:	f04f 0200 	mov.w	r2, #0
 80074ac:	f04f 0300 	mov.w	r3, #0
 80074b0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		std::vector<uint8_t> ok = { 'O', 'K', '\n'};
 80074b4:	f107 0310 	add.w	r3, r7, #16
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fa f869 	bl	8001590 <_ZNSt6vectorIhSaIhEED1Ev>
	}

	if (memcmp(data, power, 6) == 0) {
 80074be:	f107 031c 	add.w	r3, r7, #28
 80074c2:	2206      	movs	r2, #6
 80074c4:	4619      	mov	r1, r3
 80074c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80074c8:	f003 f994 	bl	800a7f4 <memcmp>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d104      	bne.n	80074dc <_ZN6Ina21910IRQHandlerEv+0x1a0>
		flagPOWER = HAL_OK;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	769a      	strb	r2, [r3, #26]
 80074d8:	e000      	b.n	80074dc <_ZN6Ina21910IRQHandlerEv+0x1a0>
	if (pRxListData.size() < 1) return;
 80074da:	bf00      	nop
	}
}
 80074dc:	3740      	adds	r7, #64	; 0x40
 80074de:	46bd      	mov	sp, r7
 80074e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074e4:	0800ee88 	.word	0x0800ee88
 80074e8:	0800ee90 	.word	0x0800ee90
 80074ec:	0800ee98 	.word	0x0800ee98

080074f0 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      _Vector_base() = default;
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fb36 	bl	8007b6c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <_ZNSt6vectorIhSaIhEEC1Ev>:
      vector() = default;
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4618      	mov	r0, r3
 8007516:	f7ff ffeb 	bl	80074f0 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4618      	mov	r0, r3
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <_ZN6Ina2199funcStartEv>:

void Ina219::funcStart() {
 8007524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007528:	b0ad      	sub	sp, #180	; 0xb4
 800752a:	af04      	add	r7, sp, #16
 800752c:	61f8      	str	r0, [r7, #28]

	uint32_t time = __HAL_TIM_GET_COUNTER(htim);
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	std::vector<uint8_t> sendData;
 800753a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800753e:	4618      	mov	r0, r3
 8007540:	f7ff ffe3 	bl	800750a <_ZNSt6vectorIhSaIhEEC1Ev>
	sendData.push_back('T');
 8007544:	2354      	movs	r3, #84	; 0x54
 8007546:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
 800754a:	f107 038a 	add.w	r3, r7, #138	; 0x8a
 800754e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007552:	4619      	mov	r1, r3
 8007554:	4610      	mov	r0, r2
 8007556:	f000 fb19 	bl	8007b8c <_ZNSt6vectorIhSaIhEE9push_backEOh>
	sendData.push_back('E');
 800755a:	2345      	movs	r3, #69	; 0x45
 800755c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8007560:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8007564:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007568:	4619      	mov	r1, r3
 800756a:	4610      	mov	r0, r2
 800756c:	f000 fb0e 	bl	8007b8c <_ZNSt6vectorIhSaIhEE9push_backEOh>

	if (HAL_I2C_Mem_Read(hi2c, addr, INA219_REG_SHUNTVOLTAGE, I2C_MEMADD_SIZE_8BIT, pData, sizeof(pData), HAL_MAX_DELAY) != HAL_OK) return;
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	6818      	ldr	r0, [r3, #0]
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	7b1b      	ldrb	r3, [r3, #12]
 8007578:	b299      	uxth	r1, r3
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	f103 020d 	add.w	r2, r3, #13
 8007580:	f04f 33ff 	mov.w	r3, #4294967295
 8007584:	9302      	str	r3, [sp, #8]
 8007586:	2302      	movs	r3, #2
 8007588:	9301      	str	r3, [sp, #4]
 800758a:	9200      	str	r2, [sp, #0]
 800758c:	2301      	movs	r3, #1
 800758e:	2201      	movs	r2, #1
 8007590:	f7fb fafc 	bl	8002b8c <HAL_I2C_Mem_Read>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	bf14      	ite	ne
 800759a:	2301      	movne	r3, #1
 800759c:	2300      	moveq	r3, #0
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <_ZN6Ina2199funcStartEv+0x84>
 80075a4:	2400      	movs	r4, #0
 80075a6:	e189      	b.n	80078bc <_ZN6Ina2199funcStartEv+0x398>
	ShuntVol = (((uint16_t)pData[0]) << 8) | ((uint16_t)pData[1]);
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	7b5b      	ldrb	r3, [r3, #13]
 80075ac:	021b      	lsls	r3, r3, #8
 80075ae:	b21a      	sxth	r2, r3
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	7b9b      	ldrb	r3, [r3, #14]
 80075b4:	b21b      	sxth	r3, r3
 80075b6:	4313      	orrs	r3, r2
 80075b8:	b21b      	sxth	r3, r3
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	69fa      	ldr	r2, [r7, #28]
 80075be:	8253      	strh	r3, [r2, #18]

	if (HAL_I2C_Mem_Read(hi2c, addr, INA219_REG_BUSVOLTAGE, I2C_MEMADD_SIZE_8BIT, pData, sizeof(pData), HAL_MAX_DELAY) != HAL_OK) return;
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	6818      	ldr	r0, [r3, #0]
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	7b1b      	ldrb	r3, [r3, #12]
 80075c8:	b299      	uxth	r1, r3
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	f103 020d 	add.w	r2, r3, #13
 80075d0:	f04f 33ff 	mov.w	r3, #4294967295
 80075d4:	9302      	str	r3, [sp, #8]
 80075d6:	2302      	movs	r3, #2
 80075d8:	9301      	str	r3, [sp, #4]
 80075da:	9200      	str	r2, [sp, #0]
 80075dc:	2301      	movs	r3, #1
 80075de:	2202      	movs	r2, #2
 80075e0:	f7fb fad4 	bl	8002b8c <HAL_I2C_Mem_Read>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	bf14      	ite	ne
 80075ea:	2301      	movne	r3, #1
 80075ec:	2300      	moveq	r3, #0
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <_ZN6Ina2199funcStartEv+0xd4>
 80075f4:	2400      	movs	r4, #0
 80075f6:	e161      	b.n	80078bc <_ZN6Ina2199funcStartEv+0x398>
	if ((pData[1] & 0x01) == 0x01) return;
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	7b9b      	ldrb	r3, [r3, #14]
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <_ZN6Ina2199funcStartEv+0xe4>
 8007604:	2400      	movs	r4, #0
 8007606:	e159      	b.n	80078bc <_ZN6Ina2199funcStartEv+0x398>
	if ((pData[1] & 0x02) == 0x00) return;
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	7b9b      	ldrb	r3, [r3, #14]
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <_ZN6Ina2199funcStartEv+0xf4>
 8007614:	2400      	movs	r4, #0
 8007616:	e151      	b.n	80078bc <_ZN6Ina2199funcStartEv+0x398>
	BusVol = (((uint16_t)pData[0]) << 5) | ((uint16_t)pData[1] >> 3);
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	7b5b      	ldrb	r3, [r3, #13]
 800761c:	015b      	lsls	r3, r3, #5
 800761e:	b21a      	sxth	r2, r3
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	7b9b      	ldrb	r3, [r3, #14]
 8007624:	08db      	lsrs	r3, r3, #3
 8007626:	b2db      	uxtb	r3, r3
 8007628:	b21b      	sxth	r3, r3
 800762a:	4313      	orrs	r3, r2
 800762c:	b21b      	sxth	r3, r3
 800762e:	b29b      	uxth	r3, r3
 8007630:	69fa      	ldr	r2, [r7, #28]
 8007632:	8213      	strh	r3, [r2, #16]
	sendData.push_back(BusVol);
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	8a1b      	ldrh	r3, [r3, #16]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 800763e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007642:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007646:	4619      	mov	r1, r3
 8007648:	4610      	mov	r0, r2
 800764a:	f000 fa9f 	bl	8007b8c <_ZNSt6vectorIhSaIhEE9push_backEOh>
	sendData.push_back(BusVol >> 8);
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	8a1b      	ldrh	r3, [r3, #16]
 8007652:	0a1b      	lsrs	r3, r3, #8
 8007654:	b29b      	uxth	r3, r3
 8007656:	b2db      	uxtb	r3, r3
 8007658:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 800765c:	f107 038d 	add.w	r3, r7, #141	; 0x8d
 8007660:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007664:	4619      	mov	r1, r3
 8007666:	4610      	mov	r0, r2
 8007668:	f000 fa90 	bl	8007b8c <_ZNSt6vectorIhSaIhEE9push_backEOh>

	if (HAL_I2C_Mem_Read(hi2c, addr, INA219_REG_POWER, I2C_MEMADD_SIZE_8BIT, pData, 2, HAL_MAX_DELAY) != HAL_OK) return;
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	6818      	ldr	r0, [r3, #0]
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	7b1b      	ldrb	r3, [r3, #12]
 8007674:	b299      	uxth	r1, r3
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	f103 020d 	add.w	r2, r3, #13
 800767c:	f04f 33ff 	mov.w	r3, #4294967295
 8007680:	9302      	str	r3, [sp, #8]
 8007682:	2302      	movs	r3, #2
 8007684:	9301      	str	r3, [sp, #4]
 8007686:	9200      	str	r2, [sp, #0]
 8007688:	2301      	movs	r3, #1
 800768a:	2203      	movs	r2, #3
 800768c:	f7fb fa7e 	bl	8002b8c <HAL_I2C_Mem_Read>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	bf14      	ite	ne
 8007696:	2301      	movne	r3, #1
 8007698:	2300      	moveq	r3, #0
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <_ZN6Ina2199funcStartEv+0x180>
 80076a0:	2400      	movs	r4, #0
 80076a2:	e10b      	b.n	80078bc <_ZN6Ina2199funcStartEv+0x398>
	Power = (((uint16_t)pData[0]) << 8) | ((uint16_t)pData[1]);
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	7b5b      	ldrb	r3, [r3, #13]
 80076a8:	021b      	lsls	r3, r3, #8
 80076aa:	b21a      	sxth	r2, r3
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	7b9b      	ldrb	r3, [r3, #14]
 80076b0:	b21b      	sxth	r3, r3
 80076b2:	4313      	orrs	r3, r2
 80076b4:	b21b      	sxth	r3, r3
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	69fa      	ldr	r2, [r7, #28]
 80076ba:	8293      	strh	r3, [r2, #20]
	sendData.push_back(pData[1]);
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	330e      	adds	r3, #14
 80076c0:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80076c4:	4619      	mov	r1, r3
 80076c6:	4610      	mov	r0, r2
 80076c8:	f000 fa71 	bl	8007bae <_ZNSt6vectorIhSaIhEE9push_backERKh>
	sendData.push_back(pData[0]);
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	330d      	adds	r3, #13
 80076d0:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80076d4:	4619      	mov	r1, r3
 80076d6:	4610      	mov	r0, r2
 80076d8:	f000 fa69 	bl	8007bae <_ZNSt6vectorIhSaIhEE9push_backERKh>

	if (HAL_I2C_Mem_Read(hi2c, addr, INA219_REG_CURRENT, I2C_MEMADD_SIZE_8BIT, pData, 2, HAL_MAX_DELAY) != HAL_OK) return;
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	6818      	ldr	r0, [r3, #0]
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	7b1b      	ldrb	r3, [r3, #12]
 80076e4:	b299      	uxth	r1, r3
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	f103 020d 	add.w	r2, r3, #13
 80076ec:	f04f 33ff 	mov.w	r3, #4294967295
 80076f0:	9302      	str	r3, [sp, #8]
 80076f2:	2302      	movs	r3, #2
 80076f4:	9301      	str	r3, [sp, #4]
 80076f6:	9200      	str	r2, [sp, #0]
 80076f8:	2301      	movs	r3, #1
 80076fa:	2204      	movs	r2, #4
 80076fc:	f7fb fa46 	bl	8002b8c <HAL_I2C_Mem_Read>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	bf14      	ite	ne
 8007706:	2301      	movne	r3, #1
 8007708:	2300      	moveq	r3, #0
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <_ZN6Ina2199funcStartEv+0x1f0>
 8007710:	2400      	movs	r4, #0
 8007712:	e0d3      	b.n	80078bc <_ZN6Ina2199funcStartEv+0x398>
	Current = (((uint16_t)pData[0]) << 8) | ((uint16_t)pData[1]);
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	7b5b      	ldrb	r3, [r3, #13]
 8007718:	021b      	lsls	r3, r3, #8
 800771a:	b21a      	sxth	r2, r3
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	7b9b      	ldrb	r3, [r3, #14]
 8007720:	b21b      	sxth	r3, r3
 8007722:	4313      	orrs	r3, r2
 8007724:	b21b      	sxth	r3, r3
 8007726:	b29b      	uxth	r3, r3
 8007728:	69fa      	ldr	r2, [r7, #28]
 800772a:	82d3      	strh	r3, [r2, #22]
	sendData.push_back(pData[1]);
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	330e      	adds	r3, #14
 8007730:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007734:	4619      	mov	r1, r3
 8007736:	4610      	mov	r0, r2
 8007738:	f000 fa39 	bl	8007bae <_ZNSt6vectorIhSaIhEE9push_backERKh>
	sendData.push_back(pData[0]);
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	330d      	adds	r3, #13
 8007740:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007744:	4619      	mov	r1, r3
 8007746:	4610      	mov	r0, r2
 8007748:	f000 fa31 	bl	8007bae <_ZNSt6vectorIhSaIhEE9push_backERKh>

	sendData.push_back('\r');
 800774c:	230d      	movs	r3, #13
 800774e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8007752:	f107 038e 	add.w	r3, r7, #142	; 0x8e
 8007756:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800775a:	4619      	mov	r1, r3
 800775c:	4610      	mov	r0, r2
 800775e:	f000 fa15 	bl	8007b8c <_ZNSt6vectorIhSaIhEE9push_backEOh>
	sendData.push_back('\n');
 8007762:	230a      	movs	r3, #10
 8007764:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8007768:	f107 038f 	add.w	r3, r7, #143	; 0x8f
 800776c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007770:	4619      	mov	r1, r3
 8007772:	4610      	mov	r0, r2
 8007774:	f000 fa0a 	bl	8007b8c <_ZNSt6vectorIhSaIhEE9push_backEOh>

	pTxListData.push_back(sendData);
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800777e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007782:	4619      	mov	r1, r3
 8007784:	4610      	mov	r0, r2
 8007786:	f000 f9cf 	bl	8007b28 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE9push_backERKS2_>

	uint64_t time_space;
	if (time < timePre) time_space = time + (0xffffU - timePre);
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	8b9b      	ldrh	r3, [r3, #28]
 800778e:	461a      	mov	r2, r3
 8007790:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007794:	4293      	cmp	r3, r2
 8007796:	d210      	bcs.n	80077ba <_ZN6Ina2199funcStartEv+0x296>
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	8b9b      	ldrh	r3, [r3, #28]
 800779c:	461a      	mov	r2, r3
 800779e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077a2:	1a9b      	subs	r3, r3, r2
 80077a4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80077a8:	33ff      	adds	r3, #255	; 0xff
 80077aa:	2200      	movs	r2, #0
 80077ac:	60bb      	str	r3, [r7, #8]
 80077ae:	60fa      	str	r2, [r7, #12]
 80077b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077b4:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 80077b8:	e00c      	b.n	80077d4 <_ZN6Ina2199funcStartEv+0x2b0>
	else time_space = time - timePre;
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	8b9b      	ldrh	r3, [r3, #28]
 80077be:	461a      	mov	r2, r3
 80077c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077c4:	1a9b      	subs	r3, r3, r2
 80077c6:	2200      	movs	r2, #0
 80077c8:	603b      	str	r3, [r7, #0]
 80077ca:	607a      	str	r2, [r7, #4]
 80077cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077d0:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	timePre = time;
 80077d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077d8:	b29a      	uxth	r2, r3
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	839a      	strh	r2, [r3, #28]

	timeCounter += time_space;
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80077e4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80077e8:	1886      	adds	r6, r0, r2
 80077ea:	613e      	str	r6, [r7, #16]
 80077ec:	eb41 0303 	adc.w	r3, r1, r3
 80077f0:	617b      	str	r3, [r7, #20]
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80077f8:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
	totalPower += time_space * Power;
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007802:	69f9      	ldr	r1, [r7, #28]
 8007804:	8a89      	ldrh	r1, [r1, #20]
 8007806:	b289      	uxth	r1, r1
 8007808:	2000      	movs	r0, #0
 800780a:	4688      	mov	r8, r1
 800780c:	4681      	mov	r9, r0
 800780e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8007812:	fb09 f001 	mul.w	r0, r9, r1
 8007816:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800781a:	fb08 f101 	mul.w	r1, r8, r1
 800781e:	4401      	add	r1, r0
 8007820:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8007824:	fba0 4508 	umull	r4, r5, r0, r8
 8007828:	4429      	add	r1, r5
 800782a:	460d      	mov	r5, r1
 800782c:	eb12 0a04 	adds.w	sl, r2, r4
 8007830:	eb43 0b05 	adc.w	fp, r3, r5
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	e9c3 ab0c 	strd	sl, fp, [r3, #48]	; 0x30
	if (timeCounter < timeMax) return;
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007846:	4290      	cmp	r0, r2
 8007848:	eb71 0303 	sbcs.w	r3, r1, r3
 800784c:	d201      	bcs.n	8007852 <_ZN6Ina2199funcStartEv+0x32e>
 800784e:	2400      	movs	r4, #0
 8007850:	e034      	b.n	80078bc <_ZN6Ina2199funcStartEv+0x398>

	uint8_t total[80];
	//	sprintf((char* )total, "Total of POWER: 0x%016llX\n", totalPower);
	sprintf((char* )total, "Total of Power: %llu\nTotal of Time: %llu\n", totalPower, timeCounter);
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800785e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8007862:	e9cd 2300 	strd	r2, r3, [sp]
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	4919      	ldr	r1, [pc, #100]	; (80078d0 <_ZN6Ina2199funcStartEv+0x3ac>)
 800786c:	4620      	mov	r0, r4
 800786e:	f003 f863 	bl	800a938 <sprintf>
	std::vector<uint8_t> total_v(total, total + strlen((char* ) total));
 8007872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007876:	4618      	mov	r0, r3
 8007878:	f7f8 fc6a 	bl	8000150 <strlen>
 800787c:	4602      	mov	r2, r0
 800787e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007882:	189c      	adds	r4, r3, r2
 8007884:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007888:	4618      	mov	r0, r3
 800788a:	f000 f920 	bl	8007ace <_ZNSaIhEC1Ev>
 800788e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007892:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8007896:	f107 0020 	add.w	r0, r7, #32
 800789a:	4622      	mov	r2, r4
 800789c:	f000 f9ac 	bl	8007bf8 <_ZNSt6vectorIhSaIhEEC1IPhvEET_S4_RKS0_>
 80078a0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7f9 feec 	bl	8001682 <_ZNSaIhED1Ev>
	//	pTxListData.push_back(total_v);

	flagSTART = HAL_ERROR;
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	2201      	movs	r2, #1
 80078ae:	765a      	strb	r2, [r3, #25]
	std::vector<uint8_t> total_v(total, total + strlen((char* ) total));
 80078b0:	f107 0320 	add.w	r3, r7, #32
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7f9 fe6b 	bl	8001590 <_ZNSt6vectorIhSaIhEED1Ev>
 80078ba:	2401      	movs	r4, #1
 80078bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7f9 fe65 	bl	8001590 <_ZNSt6vectorIhSaIhEED1Ev>
 80078c6:	2c01      	cmp	r4, #1
}
 80078c8:	37a4      	adds	r7, #164	; 0xa4
 80078ca:	46bd      	mov	sp, r7
 80078cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d0:	0800ee9c 	.word	0x0800ee9c

080078d4 <_ZN6Ina2199funcPowerEv>:

void Ina219:: funcPower() {
 80078d4:	b590      	push	{r4, r7, lr}
 80078d6:	b09d      	sub	sp, #116	; 0x74
 80078d8:	af02      	add	r7, sp, #8
 80078da:	6078      	str	r0, [r7, #4]
	uint8_t total[80];
	sprintf((char* )total, "Total of Power: %llu\nTotal of Time: %llu\n", totalPower, timeCounter);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80078e8:	f107 0414 	add.w	r4, r7, #20
 80078ec:	e9cd 2300 	strd	r2, r3, [sp]
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	4915      	ldr	r1, [pc, #84]	; (800794c <_ZN6Ina2199funcPowerEv+0x78>)
 80078f6:	4620      	mov	r0, r4
 80078f8:	f003 f81e 	bl	800a938 <sprintf>
	std::vector<uint8_t> total_v(total, total + strlen((char* ) total));
 80078fc:	f107 0314 	add.w	r3, r7, #20
 8007900:	4618      	mov	r0, r3
 8007902:	f7f8 fc25 	bl	8000150 <strlen>
 8007906:	4602      	mov	r2, r0
 8007908:	f107 0314 	add.w	r3, r7, #20
 800790c:	189c      	adds	r4, r3, r2
 800790e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007912:	4618      	mov	r0, r3
 8007914:	f000 f8db 	bl	8007ace <_ZNSaIhEC1Ev>
 8007918:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800791c:	f107 0114 	add.w	r1, r7, #20
 8007920:	f107 0008 	add.w	r0, r7, #8
 8007924:	4622      	mov	r2, r4
 8007926:	f000 f967 	bl	8007bf8 <_ZNSt6vectorIhSaIhEEC1IPhvEET_S4_RKS0_>
 800792a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800792e:	4618      	mov	r0, r3
 8007930:	f7f9 fea7 	bl	8001682 <_ZNSaIhED1Ev>
	flagPOWER = HAL_ERROR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	769a      	strb	r2, [r3, #26]
	std::vector<uint8_t> total_v(total, total + strlen((char* ) total));
 800793a:	f107 0308 	add.w	r3, r7, #8
 800793e:	4618      	mov	r0, r3
 8007940:	f7f9 fe26 	bl	8001590 <_ZNSt6vectorIhSaIhEED1Ev>
}
 8007944:	bf00      	nop
 8007946:	376c      	adds	r7, #108	; 0x6c
 8007948:	46bd      	mov	sp, r7
 800794a:	bd90      	pop	{r4, r7, pc}
 800794c:	0800ee9c 	.word	0x0800ee9c

08007950 <_ZN6Ina21911setListDataEPSt6vectorIhSaIhEE>:

//float Ina219::getCurrent() {
//	return (float)Current * 4096U * 100 / Calibration;
//}

void Ina219::setListData(std::vector<uint8_t>* data) {
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
	pRxListData.push_back(*data);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	3364      	adds	r3, #100	; 0x64
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	4618      	mov	r0, r3
 8007962:	f000 f8e1 	bl	8007b28 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE9push_backERKS2_>
}
 8007966:	bf00      	nop
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <_ZN6Ina21911getListDataEv>:
std::deque<std::vector<uint8_t>>* Ina219::getListData(){
 800796e:	b480      	push	{r7}
 8007970:	b083      	sub	sp, #12
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
	return &pTxListData;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	333c      	adds	r3, #60	; 0x3c
}
 800797a:	4618      	mov	r0, r3
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	bc80      	pop	{r7}
 8007982:	4770      	bx	lr

08007984 <_ZN6Ina21917memTxCpltCallbackEP17I2C_HandleTypeDef>:

void Ina219::memTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
	if (this->hi2c->Instance != hi2c->Instance) return;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	429a      	cmp	r2, r3
 800799a:	d104      	bne.n	80079a6 <_ZN6Ina21917memTxCpltCallbackEP17I2C_HandleTypeDef+0x22>
	flagTxDone = HAL_OK;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80079a4:	e000      	b.n	80079a8 <_ZN6Ina21917memTxCpltCallbackEP17I2C_HandleTypeDef+0x24>
	if (this->hi2c->Instance != hi2c->Instance) return;
 80079a6:	bf00      	nop
}
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bc80      	pop	{r7}
 80079ae:	4770      	bx	lr

080079b0 <_ZN6Ina21913errorCallbackEP17I2C_HandleTypeDef>:

void Ina219::errorCallback(I2C_HandleTypeDef *hi2c) {
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
	if (this->hi2c->Instance != hi2c->Instance) return;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d10a      	bne.n	80079de <_ZN6Ina21913errorCallbackEP17I2C_HandleTypeDef+0x2e>
	if (stage <= 3) stage--;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	7e1b      	ldrb	r3, [r3, #24]
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d807      	bhi.n	80079e0 <_ZN6Ina21913errorCallbackEP17I2C_HandleTypeDef+0x30>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	7e1b      	ldrb	r3, [r3, #24]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	761a      	strb	r2, [r3, #24]
 80079dc:	e000      	b.n	80079e0 <_ZN6Ina21913errorCallbackEP17I2C_HandleTypeDef+0x30>
	if (this->hi2c->Instance != hi2c->Instance) return;
 80079de:	bf00      	nop
}
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bc80      	pop	{r7}
 80079e6:	4770      	bx	lr

080079e8 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f92e 	bl	8007c52 <_ZNSaISt6vectorIhSaIhEEED1Ev>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4618      	mov	r0, r3
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EEC1Ev>:
      _Deque_base()
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 f911 	bl	8007c32 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8007a10:	2100      	movs	r1, #0
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f929 	bl	8007c6a <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE17_M_initialize_mapEj>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b082      	sub	sp, #8
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d010      	beq.n	8007a54 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f979 	bl	8007d36 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE16_M_destroy_nodesEPPS2_S6_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6819      	ldr	r1, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f98b 	bl	8007d6a <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE17_M_deallocate_mapEPPS2_j>
    }
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff ffc6 	bl	80079e8 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE11_Deque_implD1Ev>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EED1Ev>:
      ~deque()
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b08a      	sub	sp, #40	; 0x28
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8007a6e:	f107 0308 	add.w	r3, r7, #8
 8007a72:	6879      	ldr	r1, [r7, #4]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 f994 	bl	8007da2 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE5beginEv>
 8007a7a:	f107 0318 	add.w	r3, r7, #24
 8007a7e:	6879      	ldr	r1, [r7, #4]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 f99d 	bl	8007dc0 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE3endEv>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7f9 fc61 	bl	8001350 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	f107 0218 	add.w	r2, r7, #24
 8007a94:	f107 0108 	add.w	r1, r7, #8
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f9a0 	bl	8007dde <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7ff ffbe 	bl	8007a22 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EED1Ev>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3728      	adds	r7, #40	; 0x28
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <_ZNSt6vectorIhSaIhEE4dataEv>:
      /**
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f9ac 	bl	8007e1c <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f9ab 	bl	8007e32 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>:
      vector(initializer_list<value_type> __l,
 8007ae6:	b5b0      	push	{r4, r5, r7, lr}
 8007ae8:	b086      	sub	sp, #24
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	60f8      	str	r0, [r7, #12]
 8007aee:	1d38      	adds	r0, r7, #4
 8007af0:	e880 0006 	stmia.w	r0, {r1, r2}
 8007af4:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 f9a3 	bl	8007e46 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8007b00:	1d3b      	adds	r3, r7, #4
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 f9ae 	bl	8007e64 <_ZNKSt16initializer_listIhE5beginEv>
 8007b08:	4604      	mov	r4, r0
 8007b0a:	1d3b      	adds	r3, r7, #4
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 f9b4 	bl	8007e7a <_ZNKSt16initializer_listIhE3endEv>
 8007b12:	4602      	mov	r2, r0
 8007b14:	462b      	mov	r3, r5
 8007b16:	4621      	mov	r1, r4
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 f9bf 	bl	8007e9c <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag>
      }
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	4618      	mov	r0, r3
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bdb0      	pop	{r4, r5, r7, pc}

08007b28 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE9push_backERKS2_>:
      push_back(const value_type& __x)
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	3b0c      	subs	r3, #12
	if (this->_M_impl._M_finish._M_cur
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d00d      	beq.n	8007b5c <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE9push_backERKS2_+0x34>
	    _Alloc_traits::construct(this->_M_impl,
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	f000 f9df 	bl	8007f0c <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	f103 020c 	add.w	r2, r3, #12
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	619a      	str	r2, [r3, #24]
      }
 8007b5a:	e003      	b.n	8007b64 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE9push_backERKS2_+0x3c>
	  _M_push_back_aux(__x);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f9e8 	bl	8007f34 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>
      }
 8007b64:	bf00      	nop
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff ffaa 	bl	8007ace <_ZNSaIhEC1Ev>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 fa1d 	bl	8007fbc <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4618      	mov	r0, r3
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <_ZNSt6vectorIhSaIhEE9push_backEOh>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8007b96:	6838      	ldr	r0, [r7, #0]
 8007b98:	f000 fa23 	bl	8007fe2 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fa28 	bl	8007ff6 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
 8007ba6:	bf00      	nop
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <_ZNSt6vectorIhSaIhEE9push_backERKh>:
      push_back(const value_type& __x)
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d00c      	beq.n	8007bde <_ZNSt6vectorIhSaIhEE9push_backERKh+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	f000 fa40 	bl	8008052 <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	605a      	str	r2, [r3, #4]
      }
 8007bdc:	e008      	b.n	8007bf0 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x42>
	  _M_realloc_insert(end(), __x);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fa4a 	bl	8008078 <_ZNSt6vectorIhSaIhEE3endEv>
 8007be4:	4603      	mov	r3, r0
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fa6a 	bl	80080c4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
      }
 8007bf0:	bf00      	nop
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <_ZNSt6vectorIhSaIhEEC1IPhvEET_S4_RKS0_>:
	vector(_InputIterator __first, _InputIterator __last,
 8007bf8:	b5b0      	push	{r4, r5, r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	603b      	str	r3, [r7, #0]
	: _Base(__a)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 f91b 	bl	8007e46 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
	  _M_range_initialize(__first, __last,
 8007c10:	68bc      	ldr	r4, [r7, #8]
			      std::__iterator_category(__first));
 8007c12:	f107 0308 	add.w	r3, r7, #8
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 fb0c 	bl	8008234 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
	  _M_range_initialize(__first, __last,
 8007c1c:	462b      	mov	r3, r5
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	4621      	mov	r1, r4
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 fb10 	bl	8008248 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPhEEvT_S4_St20forward_iterator_tag>
	}
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3718      	adds	r7, #24
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bdb0      	pop	{r4, r5, r7, pc}

08007c32 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b082      	sub	sp, #8
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fb3c 	bl	80082b8 <_ZNSaISt6vectorIhSaIhEEEC1Ev>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fb44 	bl	80082d0 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE16_Deque_impl_dataC1Ev>
	{ }
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <_ZNSaISt6vectorIhSaIhEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b082      	sub	sp, #8
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fb51 	bl	8008302 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEED1Ev>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4618      	mov	r0, r3
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8007c6a:	b590      	push	{r4, r7, lr}
 8007c6c:	b089      	sub	sp, #36	; 0x24
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8007c74:	200c      	movs	r0, #12
 8007c76:	f7f9 f88b 	bl	8000d90 <_ZSt16__deque_buf_sizej>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c82:	3301      	adds	r3, #1
 8007c84:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8007c86:	2308      	movs	r3, #8
 8007c88:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	3302      	adds	r3, #2
 8007c8e:	613b      	str	r3, [r7, #16]
 8007c90:	f107 0210 	add.w	r2, r7, #16
 8007c94:	f107 030c 	add.w	r3, r7, #12
 8007c98:	4611      	mov	r1, r2
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 fb3b 	bl	8008316 <_ZSt3maxIjERKT_S2_S2_>
 8007ca0:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fb44 	bl	800833c <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE15_M_allocate_mapEj>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6859      	ldr	r1, [r3, #4]
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	1acb      	subs	r3, r1, r3
 8007cc6:	085b      	lsrs	r3, r3, #1
 8007cc8:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8007cca:	4413      	add	r3, r2
 8007ccc:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	69ba      	ldr	r2, [r7, #24]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	69b9      	ldr	r1, [r7, #24]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fb4a 	bl	8008376 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE15_M_create_nodesEPPS2_S6_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	69b9      	ldr	r1, [r7, #24]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7f9 fbb5 	bl	8001458 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f103 0218 	add.w	r2, r3, #24
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	3b04      	subs	r3, #4
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	f7f9 fbac 	bl	8001458 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	68da      	ldr	r2, [r3, #12]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8007d0c:	200c      	movs	r0, #12
 8007d0e:	f7f9 f83f 	bl	8000d90 <_ZSt16__deque_buf_sizej>
 8007d12:	4602      	mov	r2, r0
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d1a:	fb01 f202 	mul.w	r2, r1, r2
 8007d1e:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8007d20:	4613      	mov	r3, r2
 8007d22:	005b      	lsls	r3, r3, #1
 8007d24:	4413      	add	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	619a      	str	r2, [r3, #24]
    }
 8007d2e:	bf00      	nop
 8007d30:	3724      	adds	r7, #36	; 0x24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd90      	pop	{r4, r7, pc}

08007d36 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE16_M_destroy_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b086      	sub	sp, #24
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	617b      	str	r3, [r7, #20]
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d209      	bcs.n	8007d62 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x2c>
	_M_deallocate_node(*__n);
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4619      	mov	r1, r3
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f7f9 fb6c 	bl	8001432 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE18_M_deallocate_nodeEPS2_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	617b      	str	r3, [r7, #20]
 8007d60:	e7f1      	b.n	8007d46 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x10>
    }
 8007d62:	bf00      	nop
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE17_M_deallocate_mapEPPS2_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b086      	sub	sp, #24
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8007d76:	f107 0314 	add.w	r3, r7, #20
 8007d7a:	68f9      	ldr	r1, [r7, #12]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 fb14 	bl	80083aa <_ZNKSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8007d82:	f107 0314 	add.w	r3, r7, #20
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	68b9      	ldr	r1, [r7, #8]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 fb2a 	bl	80083e4 <_ZNSt16allocator_traitsISaIPSt6vectorIhSaIhEEEE10deallocateERS4_PS3_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8007d90:	f107 0314 	add.w	r3, r7, #20
 8007d94:	4618      	mov	r0, r3
 8007d96:	f000 fb19 	bl	80083cc <_ZNSaIPSt6vectorIhSaIhEEED1Ev>
      }
 8007d9a:	bf00      	nop
 8007d9c:	3718      	adds	r7, #24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b082      	sub	sp, #8
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	3308      	adds	r3, #8
 8007db0:	4619      	mov	r1, r3
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7f9 fb6c 	bl	8001490 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EC1ERKS5_>
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	3318      	adds	r3, #24
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7f9 fb5d 	bl	8001490 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EC1ERKS5_>
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b08c      	sub	sp, #48	; 0x30
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	60f8      	str	r0, [r7, #12]
 8007de6:	60b9      	str	r1, [r7, #8]
 8007de8:	607a      	str	r2, [r7, #4]
 8007dea:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
 8007dec:	f107 0310 	add.w	r3, r7, #16
 8007df0:	68b9      	ldr	r1, [r7, #8]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7f9 fb4c 	bl	8001490 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EC1ERKS5_>
 8007df8:	f107 0320 	add.w	r3, r7, #32
 8007dfc:	6879      	ldr	r1, [r7, #4]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7f9 fb46 	bl	8001490 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EC1ERKS5_>
 8007e04:	f107 0220 	add.w	r2, r7, #32
 8007e08:	f107 0310 	add.w	r3, r7, #16
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f000 faf7 	bl	8008402 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE19_M_destroy_data_auxESt15_Deque_iteratorIS2_RS2_PS2_ES8_>
      }
 8007e14:	bf00      	nop
 8007e16:	3730      	adds	r7, #48	; 0x30
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bc80      	pop	{r7}
 8007e30:	4770      	bx	lr

08007e32 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bc80      	pop	{r7}
 8007e44:	4770      	bx	lr

08007e46 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 fb32 	bl	80084be <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <_ZNKSt16initializer_listIhE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4618      	mov	r0, r3
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bc80      	pop	{r7}
 8007e78:	4770      	bx	lr

08007e7a <_ZNKSt16initializer_listIhE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8007e7a:	b590      	push	{r4, r7, lr}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7ff ffee 	bl	8007e64 <_ZNKSt16initializer_listIhE5beginEv>
 8007e88:	4604      	mov	r4, r0
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fb29 	bl	80084e2 <_ZNKSt16initializer_listIhE4sizeEv>
 8007e90:	4603      	mov	r3, r0
 8007e92:	4423      	add	r3, r4
 8007e94:	4618      	mov	r0, r3
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd90      	pop	{r4, r7, pc}

08007e9c <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8007e9c:	b590      	push	{r4, r7, lr}
 8007e9e:	b087      	sub	sp, #28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	68b8      	ldr	r0, [r7, #8]
 8007eae:	f000 fb23 	bl	80084f8 <_ZSt8distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8007eb6:	68fc      	ldr	r4, [r7, #12]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7f9 fbb6 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6978      	ldr	r0, [r7, #20]
 8007ec6:	f000 fb2b 	bl	8008520 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	4619      	mov	r1, r3
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f000 fb4e 	bl	8008570 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	441a      	add	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7f9 fb9d 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8007ef2:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8007ef4:	4622      	mov	r2, r4
 8007ef6:	6879      	ldr	r1, [r7, #4]
 8007ef8:	68b8      	ldr	r0, [r7, #8]
 8007efa:	f000 fb4d 	bl	8008598 <_ZSt22__uninitialized_copy_aIPKhPhhET0_T_S4_S3_RSaIT1_E>
 8007efe:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	605a      	str	r2, [r3, #4]
	}
 8007f04:	bf00      	nop
 8007f06:	371c      	adds	r7, #28
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd90      	pop	{r4, r7, pc}

08007f0c <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fb4e 	bl	80085ba <_ZSt7forwardIRKSt6vectorIhSaIhEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	461a      	mov	r2, r3
 8007f22:	68b9      	ldr	r1, [r7, #8]
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f000 fb52 	bl	80085ce <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
	}
 8007f2a:	bf00      	nop
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
	...

08007f34 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8007f34:	b5b0      	push	{r4, r5, r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7f9 f97d 	bl	800123e <_ZNKSt5dequeISt6vectorIhSaIhEESaIS2_EE4sizeEv>
 8007f44:	4604      	mov	r4, r0
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fb59 	bl	80085fe <_ZNKSt5dequeISt6vectorIhSaIhEESaIS2_EE8max_sizeEv>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	429c      	cmp	r4, r3
 8007f50:	bf0c      	ite	eq
 8007f52:	2301      	moveq	r3, #1
 8007f54:	2300      	movne	r3, #0
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d002      	beq.n	8007f62 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8007f5c:	4816      	ldr	r0, [pc, #88]	; (8007fb8 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x84>)
 8007f5e:	f002 f9b3 	bl	800a2c8 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8007f62:	2101      	movs	r1, #1
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fb5b 	bl	8008620 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f70:	1d1c      	adds	r4, r3, #4
 8007f72:	4610      	mov	r0, r2
 8007f74:	f000 fb6f 	bl	8008656 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE16_M_allocate_nodeEv>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8007f7c:	687c      	ldr	r4, [r7, #4]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	699d      	ldr	r5, [r3, #24]
 8007f82:	6838      	ldr	r0, [r7, #0]
 8007f84:	f000 fb19 	bl	80085ba <_ZSt7forwardIRKSt6vectorIhSaIhEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	4629      	mov	r1, r5
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f7ff ffbc 	bl	8007f0c <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f103 0218 	add.w	r2, r3, #24
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	4610      	mov	r0, r2
 8007fa4:	f7f9 fa58 	bl	8001458 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_E11_M_set_nodeEPS4_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	69da      	ldr	r2, [r3, #28]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	619a      	str	r2, [r3, #24]
      }
 8007fb0:	bf00      	nop
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8007fb8:	0800eec8 	.word	0x0800eec8

08007fbc <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	605a      	str	r2, [r3, #4]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	609a      	str	r2, [r3, #8]
	{ }
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bc80      	pop	{r7}
 8007fe0:	4770      	bx	lr

08007fe2 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8007fe2:	b480      	push	{r7}
 8007fe4:	b083      	sub	sp, #12
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4618      	mov	r0, r3
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bc80      	pop	{r7}
 8007ff4:	4770      	bx	lr

08007ff6 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8007ff6:	b5b0      	push	{r4, r5, r7, lr}
 8007ff8:	b082      	sub	sp, #8
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685a      	ldr	r2, [r3, #4]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	429a      	cmp	r2, r3
 800800a:	d011      	beq.n	8008030 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800800c:	687c      	ldr	r4, [r7, #4]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685d      	ldr	r5, [r3, #4]
 8008012:	6838      	ldr	r0, [r7, #0]
 8008014:	f000 fb31 	bl	800867a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8008018:	4603      	mov	r3, r0
 800801a:	461a      	mov	r2, r3
 800801c:	4629      	mov	r1, r5
 800801e:	4620      	mov	r0, r4
 8008020:	f000 fb35 	bl	800868e <_ZNSt16allocator_traitsISaIhEE9constructIhJhEEEvRS0_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	1c5a      	adds	r2, r3, #1
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 800802e:	e00c      	b.n	800804a <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f821 	bl	8008078 <_ZNSt6vectorIhSaIhEE3endEv>
 8008036:	4604      	mov	r4, r0
 8008038:	6838      	ldr	r0, [r7, #0]
 800803a:	f000 fb1e 	bl	800867a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800803e:	4603      	mov	r3, r0
 8008040:	461a      	mov	r2, r3
 8008042:	4621      	mov	r1, r4
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fb35 	bl	80086b4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
      }
 800804a:	bf00      	nop
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bdb0      	pop	{r4, r5, r7, pc}

08008052 <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	60f8      	str	r0, [r7, #12]
 800805a:	60b9      	str	r1, [r7, #8]
 800805c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fbe0 	bl	8008824 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8008064:	4603      	mov	r3, r0
 8008066:	461a      	mov	r2, r3
 8008068:	68b9      	ldr	r1, [r7, #8]
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f000 fbe4 	bl	8008838 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>
	}
 8008070:	bf00      	nop
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	1d1a      	adds	r2, r3, #4
 8008084:	f107 030c 	add.w	r3, r7, #12
 8008088:	4611      	mov	r1, r2
 800808a:	4618      	mov	r0, r3
 800808c:	f000 fbeb 	bl	8008866 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>:
      _S_use_relocate()
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 f805 	bl	80080b0 <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80080a6:	4603      	mov	r3, r0
      }
 80080a8:	4618      	mov	r0, r3
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80080b8:	2301      	movs	r3, #1
      }
 80080ba:	4618      	mov	r0, r3
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	bc80      	pop	{r7}
 80080c2:	4770      	bx	lr

080080c4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80080c4:	b5b0      	push	{r4, r5, r7, lr}
 80080c6:	b08c      	sub	sp, #48	; 0x30
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80080d0:	4a57      	ldr	r2, [pc, #348]	; (8008230 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x16c>)
 80080d2:	2101      	movs	r1, #1
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f000 fbd5 	bl	8008884 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80080da:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f000 fc12 	bl	8008912 <_ZNSt6vectorIhSaIhEE5beginEv>
 80080ee:	4603      	mov	r3, r0
 80080f0:	617b      	str	r3, [r7, #20]
 80080f2:	f107 0214 	add.w	r2, r7, #20
 80080f6:	f107 0308 	add.w	r3, r7, #8
 80080fa:	4611      	mov	r1, r2
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 fc18 	bl	8008932 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8008102:	4603      	mov	r3, r0
 8008104:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800810a:	4618      	mov	r0, r3
 800810c:	f000 fa30 	bl	8008570 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8008110:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8008116:	68fc      	ldr	r4, [r7, #12]
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	18d5      	adds	r5, r2, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fb80 	bl	8008824 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8008124:	4603      	mov	r3, r0
 8008126:	461a      	mov	r2, r3
 8008128:	4629      	mov	r1, r5
 800812a:	4620      	mov	r0, r4
 800812c:	f7ff ff91 	bl	8008052 <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8008130:	2300      	movs	r3, #0
 8008132:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8008134:	f7ff ffb1 	bl	800809a <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d027      	beq.n	800818e <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xca>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800813e:	f107 0308 	add.w	r3, r7, #8
 8008142:	4618      	mov	r0, r3
 8008144:	f000 fc1d 	bl	8008982 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8008148:	4603      	mov	r3, r0
 800814a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	4618      	mov	r0, r3
 8008150:	f7f9 fa6c 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8008154:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	4621      	mov	r1, r4
 800815a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800815c:	f000 fbfd 	bl	800895a <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8008160:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8008162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008164:	3301      	adds	r3, #1
 8008166:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8008168:	f107 0308 	add.w	r3, r7, #8
 800816c:	4618      	mov	r0, r3
 800816e:	f000 fc08 	bl	8008982 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8008172:	4603      	mov	r3, r0
 8008174:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4618      	mov	r0, r3
 800817a:	f7f9 fa57 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800817e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8008180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008182:	6a39      	ldr	r1, [r7, #32]
 8008184:	4620      	mov	r0, r4
 8008186:	f000 fbe8 	bl	800895a <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 800818a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800818c:	e026      	b.n	80081dc <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x118>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 800818e:	f107 0308 	add.w	r3, r7, #8
 8008192:	4618      	mov	r0, r3
 8008194:	f000 fbf5 	bl	8008982 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8008198:	4603      	mov	r3, r0
 800819a:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4618      	mov	r0, r3
 80081a0:	f7f9 fa44 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80081a4:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	4621      	mov	r1, r4
 80081aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081ac:	f000 fbf3 	bl	8008996 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 80081b0:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80081b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b4:	3301      	adds	r3, #1
 80081b6:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80081b8:	f107 0308 	add.w	r3, r7, #8
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 fbe0 	bl	8008982 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 80081c2:	4603      	mov	r3, r0
 80081c4:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7f9 fa2f 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80081ce:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80081d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081d2:	6a39      	ldr	r1, [r7, #32]
 80081d4:	4620      	mov	r0, r4
 80081d6:	f000 fbde 	bl	8008996 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 80081da:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80081dc:	f7ff ff5d 	bl	800809a <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 80081e0:	4603      	mov	r3, r0
 80081e2:	f083 0301 	eor.w	r3, r3, #1
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d009      	beq.n	8008200 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x13c>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7f9 fa1c 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80081f4:	4603      	mov	r3, r0
 80081f6:	461a      	mov	r2, r3
 80081f8:	6a39      	ldr	r1, [r7, #32]
 80081fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081fc:	f7f9 fa20 	bl	8001640 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8008200:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	689a      	ldr	r2, [r3, #8]
 8008206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008208:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 800820a:	461a      	mov	r2, r3
 800820c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800820e:	f7f9 fa44 	bl	800169a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      this->_M_impl._M_start = __new_start;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800821c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008222:	441a      	add	r2, r3
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	609a      	str	r2, [r3, #8]
    }
 8008228:	bf00      	nop
 800822a:	3730      	adds	r7, #48	; 0x30
 800822c:	46bd      	mov	sp, r7
 800822e:	bdb0      	pop	{r4, r5, r7, pc}
 8008230:	0800eef8 	.word	0x0800eef8

08008234 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800823c:	bf00      	nop
 800823e:	4618      	mov	r0, r3
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	bc80      	pop	{r7}
 8008246:	4770      	bx	lr

08008248 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPhEEvT_S4_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8008248:	b590      	push	{r4, r7, lr}
 800824a:	b087      	sub	sp, #28
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8008256:	6879      	ldr	r1, [r7, #4]
 8008258:	68b8      	ldr	r0, [r7, #8]
 800825a:	f000 fbb5 	bl	80089c8 <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800825e:	4603      	mov	r3, r0
 8008260:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8008262:	68fc      	ldr	r4, [r7, #12]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4618      	mov	r0, r3
 8008268:	f7f9 f9e0 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800826c:	4603      	mov	r3, r0
 800826e:	4619      	mov	r1, r3
 8008270:	6978      	ldr	r0, [r7, #20]
 8008272:	f000 f955 	bl	8008520 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>
 8008276:	4603      	mov	r3, r0
 8008278:	4619      	mov	r1, r3
 800827a:	4620      	mov	r0, r4
 800827c:	f000 f978 	bl	8008570 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8008280:	4602      	mov	r2, r0
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	441a      	add	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	4618      	mov	r0, r3
 800829a:	f7f9 f9c7 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800829e:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 80082a0:	4622      	mov	r2, r4
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	68b8      	ldr	r0, [r7, #8]
 80082a6:	f000 fba3 	bl	80089f0 <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
 80082aa:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	605a      	str	r2, [r3, #4]
	}
 80082b0:	bf00      	nop
 80082b2:	371c      	adds	r7, #28
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd90      	pop	{r4, r7, pc}

080082b8 <_ZNSaISt6vectorIhSaIhEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fba6 	bl	8008a12 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEEC1Ev>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4618      	mov	r0, r3
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	601a      	str	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	605a      	str	r2, [r3, #4]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	3308      	adds	r3, #8
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 fb9c 	bl	8008a26 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EC1Ev>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	3318      	adds	r3, #24
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 fb97 	bl	8008a26 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EC1Ev>
	{ }
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4618      	mov	r0, r3
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4618      	mov	r0, r3
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	bc80      	pop	{r7}
 8008314:	4770      	bx	lr

08008316 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	429a      	cmp	r2, r3
 800832a:	d201      	bcs.n	8008330 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	e000      	b.n	8008332 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8008330:	687b      	ldr	r3, [r7, #4]
    }
 8008332:	4618      	mov	r0, r3
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	bc80      	pop	{r7}
 800833a:	4770      	bx	lr

0800833c <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 800833c:	b590      	push	{r4, r7, lr}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8008346:	f107 030c 	add.w	r3, r7, #12
 800834a:	6879      	ldr	r1, [r7, #4]
 800834c:	4618      	mov	r0, r3
 800834e:	f000 f82c 	bl	80083aa <_ZNKSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8008352:	f107 030c 	add.w	r3, r7, #12
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	4618      	mov	r0, r3
 800835a:	f000 fb7a 	bl	8008a52 <_ZNSt16allocator_traitsISaIPSt6vectorIhSaIhEEEE8allocateERS4_j>
 800835e:	4604      	mov	r4, r0
 8008360:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8008362:	f107 030c 	add.w	r3, r7, #12
 8008366:	4618      	mov	r0, r3
 8008368:	f000 f830 	bl	80083cc <_ZNSaIPSt6vectorIhSaIhEEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800836c:	4623      	mov	r3, r4
      }
 800836e:	4618      	mov	r0, r3
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	bd90      	pop	{r4, r7, pc}

08008376 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE15_M_create_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 8008376:	b580      	push	{r7, lr}
 8008378:	b086      	sub	sp, #24
 800837a:	af00      	add	r7, sp, #0
 800837c:	60f8      	str	r0, [r7, #12]
 800837e:	60b9      	str	r1, [r7, #8]
 8008380:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	617b      	str	r3, [r7, #20]
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	429a      	cmp	r2, r3
 800838c:	d209      	bcs.n	80083a2 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE15_M_create_nodesEPPS2_S6_+0x2c>
	    *__cur = this->_M_allocate_node();
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 f961 	bl	8008656 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE16_M_allocate_nodeEv>
 8008394:	4602      	mov	r2, r0
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	3304      	adds	r3, #4
 800839e:	617b      	str	r3, [r7, #20]
 80083a0:	e7f1      	b.n	8008386 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE15_M_create_nodesEPPS2_S6_+0x10>
    }
 80083a2:	bf00      	nop
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <_ZNKSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b082      	sub	sp, #8
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80083b4:	6838      	ldr	r0, [r7, #0]
 80083b6:	f000 fb5b 	bl	8008a70 <_ZNKSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 80083ba:	4603      	mov	r3, r0
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fb60 	bl	8008a84 <_ZNSaIPSt6vectorIhSaIhEEEC1IS1_EERKSaIT_E>
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <_ZNSaIPSt6vectorIhSaIhEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fb62 	bl	8008a9e <_ZN9__gnu_cxx13new_allocatorIPSt6vectorIhSaIhEEED1Ev>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <_ZNSt16allocator_traitsISaIPSt6vectorIhSaIhEEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	68b9      	ldr	r1, [r7, #8]
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 fb5c 	bl	8008ab2 <_ZN9__gnu_cxx13new_allocatorIPSt6vectorIhSaIhEEE10deallocateEPS4_j>
 80083fa:	bf00      	nop
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE19_M_destroy_data_auxESt15_Deque_iteratorIS2_RS2_PS2_ES8_>:
	}
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
 8008402:	b5b0      	push	{r4, r5, r7, lr}
 8008404:	b086      	sub	sp, #24
 8008406:	af00      	add	r7, sp, #0
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	607a      	str	r2, [r7, #4]
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	3304      	adds	r3, #4
 8008414:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	429a      	cmp	r2, r3
 800841e:	d219      	bcs.n	8008454 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE19_M_destroy_data_auxESt15_Deque_iteratorIS2_RS2_PS2_ES8_+0x52>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	681d      	ldr	r5, [r3, #0]
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	681c      	ldr	r4, [r3, #0]
 8008428:	f000 fb53 	bl	8008ad2 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE14_S_buffer_sizeEv>
 800842c:	4602      	mov	r2, r0
 800842e:	4613      	mov	r3, r2
 8008430:	005b      	lsls	r3, r3, #1
 8008432:	4413      	add	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	4618      	mov	r0, r3
 800843c:	f7f8 ff88 	bl	8001350 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8008440:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8008442:	461a      	mov	r2, r3
 8008444:	4621      	mov	r1, r4
 8008446:	4628      	mov	r0, r5
 8008448:	f000 fb4b 	bl	8008ae2 <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	3304      	adds	r3, #4
 8008450:	617b      	str	r3, [r7, #20]
 8008452:	e7e0      	b.n	8008416 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE19_M_destroy_data_auxESt15_Deque_iteratorIS2_RS2_PS2_ES8_+0x14>

       if (__first._M_node != __last._M_node)
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	68da      	ldr	r2, [r3, #12]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	429a      	cmp	r2, r3
 800845e:	d01c      	beq.n	800849a <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE19_M_destroy_data_auxESt15_Deque_iteratorIS2_RS2_PS2_ES8_+0x98>
	 {
	   std::_Destroy(__first._M_cur, __first._M_last,
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	681c      	ldr	r4, [r3, #0]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	4618      	mov	r0, r3
 800846c:	f7f8 ff70 	bl	8001350 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8008470:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 8008472:	461a      	mov	r2, r3
 8008474:	4629      	mov	r1, r5
 8008476:	4620      	mov	r0, r4
 8008478:	f000 fb33 	bl	8008ae2 <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685c      	ldr	r4, [r3, #4]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4618      	mov	r0, r3
 8008488:	f7f8 ff62 	bl	8001350 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800848c:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 800848e:	461a      	mov	r2, r3
 8008490:	4629      	mov	r1, r5
 8008492:	4620      	mov	r0, r4
 8008494:	f000 fb25 	bl	8008ae2 <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
	 }
       else
	 std::_Destroy(__first._M_cur, __last._M_cur,
		       _M_get_Tp_allocator());
     }
 8008498:	e00d      	b.n	80084b6 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE19_M_destroy_data_auxESt15_Deque_iteratorIS2_RS2_PS2_ES8_+0xb4>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	681c      	ldr	r4, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7f8 ff53 	bl	8001350 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 80084aa:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 80084ac:	461a      	mov	r2, r3
 80084ae:	4629      	mov	r1, r5
 80084b0:	4620      	mov	r0, r4
 80084b2:	f000 fb16 	bl	8008ae2 <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
     }
 80084b6:	bf00      	nop
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bdb0      	pop	{r4, r5, r7, pc}

080084be <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80084be:	b580      	push	{r7, lr}
 80084c0:	b082      	sub	sp, #8
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fb17 	bl	8008afe <_ZNSaIhEC1ERKS_>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7ff fd72 	bl	8007fbc <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <_ZNKSt16initializer_listIhE4sizeEv>:
      size() const noexcept { return _M_len; }
 80084e2:	b480      	push	{r7}
 80084e4:	b083      	sub	sp, #12
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	4618      	mov	r0, r3
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bc80      	pop	{r7}
 80084f6:	4770      	bx	lr

080084f8 <_ZSt8distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80084f8:	b5b0      	push	{r4, r5, r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8008502:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8008504:	1d3b      	adds	r3, r7, #4
 8008506:	4618      	mov	r0, r3
 8008508:	f000 fb07 	bl	8008b1a <_ZSt19__iterator_categoryIPKhENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800850c:	462a      	mov	r2, r5
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	4620      	mov	r0, r4
 8008512:	f000 fb0c 	bl	8008b2e <_ZSt10__distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8008516:	4603      	mov	r3, r0
    }
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bdb0      	pop	{r4, r5, r7, pc}

08008520 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8008520:	b590      	push	{r4, r7, lr}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800852a:	f107 030c 	add.w	r3, r7, #12
 800852e:	6839      	ldr	r1, [r7, #0]
 8008530:	4618      	mov	r0, r3
 8008532:	f000 fae4 	bl	8008afe <_ZNSaIhEC1ERKS_>
 8008536:	f107 030c 	add.w	r3, r7, #12
 800853a:	4618      	mov	r0, r3
 800853c:	f000 fb05 	bl	8008b4a <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8008540:	4602      	mov	r2, r0
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4293      	cmp	r3, r2
 8008546:	bf8c      	ite	hi
 8008548:	2301      	movhi	r3, #1
 800854a:	2300      	movls	r3, #0
 800854c:	b2dc      	uxtb	r4, r3
 800854e:	f107 030c 	add.w	r3, r7, #12
 8008552:	4618      	mov	r0, r3
 8008554:	f7f9 f895 	bl	8001682 <_ZNSaIhED1Ev>
 8008558:	2c00      	cmp	r4, #0
 800855a:	d002      	beq.n	8008562 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 800855c:	4803      	ldr	r0, [pc, #12]	; (800856c <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x4c>)
 800855e:	f001 feb3 	bl	800a2c8 <_ZSt20__throw_length_errorPKc>
	return __n;
 8008562:	687b      	ldr	r3, [r7, #4]
      }
 8008564:	4618      	mov	r0, r3
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	bd90      	pop	{r4, r7, pc}
 800856c:	0800ef14 	.word	0x0800ef14

08008570 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d006      	beq.n	800858e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f000 fafa 	bl	8008b7e <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 800858a:	4603      	mov	r3, r0
 800858c:	e000      	b.n	8008590 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 800858e:	2300      	movs	r3, #0
      }
 8008590:	4618      	mov	r0, r3
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <_ZSt22__uninitialized_copy_aIPKhPhhET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
 80085a4:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	68b9      	ldr	r1, [r7, #8]
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f000 faf6 	bl	8008b9c <_ZSt18uninitialized_copyIPKhPhET0_T_S4_S3_>
 80085b0:	4603      	mov	r3, r0
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <_ZSt7forwardIRKSt6vectorIhSaIhEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80085ba:	b480      	push	{r7}
 80085bc:	b083      	sub	sp, #12
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bc80      	pop	{r7}
 80085cc:	4770      	bx	lr

080085ce <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80085ce:	b590      	push	{r4, r7, lr}
 80085d0:	b085      	sub	sp, #20
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	60f8      	str	r0, [r7, #12]
 80085d6:	60b9      	str	r1, [r7, #8]
 80085d8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7ff ffed 	bl	80085ba <_ZSt7forwardIRKSt6vectorIhSaIhEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80085e0:	4604      	mov	r4, r0
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	4619      	mov	r1, r3
 80085e6:	200c      	movs	r0, #12
 80085e8:	f7fe fd82 	bl	80070f0 <_ZnwjPv>
 80085ec:	4603      	mov	r3, r0
 80085ee:	4621      	mov	r1, r4
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 fae5 	bl	8008bc0 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80085f6:	bf00      	nop
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd90      	pop	{r4, r7, pc}

080085fe <_ZNKSt5dequeISt6vectorIhSaIhEESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80085fe:	b580      	push	{r7, lr}
 8008600:	b082      	sub	sp, #8
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4618      	mov	r0, r3
 800860a:	f000 fa31 	bl	8008a70 <_ZNKSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800860e:	4603      	mov	r3, r0
 8008610:	4618      	mov	r0, r3
 8008612:	f000 fb12 	bl	8008c3a <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE11_S_max_sizeERKS3_>
 8008616:	4603      	mov	r3, r0
 8008618:	4618      	mov	r0, r3
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	1c5a      	adds	r2, r3, #1
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8008632:	6879      	ldr	r1, [r7, #4]
 8008634:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8008636:	6879      	ldr	r1, [r7, #4]
 8008638:	6809      	ldr	r1, [r1, #0]
 800863a:	1a41      	subs	r1, r0, r1
 800863c:	1089      	asrs	r1, r1, #2
 800863e:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8008640:	429a      	cmp	r2, r3
 8008642:	d904      	bls.n	800864e <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8008644:	2200      	movs	r2, #0
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fb10 	bl	8008c6e <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE17_M_reallocate_mapEjb>
      }
 800864e:	bf00      	nop
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8008656:	b590      	push	{r4, r7, lr}
 8008658:	b083      	sub	sp, #12
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800865e:	687c      	ldr	r4, [r7, #4]
 8008660:	200c      	movs	r0, #12
 8008662:	f7f8 fb95 	bl	8000d90 <_ZSt16__deque_buf_sizej>
 8008666:	4603      	mov	r3, r0
 8008668:	4619      	mov	r1, r3
 800866a:	4620      	mov	r0, r4
 800866c:	f000 fb99 	bl	8008da2 <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE8allocateERS3_j>
 8008670:	4603      	mov	r3, r0
      }
 8008672:	4618      	mov	r0, r3
 8008674:	370c      	adds	r7, #12
 8008676:	46bd      	mov	sp, r7
 8008678:	bd90      	pop	{r4, r7, pc}

0800867a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800867a:	b480      	push	{r7}
 800867c:	b083      	sub	sp, #12
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4618      	mov	r0, r3
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	bc80      	pop	{r7}
 800868c:	4770      	bx	lr

0800868e <_ZNSt16allocator_traitsISaIhEE9constructIhJhEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	60f8      	str	r0, [r7, #12]
 8008696:	60b9      	str	r1, [r7, #8]
 8008698:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff ffed 	bl	800867a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80086a0:	4603      	mov	r3, r0
 80086a2:	461a      	mov	r2, r3
 80086a4:	68b9      	ldr	r1, [r7, #8]
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f000 fb8a 	bl	8008dc0 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJhEEEvPT_DpOT0_>
	}
 80086ac:	bf00      	nop
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80086b4:	b5b0      	push	{r4, r5, r7, lr}
 80086b6:	b08c      	sub	sp, #48	; 0x30
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80086c0:	4a57      	ldr	r2, [pc, #348]	; (8008820 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x16c>)
 80086c2:	2101      	movs	r1, #1
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 f8dd 	bl	8008884 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80086ca:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 f91a 	bl	8008912 <_ZNSt6vectorIhSaIhEE5beginEv>
 80086de:	4603      	mov	r3, r0
 80086e0:	617b      	str	r3, [r7, #20]
 80086e2:	f107 0214 	add.w	r2, r7, #20
 80086e6:	f107 0308 	add.w	r3, r7, #8
 80086ea:	4611      	mov	r1, r2
 80086ec:	4618      	mov	r0, r3
 80086ee:	f000 f920 	bl	8008932 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80086f2:	4603      	mov	r3, r0
 80086f4:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7ff ff38 	bl	8008570 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8008700:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8008706:	68fc      	ldr	r4, [r7, #12]
 8008708:	69ba      	ldr	r2, [r7, #24]
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	18d5      	adds	r5, r2, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7ff ffb3 	bl	800867a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8008714:	4603      	mov	r3, r0
 8008716:	461a      	mov	r2, r3
 8008718:	4629      	mov	r1, r5
 800871a:	4620      	mov	r0, r4
 800871c:	f7ff ffb7 	bl	800868e <_ZNSt16allocator_traitsISaIhEE9constructIhJhEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 8008720:	2300      	movs	r3, #0
 8008722:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8008724:	f7ff fcb9 	bl	800809a <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d027      	beq.n	800877e <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xca>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800872e:	f107 0308 	add.w	r3, r7, #8
 8008732:	4618      	mov	r0, r3
 8008734:	f000 f925 	bl	8008982 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8008738:	4603      	mov	r3, r0
 800873a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	4618      	mov	r0, r3
 8008740:	f7f8 ff74 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8008744:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8008746:	69ba      	ldr	r2, [r7, #24]
 8008748:	4621      	mov	r1, r4
 800874a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800874c:	f000 f905 	bl	800895a <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8008750:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8008752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008754:	3301      	adds	r3, #1
 8008756:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8008758:	f107 0308 	add.w	r3, r7, #8
 800875c:	4618      	mov	r0, r3
 800875e:	f000 f910 	bl	8008982 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8008762:	4603      	mov	r3, r0
 8008764:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	4618      	mov	r0, r3
 800876a:	f7f8 ff5f 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800876e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8008770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008772:	6a39      	ldr	r1, [r7, #32]
 8008774:	4620      	mov	r0, r4
 8008776:	f000 f8f0 	bl	800895a <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 800877a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800877c:	e026      	b.n	80087cc <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x118>
		(__old_start, __position.base(),
 800877e:	f107 0308 	add.w	r3, r7, #8
 8008782:	4618      	mov	r0, r3
 8008784:	f000 f8fd 	bl	8008982 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8008788:	4603      	mov	r3, r0
 800878a:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	4618      	mov	r0, r3
 8008790:	f7f8 ff4c 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8008794:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8008796:	69ba      	ldr	r2, [r7, #24]
 8008798:	4621      	mov	r1, r4
 800879a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800879c:	f000 f8fb 	bl	8008996 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 80087a0:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 80087a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a4:	3301      	adds	r3, #1
 80087a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 80087a8:	f107 0308 	add.w	r3, r7, #8
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 f8e8 	bl	8008982 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 80087b2:	4603      	mov	r3, r0
 80087b4:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7f8 ff37 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80087be:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80087c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087c2:	6a39      	ldr	r1, [r7, #32]
 80087c4:	4620      	mov	r0, r4
 80087c6:	f000 f8e6 	bl	8008996 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 80087ca:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80087cc:	f7ff fc65 	bl	800809a <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 80087d0:	4603      	mov	r3, r0
 80087d2:	f083 0301 	eor.w	r3, r3, #1
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d009      	beq.n	80087f0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x13c>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	4618      	mov	r0, r3
 80087e0:	f7f8 ff24 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80087e4:	4603      	mov	r3, r0
 80087e6:	461a      	mov	r2, r3
 80087e8:	6a39      	ldr	r1, [r7, #32]
 80087ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087ec:	f7f8 ff28 	bl	8001640 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
      _M_deallocate(__old_start,
 80087f0:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	689a      	ldr	r2, [r3, #8]
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 80087fa:	461a      	mov	r2, r3
 80087fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087fe:	f7f8 ff4c 	bl	800169a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      this->_M_impl._M_start = __new_start;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800880c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800880e:	69ba      	ldr	r2, [r7, #24]
 8008810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008812:	441a      	add	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	609a      	str	r2, [r3, #8]
    }
 8008818:	bf00      	nop
 800881a:	3730      	adds	r7, #48	; 0x30
 800881c:	46bd      	mov	sp, r7
 800881e:	bdb0      	pop	{r4, r5, r7, pc}
 8008820:	0800eef8 	.word	0x0800eef8

08008824 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4618      	mov	r0, r3
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	bc80      	pop	{r7}
 8008836:	4770      	bx	lr

08008838 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8008838:	b590      	push	{r4, r7, lr}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f7ff ffed 	bl	8008824 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800884a:	4603      	mov	r3, r0
 800884c:	781c      	ldrb	r4, [r3, #0]
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	4619      	mov	r1, r3
 8008852:	2001      	movs	r0, #1
 8008854:	f7fe fc4c 	bl	80070f0 <_ZnwjPv>
 8008858:	4603      	mov	r3, r0
 800885a:	4622      	mov	r2, r4
 800885c:	701a      	strb	r2, [r3, #0]
 800885e:	bf00      	nop
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	bd90      	pop	{r4, r7, pc}

08008866 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8008866:	b480      	push	{r7}
 8008868:	b083      	sub	sp, #12
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	601a      	str	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4618      	mov	r0, r3
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	bc80      	pop	{r7}
 8008882:	4770      	bx	lr

08008884 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8008884:	b590      	push	{r4, r7, lr}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f000 faac 	bl	8008dee <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8008896:	4604      	mov	r4, r0
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f000 fab9 	bl	8008e10 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800889e:	4603      	mov	r3, r0
 80088a0:	1ae2      	subs	r2, r4, r3
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	bf34      	ite	cc
 80088a8:	2301      	movcc	r3, #1
 80088aa:	2300      	movcs	r3, #0
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d002      	beq.n	80088b8 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f001 fd08 	bl	800a2c8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f000 faa9 	bl	8008e10 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80088be:	4604      	mov	r4, r0
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f000 faa5 	bl	8008e10 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80088c6:	4603      	mov	r3, r0
 80088c8:	613b      	str	r3, [r7, #16]
 80088ca:	f107 0208 	add.w	r2, r7, #8
 80088ce:	f107 0310 	add.w	r3, r7, #16
 80088d2:	4611      	mov	r1, r2
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7ff fd1e 	bl	8008316 <_ZSt3maxIjERKT_S2_S2_>
 80088da:	4603      	mov	r3, r0
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4423      	add	r3, r4
 80088e0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 fa94 	bl	8008e10 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80088e8:	4602      	mov	r2, r0
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d306      	bcc.n	80088fe <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 fa7c 	bl	8008dee <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80088f6:	4602      	mov	r2, r0
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d904      	bls.n	8008908 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f000 fa75 	bl	8008dee <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8008904:	4603      	mov	r3, r0
 8008906:	e000      	b.n	800890a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 8008908:	697b      	ldr	r3, [r7, #20]
      }
 800890a:	4618      	mov	r0, r3
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	bd90      	pop	{r4, r7, pc}

08008912 <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8008912:	b580      	push	{r7, lr}
 8008914:	b084      	sub	sp, #16
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	f107 030c 	add.w	r3, r7, #12
 8008920:	4611      	mov	r1, r2
 8008922:	4618      	mov	r0, r3
 8008924:	f7ff ff9f 	bl	8008866 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008932:	b590      	push	{r4, r7, lr}
 8008934:	b083      	sub	sp, #12
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f820 	bl	8008982 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8008942:	4603      	mov	r3, r0
 8008944:	681c      	ldr	r4, [r3, #0]
 8008946:	6838      	ldr	r0, [r7, #0]
 8008948:	f000 f81b 	bl	8008982 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800894c:	4603      	mov	r3, r0
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	1ae3      	subs	r3, r4, r3
 8008952:	4618      	mov	r0, r3
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	bd90      	pop	{r4, r7, pc}

0800895a <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800895a:	b590      	push	{r4, r7, lr}
 800895c:	b087      	sub	sp, #28
 800895e:	af02      	add	r7, sp, #8
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	607a      	str	r2, [r7, #4]
 8008966:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8008968:	f88d 4000 	strb.w	r4, [sp]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	68b9      	ldr	r1, [r7, #8]
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f000 fa5a 	bl	8008e2c <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>
 8008978:	4603      	mov	r3, r0
      }
 800897a:	4618      	mov	r0, r3
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	bd90      	pop	{r4, r7, pc}

08008982 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008982:	b480      	push	{r7}
 8008984:	b083      	sub	sp, #12
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	bc80      	pop	{r7}
 8008994:	4770      	bx	lr

08008996 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8008996:	b590      	push	{r4, r7, lr}
 8008998:	b085      	sub	sp, #20
 800899a:	af00      	add	r7, sp, #0
 800899c:	60f8      	str	r0, [r7, #12]
 800899e:	60b9      	str	r1, [r7, #8]
 80089a0:	607a      	str	r2, [r7, #4]
 80089a2:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 fa53 	bl	8008e50 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 80089aa:	4604      	mov	r4, r0
 80089ac:	68b8      	ldr	r0, [r7, #8]
 80089ae:	f000 fa4f 	bl	8008e50 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 80089b2:	4601      	mov	r1, r0
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 fa58 	bl	8008e6e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 80089be:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd90      	pop	{r4, r7, pc}

080089c8 <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 80089c8:	b5b0      	push	{r4, r5, r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 80089d2:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80089d4:	1d3b      	adds	r3, r7, #4
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7ff fc2c 	bl	8008234 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 80089dc:	462a      	mov	r2, r5
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	4620      	mov	r0, r4
 80089e2:	f000 fa55 	bl	8008e90 <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80089e6:	4603      	mov	r3, r0
    }
 80089e8:	4618      	mov	r0, r3
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bdb0      	pop	{r4, r5, r7, pc}

080089f0 <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
 80089fc:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	68b9      	ldr	r1, [r7, #8]
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f000 fa52 	bl	8008eac <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008a12:	b480      	push	{r7}
 8008a14:	b083      	sub	sp, #12
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bc80      	pop	{r7}
 8008a24:	4770      	bx	lr

08008a26 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	605a      	str	r2, [r3, #4]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	609a      	str	r2, [r3, #8]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	60da      	str	r2, [r3, #12]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bc80      	pop	{r7}
 8008a50:	4770      	bx	lr

08008a52 <_ZNSt16allocator_traitsISaIPSt6vectorIhSaIhEEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b082      	sub	sp, #8
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fa35 	bl	8008ed0 <_ZN9__gnu_cxx13new_allocatorIPSt6vectorIhSaIhEEE8allocateEjPKv>
 8008a66:	4603      	mov	r3, r0
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <_ZNKSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bc80      	pop	{r7}
 8008a82:	4770      	bx	lr

08008a84 <_ZNSaIPSt6vectorIhSaIhEEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fa3c 	bl	8008f0c <_ZN9__gnu_cxx13new_allocatorIPSt6vectorIhSaIhEEEC1Ev>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4618      	mov	r0, r3
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <_ZN9__gnu_cxx13new_allocatorIPSt6vectorIhSaIhEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008a9e:	b480      	push	{r7}
 8008aa0:	b083      	sub	sp, #12
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bc80      	pop	{r7}
 8008ab0:	4770      	bx	lr

08008ab2 <_ZN9__gnu_cxx13new_allocatorIPSt6vectorIhSaIhEEE10deallocateEPS4_j>:
      deallocate(_Tp* __p, size_type __t)
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	60b9      	str	r1, [r7, #8]
 8008abc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	68b8      	ldr	r0, [r7, #8]
 8008ac6:	f001 fbda 	bl	800a27e <_ZdlPvj>
      }
 8008aca:	bf00      	nop
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8008ad6:	200c      	movs	r0, #12
 8008ad8:	f7f8 f95a 	bl	8000d90 <_ZSt16__deque_buf_sizej>
 8008adc:	4603      	mov	r3, r0
 8008ade:	4618      	mov	r0, r3
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	60f8      	str	r0, [r7, #12]
 8008aea:	60b9      	str	r1, [r7, #8]
 8008aec:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8008aee:	68b9      	ldr	r1, [r7, #8]
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f000 fa15 	bl	8008f20 <_ZSt8_DestroyIPSt6vectorIhSaIhEEEvT_S4_>
    }
 8008af6:	bf00      	nop
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b082      	sub	sp, #8
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fa15 	bl	8008f3a <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4618      	mov	r0, r3
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <_ZSt19__iterator_categoryIPKhENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 8008b1a:	b480      	push	{r7}
 8008b1c:	b083      	sub	sp, #12
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8008b22:	bf00      	nop
 8008b24:	4618      	mov	r0, r3
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bc80      	pop	{r7}
 8008b2c:	4770      	bx	lr

08008b2e <_ZSt10__distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008b2e:	b480      	push	{r7}
 8008b30:	b085      	sub	sp, #20
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	60f8      	str	r0, [r7, #12]
 8008b36:	60b9      	str	r1, [r7, #8]
 8008b38:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	1ad3      	subs	r3, r2, r3
    }
 8008b40:	4618      	mov	r0, r3
 8008b42:	3714      	adds	r7, #20
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bc80      	pop	{r7}
 8008b48:	4770      	bx	lr

08008b4a <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8008b52:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008b56:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f9f9 	bl	8008f50 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8008b62:	f107 0208 	add.w	r2, r7, #8
 8008b66:	f107 030c 	add.w	r3, r7, #12
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f000 f9fb 	bl	8008f68 <_ZSt3minIjERKT_S2_S2_>
 8008b72:	4603      	mov	r3, r0
 8008b74:	681b      	ldr	r3, [r3, #0]
      }
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b082      	sub	sp, #8
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8008b88:	2200      	movs	r2, #0
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f9fe 	bl	8008f8e <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 8008b92:	4603      	mov	r3, r0
 8008b94:	4618      	mov	r0, r3
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <_ZSt18uninitialized_copyIPKhPhET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	68b9      	ldr	r1, [r7, #8]
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f000 fa08 	bl	8008fc6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKhPhEET0_T_S6_S5_>
 8008bb6:	4603      	mov	r3, r0
    }
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3718      	adds	r7, #24
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <_ZNSt6vectorIhSaIhEEC1ERKS1_>:
      vector(const vector& __x)
 8008bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8008bca:	687c      	ldr	r4, [r7, #4]
 8008bcc:	6838      	ldr	r0, [r7, #0]
 8008bce:	f000 f91f 	bl	8008e10 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 fa13 	bl	8009002 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	f107 030c 	add.w	r3, r7, #12
 8008be2:	4611      	mov	r1, r2
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 f9fe 	bl	8008fe6 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE17_S_select_on_copyERKS1_>
 8008bea:	f107 030c 	add.w	r3, r7, #12
 8008bee:	461a      	mov	r2, r3
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f000 fa0f 	bl	8009016 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
 8008bf8:	f107 030c 	add.w	r3, r7, #12
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7f8 fd40 	bl	8001682 <_ZNSaIhED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8008c02:	6838      	ldr	r0, [r7, #0]
 8008c04:	f000 fa1b 	bl	800903e <_ZNKSt6vectorIhSaIhEE5beginEv>
 8008c08:	4605      	mov	r5, r0
 8008c0a:	6838      	ldr	r0, [r7, #0]
 8008c0c:	f000 fa27 	bl	800905e <_ZNKSt6vectorIhSaIhEE3endEv>
 8008c10:	4606      	mov	r6, r0
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7f8 fd07 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8008c1e:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8008c20:	4622      	mov	r2, r4
 8008c22:	4631      	mov	r1, r6
 8008c24:	4628      	mov	r0, r5
 8008c26:	f000 fa2b 	bl	8009080 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
 8008c2a:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	605a      	str	r2, [r3, #4]
      }
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4618      	mov	r0, r3
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c3a <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b084      	sub	sp, #16
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8008c42:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008c46:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fa2a 	bl	80090a2 <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE8max_sizeERKS3_>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8008c52:	f107 0208 	add.w	r2, r7, #8
 8008c56:	f107 030c 	add.w	r3, r7, #12
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f000 f983 	bl	8008f68 <_ZSt3minIjERKT_S2_S2_>
 8008c62:	4603      	mov	r3, r0
 8008c64:	681b      	ldr	r3, [r3, #0]
      }
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8008c6e:	b590      	push	{r4, r7, lr}
 8008c70:	b08b      	sub	sp, #44	; 0x2c
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	60f8      	str	r0, [r7, #12]
 8008c76:	60b9      	str	r1, [r7, #8]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	695b      	ldr	r3, [r3, #20]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	109b      	asrs	r3, r3, #2
 8008c88:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8008c8a:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	6a3a      	ldr	r2, [r7, #32]
 8008c90:	4413      	add	r3, r2
 8008c92:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	005b      	lsls	r3, r3, #1
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d92d      	bls.n	8008cfc <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	1acb      	subs	r3, r1, r3
 8008cac:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8008cae:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8008cb0:	79fb      	ldrb	r3, [r7, #7]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE17_M_reallocate_mapEjb+0x4e>
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	e000      	b.n	8008cbe <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE17_M_reallocate_mapEjb+0x50>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8008cc0:	4413      	add	r3, r2
 8008cc2:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	695b      	ldr	r3, [r3, #20]
 8008cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d209      	bcs.n	8008ce2 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8008cd6:	3304      	adds	r3, #4
 8008cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cda:	4619      	mov	r1, r3
 8008cdc:	f000 f9ed 	bl	80090ba <_ZSt4copyIPPSt6vectorIhSaIhEES4_ET0_T_S6_S5_>
 8008ce0:	e048      	b.n	8008d74 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8008cea:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8008cec:	6a3b      	ldr	r3, [r7, #32]
 8008cee:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8008cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cf2:	4413      	add	r3, r2
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	f000 f9f8 	bl	80090ea <_ZSt13copy_backwardIPPSt6vectorIhSaIhEES4_ET0_T_S6_S5_>
 8008cfa:	e03b      	b.n	8008d74 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	3304      	adds	r3, #4
 8008d04:	f107 0208 	add.w	r2, r7, #8
 8008d08:	4611      	mov	r1, r2
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7ff fb03 	bl	8008316 <_ZSt3maxIjERKT_S2_S2_>
 8008d10:	4603      	mov	r3, r0
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8008d16:	3302      	adds	r3, #2
 8008d18:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	69b9      	ldr	r1, [r7, #24]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7ff fb0c 	bl	800833c <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE15_M_allocate_mapEj>
 8008d24:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8008d26:	69ba      	ldr	r2, [r7, #24]
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	085b      	lsrs	r3, r3, #1
 8008d2e:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8008d30:	79fb      	ldrb	r3, [r7, #7]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d002      	beq.n	8008d3c <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE17_M_reallocate_mapEjb+0xce>
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	e000      	b.n	8008d3e <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE17_M_reallocate_mapEjb+0xd0>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8008d40:	697a      	ldr	r2, [r7, #20]
 8008d42:	4413      	add	r3, r2
 8008d44:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8008d4e:	3304      	adds	r3, #4
 8008d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d52:	4619      	mov	r1, r3
 8008d54:	f000 f9b1 	bl	80090ba <_ZSt4copyIPPSt6vectorIhSaIhEES4_ET0_T_S6_S5_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6819      	ldr	r1, [r3, #0]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	461a      	mov	r2, r3
 8008d64:	f7ff f801 	bl	8007d6a <_ZNSt11_Deque_baseISt6vectorIhSaIhEESaIS2_EE17_M_deallocate_mapEPPS2_j>

	  this->_M_impl._M_map = __new_map;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	3308      	adds	r3, #8
 8008d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7f8 fb6c 	bl	8001458 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f103 0018 	add.w	r0, r3, #24
 8008d86:	6a3b      	ldr	r3, [r7, #32]
 8008d88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d92:	4413      	add	r3, r2
 8008d94:	4619      	mov	r1, r3
 8008d96:	f7f8 fb5f 	bl	8001458 <_ZNSt15_Deque_iteratorISt6vectorIhSaIhEERS2_PS2_E11_M_set_nodeEPS4_>
    }
 8008d9a:	bf00      	nop
 8008d9c:	372c      	adds	r7, #44	; 0x2c
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd90      	pop	{r4, r7, pc}

08008da2 <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8008dac:	2200      	movs	r2, #0
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f9b2 	bl	800911a <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8allocateEjPKv>
 8008db6:	4603      	mov	r3, r0
 8008db8:	4618      	mov	r0, r3
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJhEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8008dc0:	b590      	push	{r4, r7, lr}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7ff fc54 	bl	800867a <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	781c      	ldrb	r4, [r3, #0]
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	2001      	movs	r0, #1
 8008ddc:	f7fe f988 	bl	80070f0 <_ZnwjPv>
 8008de0:	4603      	mov	r3, r0
 8008de2:	4622      	mov	r2, r4
 8008de4:	701a      	strb	r2, [r3, #0]
 8008de6:	bf00      	nop
 8008de8:	3714      	adds	r7, #20
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd90      	pop	{r4, r7, pc}

08008dee <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b082      	sub	sp, #8
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 f902 	bl	8009002 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7ff fea2 	bl	8008b4a <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8008e06:	4603      	mov	r3, r0
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	4618      	mov	r0, r3
 8008e24:	370c      	adds	r7, #12
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bc80      	pop	{r7}
 8008e2a:	4770      	bx	lr

08008e2c <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
 8008e38:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	68b9      	ldr	r1, [r7, #8]
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 f98b 	bl	800915c <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8008e46:	4603      	mov	r3, r0
      }
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8008e58:	f107 030c 	add.w	r3, r7, #12
 8008e5c:	6879      	ldr	r1, [r7, #4]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 f999 	bl	8009196 <_ZNSt13move_iteratorIPhEC1ES0_>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	607a      	str	r2, [r7, #4]
 8008e7a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	68b9      	ldr	r1, [r7, #8]
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f000 f99a 	bl	80091ba <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8008e86:	4603      	mov	r3, r0
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	1ad3      	subs	r3, r2, r3
    }
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bc80      	pop	{r7}
 8008eaa:	4770      	bx	lr

08008eac <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	68b9      	ldr	r1, [r7, #8]
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 f98c 	bl	80091de <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>
 8008ec6:	4603      	mov	r3, r0
    }
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3718      	adds	r7, #24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <_ZN9__gnu_cxx13new_allocatorIPSt6vectorIhSaIhEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f000 f98e 	bl	80091fe <_ZNK9__gnu_cxx13new_allocatorIPSt6vectorIhSaIhEEE11_M_max_sizeEv>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	bf8c      	ite	hi
 8008eea:	2301      	movhi	r3, #1
 8008eec:	2300      	movls	r3, #0
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <_ZN9__gnu_cxx13new_allocatorIPSt6vectorIhSaIhEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8008ef4:	f001 f9e5 	bl	800a2c2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4618      	mov	r0, r3
 8008efe:	f001 f9cf 	bl	800a2a0 <_Znwj>
 8008f02:	4603      	mov	r3, r0
      }
 8008f04:	4618      	mov	r0, r3
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <_ZN9__gnu_cxx13new_allocatorIPSt6vectorIhSaIhEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4618      	mov	r0, r3
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bc80      	pop	{r7}
 8008f1e:	4770      	bx	lr

08008f20 <_ZSt8_DestroyIPSt6vectorIhSaIhEEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f971 	bl	8009214 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_>
    }
 8008f32:	bf00      	nop
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8008f3a:	b480      	push	{r7}
 8008f3c:	b083      	sub	sp, #12
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	6039      	str	r1, [r7, #0]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4618      	mov	r0, r3
 8008f48:	370c      	adds	r7, #12
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bc80      	pop	{r7}
 8008f4e:	4770      	bx	lr

08008f50 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 f973 	bl	8009244 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8008f5e:	4603      	mov	r3, r0
      }
 8008f60:	4618      	mov	r0, r3
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d201      	bcs.n	8008f82 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	e000      	b.n	8008f84 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8008f82:	687b      	ldr	r3, [r7, #4]
    }
 8008f84:	4618      	mov	r0, r3
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bc80      	pop	{r7}
 8008f8c:	4770      	bx	lr

08008f8e <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b084      	sub	sp, #16
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	60f8      	str	r0, [r7, #12]
 8008f96:	60b9      	str	r1, [r7, #8]
 8008f98:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f000 f95e 	bl	800925c <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	bf8c      	ite	hi
 8008fa8:	2301      	movhi	r3, #1
 8008faa:	2300      	movls	r3, #0
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8008fb2:	f001 f986 	bl	800a2c2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008fb6:	68b8      	ldr	r0, [r7, #8]
 8008fb8:	f001 f972 	bl	800a2a0 <_Znwj>
 8008fbc:	4603      	mov	r3, r0
      }
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKhPhEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	60f8      	str	r0, [r7, #12]
 8008fce:	60b9      	str	r1, [r7, #8]
 8008fd0:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	68b9      	ldr	r1, [r7, #8]
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f000 f94b 	bl	8009272 <_ZSt4copyIPKhPhET0_T_S4_S3_>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b082      	sub	sp, #8
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 f954 	bl	80092a2 <_ZNSt16allocator_traitsISaIhEE37select_on_container_copy_constructionERKS0_>
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4618      	mov	r0, r3
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	bc80      	pop	{r7}
 8009014:	4770      	bx	lr

08009016 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	60f8      	str	r0, [r7, #12]
 800901e:	60b9      	str	r1, [r7, #8]
 8009020:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6879      	ldr	r1, [r7, #4]
 8009026:	4618      	mov	r0, r3
 8009028:	f7ff fa49 	bl	80084be <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800902c:	68b9      	ldr	r1, [r7, #8]
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f000 f944 	bl	80092bc <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800903e:	b580      	push	{r7, lr}
 8009040:	b084      	sub	sp, #16
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	f107 030c 	add.w	r3, r7, #12
 800904c:	4611      	mov	r1, r2
 800904e:	4618      	mov	r0, r3
 8009050:	f000 f94e 	bl	80092f0 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	1d1a      	adds	r2, r3, #4
 800906a:	f107 030c 	add.w	r3, r7, #12
 800906e:	4611      	mov	r1, r2
 8009070:	4618      	mov	r0, r3
 8009072:	f000 f93d 	bl	80092f0 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
 800908c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	68b9      	ldr	r1, [r7, #8]
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 f93b 	bl	800930e <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8009098:	4603      	mov	r3, r0
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <_ZNSt16allocator_traitsISaISt6vectorIhSaIhEEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b082      	sub	sp, #8
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f941 	bl	8009332 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv>
 80090b0:	4603      	mov	r3, r0
      }
 80090b2:	4618      	mov	r0, r3
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <_ZSt4copyIPPSt6vectorIhSaIhEES4_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80090ba:	b590      	push	{r4, r7, lr}
 80090bc:	b085      	sub	sp, #20
 80090be:	af00      	add	r7, sp, #0
 80090c0:	60f8      	str	r0, [r7, #12]
 80090c2:	60b9      	str	r1, [r7, #8]
 80090c4:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f000 f93f 	bl	800934a <_ZSt12__miter_baseIPPSt6vectorIhSaIhEEET_S5_>
 80090cc:	4604      	mov	r4, r0
 80090ce:	68b8      	ldr	r0, [r7, #8]
 80090d0:	f000 f93b 	bl	800934a <_ZSt12__miter_baseIPPSt6vectorIhSaIhEEET_S5_>
 80090d4:	4603      	mov	r3, r0
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	4619      	mov	r1, r3
 80090da:	4620      	mov	r0, r4
 80090dc:	f000 f93f 	bl	800935e <_ZSt13__copy_move_aILb0EPPSt6vectorIhSaIhEES4_ET1_T0_S6_S5_>
 80090e0:	4603      	mov	r3, r0
    }
 80090e2:	4618      	mov	r0, r3
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd90      	pop	{r4, r7, pc}

080090ea <_ZSt13copy_backwardIPPSt6vectorIhSaIhEES4_ET0_T_S6_S5_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80090ea:	b590      	push	{r4, r7, lr}
 80090ec:	b085      	sub	sp, #20
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	60f8      	str	r0, [r7, #12]
 80090f2:	60b9      	str	r1, [r7, #8]
 80090f4:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f000 f927 	bl	800934a <_ZSt12__miter_baseIPPSt6vectorIhSaIhEEET_S5_>
 80090fc:	4604      	mov	r4, r0
 80090fe:	68b8      	ldr	r0, [r7, #8]
 8009100:	f000 f923 	bl	800934a <_ZSt12__miter_baseIPPSt6vectorIhSaIhEEET_S5_>
 8009104:	4603      	mov	r3, r0
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	4619      	mov	r1, r3
 800910a:	4620      	mov	r0, r4
 800910c:	f000 f94a 	bl	80093a4 <_ZSt22__copy_move_backward_aILb0EPPSt6vectorIhSaIhEES4_ET1_T0_S6_S5_>
 8009110:	4603      	mov	r3, r0
    }
 8009112:	4618      	mov	r0, r3
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	bd90      	pop	{r4, r7, pc}

0800911a <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800911a:	b580      	push	{r7, lr}
 800911c:	b084      	sub	sp, #16
 800911e:	af00      	add	r7, sp, #0
 8009120:	60f8      	str	r0, [r7, #12]
 8009122:	60b9      	str	r1, [r7, #8]
 8009124:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f000 f960 	bl	80093ec <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE11_M_max_sizeEv>
 800912c:	4602      	mov	r2, r0
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	4293      	cmp	r3, r2
 8009132:	bf8c      	ite	hi
 8009134:	2301      	movhi	r3, #1
 8009136:	2300      	movls	r3, #0
 8009138:	b2db      	uxtb	r3, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800913e:	f001 f8c0 	bl	800a2c2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	4613      	mov	r3, r2
 8009146:	005b      	lsls	r3, r3, #1
 8009148:	4413      	add	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4618      	mov	r0, r3
 800914e:	f001 f8a7 	bl	800a2a0 <_Znwj>
 8009152:	4603      	mov	r3, r0
      }
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800915c:	b5b0      	push	{r4, r5, r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
 8009168:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f000 f94a 	bl	8009404 <_ZSt12__niter_baseIPhET_S1_>
 8009170:	4604      	mov	r4, r0
 8009172:	68b8      	ldr	r0, [r7, #8]
 8009174:	f000 f946 	bl	8009404 <_ZSt12__niter_baseIPhET_S1_>
 8009178:	4605      	mov	r5, r0
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f942 	bl	8009404 <_ZSt12__niter_baseIPhET_S1_>
 8009180:	4602      	mov	r2, r0
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	4629      	mov	r1, r5
 8009186:	4620      	mov	r0, r4
 8009188:	f000 f946 	bl	8009418 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 800918c:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bdb0      	pop	{r4, r5, r7, pc}

08009196 <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 8009196:	b580      	push	{r7, lr}
 8009198:	b082      	sub	sp, #8
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80091a0:	463b      	mov	r3, r7
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 f953 	bl	800944e <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 80091a8:	4603      	mov	r3, r0
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	601a      	str	r2, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4618      	mov	r0, r3
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b086      	sub	sp, #24
 80091be:	af00      	add	r7, sp, #0
 80091c0:	60f8      	str	r0, [r7, #12]
 80091c2:	60b9      	str	r1, [r7, #8]
 80091c4:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80091c6:	2301      	movs	r3, #1
 80091c8:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	68b9      	ldr	r1, [r7, #8]
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f000 f947 	bl	8009462 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 80091d4:	4603      	mov	r3, r0
    }
 80091d6:	4618      	mov	r0, r3
 80091d8:	3718      	adds	r7, #24
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80091de:	b580      	push	{r7, lr}
 80091e0:	b084      	sub	sp, #16
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	60f8      	str	r0, [r7, #12]
 80091e6:	60b9      	str	r1, [r7, #8]
 80091e8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	68b9      	ldr	r1, [r7, #8]
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	f000 f947 	bl	8009482 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 80091f4:	4603      	mov	r3, r0
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <_ZNK9__gnu_cxx13new_allocatorIPSt6vectorIhSaIhEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80091fe:	b480      	push	{r7}
 8009200:	b083      	sub	sp, #12
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8009206:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800920a:	4618      	mov	r0, r3
 800920c:	370c      	adds	r7, #12
 800920e:	46bd      	mov	sp, r7
 8009210:	bc80      	pop	{r7}
 8009212:	4770      	bx	lr

08009214 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	429a      	cmp	r2, r3
 8009224:	d00a      	beq.n	800923c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f943 	bl	80094b2 <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>
 800922c:	4603      	mov	r3, r0
 800922e:	4618      	mov	r0, r3
 8009230:	f000 f949 	bl	80094c6 <_ZSt8_DestroyISt6vectorIhSaIhEEEvPT_>
	  for (; __first != __last; ++__first)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	330c      	adds	r3, #12
 8009238:	607b      	str	r3, [r7, #4]
 800923a:	e7f0      	b.n	800921e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_+0xa>
	}
 800923c:	bf00      	nop
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f805 	bl	800925c <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8009252:	4603      	mov	r3, r0
 8009254:	4618      	mov	r0, r3
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8009264:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 8009268:	4618      	mov	r0, r3
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	bc80      	pop	{r7}
 8009270:	4770      	bx	lr

08009272 <_ZSt4copyIPKhPhET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8009272:	b590      	push	{r4, r7, lr}
 8009274:	b085      	sub	sp, #20
 8009276:	af00      	add	r7, sp, #0
 8009278:	60f8      	str	r0, [r7, #12]
 800927a:	60b9      	str	r1, [r7, #8]
 800927c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 f92c 	bl	80094dc <_ZSt12__miter_baseIPKhET_S2_>
 8009284:	4604      	mov	r4, r0
 8009286:	68b8      	ldr	r0, [r7, #8]
 8009288:	f000 f928 	bl	80094dc <_ZSt12__miter_baseIPKhET_S2_>
 800928c:	4603      	mov	r3, r0
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	4619      	mov	r1, r3
 8009292:	4620      	mov	r0, r4
 8009294:	f000 f92c 	bl	80094f0 <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>
 8009298:	4603      	mov	r3, r0
    }
 800929a:	4618      	mov	r0, r3
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd90      	pop	{r4, r7, pc}

080092a2 <_ZNSt16allocator_traitsISaIhEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b082      	sub	sp, #8
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f7ff fc25 	bl	8008afe <_ZNSaIhEC1ERKS_>
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7ff f951 	bl	8008570 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 80092ce:	4602      	mov	r2, r0
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	441a      	add	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	609a      	str	r2, [r3, #8]
      }
 80092e8:	bf00      	nop
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4618      	mov	r0, r3
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	bc80      	pop	{r7}
 800930c:	4770      	bx	lr

0800930e <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800930e:	b580      	push	{r7, lr}
 8009310:	b086      	sub	sp, #24
 8009312:	af00      	add	r7, sp, #0
 8009314:	60f8      	str	r0, [r7, #12]
 8009316:	60b9      	str	r1, [r7, #8]
 8009318:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800931a:	2301      	movs	r3, #1
 800931c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	68b9      	ldr	r1, [r7, #8]
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f000 f907 	bl	8009536 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 8009328:	4603      	mov	r3, r0
    }
 800932a:	4618      	mov	r0, r3
 800932c:	3718      	adds	r7, #24
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8009332:	b580      	push	{r7, lr}
 8009334:	b082      	sub	sp, #8
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f856 	bl	80093ec <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE11_M_max_sizeEv>
 8009340:	4603      	mov	r3, r0
 8009342:	4618      	mov	r0, r3
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <_ZSt12__miter_baseIPPSt6vectorIhSaIhEEET_S5_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800934a:	b480      	push	{r7}
 800934c:	b083      	sub	sp, #12
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4618      	mov	r0, r3
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	bc80      	pop	{r7}
 800935c:	4770      	bx	lr

0800935e <_ZSt13__copy_move_aILb0EPPSt6vectorIhSaIhEES4_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800935e:	b5b0      	push	{r4, r5, r7, lr}
 8009360:	b084      	sub	sp, #16
 8009362:	af00      	add	r7, sp, #0
 8009364:	60f8      	str	r0, [r7, #12]
 8009366:	60b9      	str	r1, [r7, #8]
 8009368:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f000 f8f3 	bl	8009556 <_ZSt12__niter_baseIPPSt6vectorIhSaIhEEET_S5_>
 8009370:	4604      	mov	r4, r0
 8009372:	68b8      	ldr	r0, [r7, #8]
 8009374:	f000 f8ef 	bl	8009556 <_ZSt12__niter_baseIPPSt6vectorIhSaIhEEET_S5_>
 8009378:	4605      	mov	r5, r0
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4618      	mov	r0, r3
 800937e:	f000 f8ea 	bl	8009556 <_ZSt12__niter_baseIPPSt6vectorIhSaIhEEET_S5_>
 8009382:	4603      	mov	r3, r0
 8009384:	461a      	mov	r2, r3
 8009386:	4629      	mov	r1, r5
 8009388:	4620      	mov	r0, r4
 800938a:	f000 f8ee 	bl	800956a <_ZSt14__copy_move_a1ILb0EPPSt6vectorIhSaIhEES4_ET1_T0_S6_S5_>
 800938e:	4602      	mov	r2, r0
 8009390:	1d3b      	adds	r3, r7, #4
 8009392:	4611      	mov	r1, r2
 8009394:	4618      	mov	r0, r3
 8009396:	f000 f8f8 	bl	800958a <_ZSt12__niter_wrapIPPSt6vectorIhSaIhEEET_RKS5_S5_>
 800939a:	4603      	mov	r3, r0
    }
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bdb0      	pop	{r4, r5, r7, pc}

080093a4 <_ZSt22__copy_move_backward_aILb0EPPSt6vectorIhSaIhEES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80093a4:	b5b0      	push	{r4, r5, r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 f8d0 	bl	8009556 <_ZSt12__niter_baseIPPSt6vectorIhSaIhEEET_S5_>
 80093b6:	4604      	mov	r4, r0
 80093b8:	68b8      	ldr	r0, [r7, #8]
 80093ba:	f000 f8cc 	bl	8009556 <_ZSt12__niter_baseIPPSt6vectorIhSaIhEEET_S5_>
 80093be:	4605      	mov	r5, r0
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 f8c7 	bl	8009556 <_ZSt12__niter_baseIPPSt6vectorIhSaIhEEET_S5_>
 80093c8:	4603      	mov	r3, r0
 80093ca:	461a      	mov	r2, r3
 80093cc:	4629      	mov	r1, r5
 80093ce:	4620      	mov	r0, r4
 80093d0:	f000 f8e6 	bl	80095a0 <_ZSt23__copy_move_backward_a1ILb0EPPSt6vectorIhSaIhEES4_ET1_T0_S6_S5_>
 80093d4:	4602      	mov	r2, r0
 80093d6:	1d3b      	adds	r3, r7, #4
 80093d8:	4611      	mov	r1, r2
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 f8d5 	bl	800958a <_ZSt12__niter_wrapIPPSt6vectorIhSaIhEEET_RKS5_S5_>
 80093e0:	4603      	mov	r3, r0
    }
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080093ec <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80093f4:	4b02      	ldr	r3, [pc, #8]	; (8009400 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE11_M_max_sizeEv+0x14>)
      }
 80093f6:	4618      	mov	r0, r3
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bc80      	pop	{r7}
 80093fe:	4770      	bx	lr
 8009400:	0aaaaaaa 	.word	0x0aaaaaaa

08009404 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4618      	mov	r0, r3
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	bc80      	pop	{r7}
 8009416:	4770      	bx	lr

08009418 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	2b00      	cmp	r3, #0
 8009432:	dd05      	ble.n	8009440 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	461a      	mov	r2, r3
 8009438:	68f9      	ldr	r1, [r7, #12]
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f001 f9f8 	bl	800a830 <memmove>
      return __result + __count;
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	4413      	add	r3, r2
    }
 8009446:	4618      	mov	r0, r3
 8009448:	3718      	adds	r7, #24
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800944e:	b480      	push	{r7}
 8009450:	b083      	sub	sp, #12
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4618      	mov	r0, r3
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	bc80      	pop	{r7}
 8009460:	4770      	bx	lr

08009462 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8009462:	b580      	push	{r7, lr}
 8009464:	b084      	sub	sp, #16
 8009466:	af00      	add	r7, sp, #0
 8009468:	60f8      	str	r0, [r7, #12]
 800946a:	60b9      	str	r1, [r7, #8]
 800946c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	68b9      	ldr	r1, [r7, #8]
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	f000 f8a4 	bl	80095c0 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8009478:	4603      	mov	r3, r0
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8009482:	b590      	push	{r4, r7, lr}
 8009484:	b085      	sub	sp, #20
 8009486:	af00      	add	r7, sp, #0
 8009488:	60f8      	str	r0, [r7, #12]
 800948a:	60b9      	str	r1, [r7, #8]
 800948c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f000 f8ae 	bl	80095f0 <_ZSt12__miter_baseIPhET_S1_>
 8009494:	4604      	mov	r4, r0
 8009496:	68b8      	ldr	r0, [r7, #8]
 8009498:	f000 f8aa 	bl	80095f0 <_ZSt12__miter_baseIPhET_S1_>
 800949c:	4603      	mov	r3, r0
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	4619      	mov	r1, r3
 80094a2:	4620      	mov	r0, r4
 80094a4:	f000 f8ae 	bl	8009604 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 80094a8:	4603      	mov	r3, r0
    }
 80094aa:	4618      	mov	r0, r3
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd90      	pop	{r4, r7, pc}

080094b2 <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80094b2:	b480      	push	{r7}
 80094b4:	b083      	sub	sp, #12
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4618      	mov	r0, r3
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bc80      	pop	{r7}
 80094c4:	4770      	bx	lr

080094c6 <_ZSt8_DestroyISt6vectorIhSaIhEEEvPT_>:
    _Destroy(_Tp* __pointer)
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b082      	sub	sp, #8
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7f8 f85e 	bl	8001590 <_ZNSt6vectorIhSaIhEED1Ev>
    }
 80094d4:	bf00      	nop
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <_ZSt12__miter_baseIPKhET_S2_>:
    __miter_base(_Iterator __it)
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4618      	mov	r0, r3
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bc80      	pop	{r7}
 80094ee:	4770      	bx	lr

080094f0 <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80094f0:	b5b0      	push	{r4, r5, r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f000 f8a4 	bl	800964a <_ZSt12__niter_baseIPKhET_S2_>
 8009502:	4604      	mov	r4, r0
 8009504:	68b8      	ldr	r0, [r7, #8]
 8009506:	f000 f8a0 	bl	800964a <_ZSt12__niter_baseIPKhET_S2_>
 800950a:	4605      	mov	r5, r0
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4618      	mov	r0, r3
 8009510:	f7ff ff78 	bl	8009404 <_ZSt12__niter_baseIPhET_S1_>
 8009514:	4603      	mov	r3, r0
 8009516:	461a      	mov	r2, r3
 8009518:	4629      	mov	r1, r5
 800951a:	4620      	mov	r0, r4
 800951c:	f000 f89f 	bl	800965e <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8009520:	4602      	mov	r2, r0
 8009522:	1d3b      	adds	r3, r7, #4
 8009524:	4611      	mov	r1, r2
 8009526:	4618      	mov	r0, r3
 8009528:	f000 f8a9 	bl	800967e <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 800952c:	4603      	mov	r3, r0
    }
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bdb0      	pop	{r4, r5, r7, pc}

08009536 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8009536:	b580      	push	{r7, lr}
 8009538:	b084      	sub	sp, #16
 800953a:	af00      	add	r7, sp, #0
 800953c:	60f8      	str	r0, [r7, #12]
 800953e:	60b9      	str	r1, [r7, #8]
 8009540:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	68b9      	ldr	r1, [r7, #8]
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f000 f8a4 	bl	8009694 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 800954c:	4603      	mov	r3, r0
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <_ZSt12__niter_baseIPPSt6vectorIhSaIhEEET_S5_>:
    __niter_base(_Iterator __it)
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4618      	mov	r0, r3
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	bc80      	pop	{r7}
 8009568:	4770      	bx	lr

0800956a <_ZSt14__copy_move_a1ILb0EPPSt6vectorIhSaIhEES4_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800956a:	b580      	push	{r7, lr}
 800956c:	b084      	sub	sp, #16
 800956e:	af00      	add	r7, sp, #0
 8009570:	60f8      	str	r0, [r7, #12]
 8009572:	60b9      	str	r1, [r7, #8]
 8009574:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	68b9      	ldr	r1, [r7, #8]
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f000 f8a2 	bl	80096c4 <_ZSt14__copy_move_a2ILb0EPPSt6vectorIhSaIhEES4_ET1_T0_S6_S5_>
 8009580:	4603      	mov	r3, r0
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <_ZSt12__niter_wrapIPPSt6vectorIhSaIhEEET_RKS5_S5_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800958a:	b480      	push	{r7}
 800958c:	b083      	sub	sp, #12
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	6039      	str	r1, [r7, #0]
    { return __res; }
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	4618      	mov	r0, r3
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	bc80      	pop	{r7}
 800959e:	4770      	bx	lr

080095a0 <_ZSt23__copy_move_backward_a1ILb0EPPSt6vectorIhSaIhEES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	68b9      	ldr	r1, [r7, #8]
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 f897 	bl	80096e4 <_ZSt23__copy_move_backward_a2ILb0EPPSt6vectorIhSaIhEES4_ET1_T0_S6_S5_>
 80095b6:	4603      	mov	r3, r0
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80095c0:	b590      	push	{r4, r7, lr}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f000 f899 	bl	8009704 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80095d2:	4604      	mov	r4, r0
 80095d4:	68b8      	ldr	r0, [r7, #8]
 80095d6:	f000 f895 	bl	8009704 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80095da:	4603      	mov	r3, r0
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	4619      	mov	r1, r3
 80095e0:	4620      	mov	r0, r4
 80095e2:	f000 f8a0 	bl	8009726 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 80095e6:	4603      	mov	r3, r0
    }
 80095e8:	4618      	mov	r0, r3
 80095ea:	3714      	adds	r7, #20
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd90      	pop	{r4, r7, pc}

080095f0 <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4618      	mov	r0, r3
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	bc80      	pop	{r7}
 8009602:	4770      	bx	lr

08009604 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8009604:	b5b0      	push	{r4, r5, r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f7ff fef7 	bl	8009404 <_ZSt12__niter_baseIPhET_S1_>
 8009616:	4604      	mov	r4, r0
 8009618:	68b8      	ldr	r0, [r7, #8]
 800961a:	f7ff fef3 	bl	8009404 <_ZSt12__niter_baseIPhET_S1_>
 800961e:	4605      	mov	r5, r0
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4618      	mov	r0, r3
 8009624:	f7ff feee 	bl	8009404 <_ZSt12__niter_baseIPhET_S1_>
 8009628:	4603      	mov	r3, r0
 800962a:	461a      	mov	r2, r3
 800962c:	4629      	mov	r1, r5
 800962e:	4620      	mov	r0, r4
 8009630:	f000 f89c 	bl	800976c <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 8009634:	4602      	mov	r2, r0
 8009636:	1d3b      	adds	r3, r7, #4
 8009638:	4611      	mov	r1, r2
 800963a:	4618      	mov	r0, r3
 800963c:	f000 f81f 	bl	800967e <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8009640:	4603      	mov	r3, r0
    }
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bdb0      	pop	{r4, r5, r7, pc}

0800964a <_ZSt12__niter_baseIPKhET_S2_>:
    __niter_base(_Iterator __it)
 800964a:	b480      	push	{r7}
 800964c:	b083      	sub	sp, #12
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4618      	mov	r0, r3
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	bc80      	pop	{r7}
 800965c:	4770      	bx	lr

0800965e <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	60f8      	str	r0, [r7, #12]
 8009666:	60b9      	str	r1, [r7, #8]
 8009668:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	68b9      	ldr	r1, [r7, #8]
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 f88c 	bl	800978c <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>
 8009674:	4603      	mov	r3, r0
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800967e:	b480      	push	{r7}
 8009680:	b083      	sub	sp, #12
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	6039      	str	r1, [r7, #0]
    { return __res; }
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	4618      	mov	r0, r3
 800968c:	370c      	adds	r7, #12
 800968e:	46bd      	mov	sp, r7
 8009690:	bc80      	pop	{r7}
 8009692:	4770      	bx	lr

08009694 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8009694:	b590      	push	{r4, r7, lr}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f000 f883 	bl	80097ac <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 80096a6:	4604      	mov	r4, r0
 80096a8:	68b8      	ldr	r0, [r7, #8]
 80096aa:	f000 f87f 	bl	80097ac <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 80096ae:	4603      	mov	r3, r0
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	4619      	mov	r1, r3
 80096b4:	4620      	mov	r0, r4
 80096b6:	f000 f883 	bl	80097c0 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 80096ba:	4603      	mov	r3, r0
    }
 80096bc:	4618      	mov	r0, r3
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd90      	pop	{r4, r7, pc}

080096c4 <_ZSt14__copy_move_a2ILb0EPPSt6vectorIhSaIhEES4_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	68b9      	ldr	r1, [r7, #8]
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f000 f896 	bl	8009806 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt6vectorIhSaIhEEEEPT_PKS7_SA_S8_>
 80096da:	4603      	mov	r3, r0
    }
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <_ZSt23__copy_move_backward_a2ILb0EPPSt6vectorIhSaIhEES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	68b9      	ldr	r1, [r7, #8]
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f000 f8a3 	bl	8009840 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt6vectorIhSaIhEEEEPT_PKS7_SA_S8_>
 80096fa:	4603      	mov	r3, r0
    }
 80096fc:	4618      	mov	r0, r3
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 800970c:	1d3b      	adds	r3, r7, #4
 800970e:	4618      	mov	r0, r3
 8009710:	f000 f8b8 	bl	8009884 <_ZNKSt13move_iteratorIPhE4baseEv>
 8009714:	4603      	mov	r3, r0
 8009716:	4618      	mov	r0, r3
 8009718:	f7ff ff6a 	bl	80095f0 <_ZSt12__miter_baseIPhET_S1_>
 800971c:	4603      	mov	r3, r0
 800971e:	4618      	mov	r0, r3
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8009726:	b5b0      	push	{r4, r5, r7, lr}
 8009728:	b084      	sub	sp, #16
 800972a:	af00      	add	r7, sp, #0
 800972c:	60f8      	str	r0, [r7, #12]
 800972e:	60b9      	str	r1, [r7, #8]
 8009730:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f7ff fe66 	bl	8009404 <_ZSt12__niter_baseIPhET_S1_>
 8009738:	4604      	mov	r4, r0
 800973a:	68b8      	ldr	r0, [r7, #8]
 800973c:	f7ff fe62 	bl	8009404 <_ZSt12__niter_baseIPhET_S1_>
 8009740:	4605      	mov	r5, r0
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4618      	mov	r0, r3
 8009746:	f7ff fe5d 	bl	8009404 <_ZSt12__niter_baseIPhET_S1_>
 800974a:	4603      	mov	r3, r0
 800974c:	461a      	mov	r2, r3
 800974e:	4629      	mov	r1, r5
 8009750:	4620      	mov	r0, r4
 8009752:	f000 f8a2 	bl	800989a <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>
 8009756:	4602      	mov	r2, r0
 8009758:	1d3b      	adds	r3, r7, #4
 800975a:	4611      	mov	r1, r2
 800975c:	4618      	mov	r0, r3
 800975e:	f7ff ff8e 	bl	800967e <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8009762:	4603      	mov	r3, r0
    }
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bdb0      	pop	{r4, r5, r7, pc}

0800976c <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	68b9      	ldr	r1, [r7, #8]
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f000 f89c 	bl	80098ba <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 8009782:	4603      	mov	r3, r0
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	68b9      	ldr	r1, [r7, #8]
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f000 f89c 	bl	80098da <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80097a2:	4603      	mov	r3, r0
    }
 80097a4:	4618      	mov	r0, r3
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
    __miter_base(_Iterator __it)
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4618      	mov	r0, r3
 80097b8:	370c      	adds	r7, #12
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bc80      	pop	{r7}
 80097be:	4770      	bx	lr

080097c0 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80097c0:	b5b0      	push	{r4, r5, r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80097cc:	68f8      	ldr	r0, [r7, #12]
 80097ce:	f000 f89e 	bl	800990e <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80097d2:	4604      	mov	r4, r0
 80097d4:	68b8      	ldr	r0, [r7, #8]
 80097d6:	f000 f89a 	bl	800990e <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80097da:	4605      	mov	r5, r0
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4618      	mov	r0, r3
 80097e0:	f7ff fe10 	bl	8009404 <_ZSt12__niter_baseIPhET_S1_>
 80097e4:	4603      	mov	r3, r0
 80097e6:	461a      	mov	r2, r3
 80097e8:	4629      	mov	r1, r5
 80097ea:	4620      	mov	r0, r4
 80097ec:	f7ff ff37 	bl	800965e <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 80097f0:	4602      	mov	r2, r0
 80097f2:	1d3b      	adds	r3, r7, #4
 80097f4:	4611      	mov	r1, r2
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7ff ff41 	bl	800967e <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 80097fc:	4603      	mov	r3, r0
    }
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bdb0      	pop	{r4, r5, r7, pc}

08009806 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt6vectorIhSaIhEEEEPT_PKS7_SA_S8_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8009806:	b580      	push	{r7, lr}
 8009808:	b086      	sub	sp, #24
 800980a:	af00      	add	r7, sp, #0
 800980c:	60f8      	str	r0, [r7, #12]
 800980e:	60b9      	str	r1, [r7, #8]
 8009810:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	109b      	asrs	r3, r3, #2
 800981a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d006      	beq.n	8009830 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt6vectorIhSaIhEEEEPT_PKS7_SA_S8_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	461a      	mov	r2, r3
 8009828:	68f9      	ldr	r1, [r7, #12]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f001 f800 	bl	800a830 <memmove>
	  return __result + _Num;
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	4413      	add	r3, r2
	}
 8009838:	4618      	mov	r0, r3
 800983a:	3718      	adds	r7, #24
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt6vectorIhSaIhEEEEPT_PKS7_SA_S8_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	109b      	asrs	r3, r3, #2
 8009854:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d00a      	beq.n	8009872 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt6vectorIhSaIhEEEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	425b      	negs	r3, r3
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	18d0      	adds	r0, r2, r3
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	461a      	mov	r2, r3
 800986c:	68f9      	ldr	r1, [r7, #12]
 800986e:	f000 ffdf 	bl	800a830 <memmove>
	  return __result - _Num;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	425b      	negs	r3, r3
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	4413      	add	r3, r2
	}
 800987c:	4618      	mov	r0, r3
 800987e:	3718      	adds	r7, #24
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4618      	mov	r0, r3
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	bc80      	pop	{r7}
 8009898:	4770      	bx	lr

0800989a <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800989a:	b580      	push	{r7, lr}
 800989c:	b084      	sub	sp, #16
 800989e:	af00      	add	r7, sp, #0
 80098a0:	60f8      	str	r0, [r7, #12]
 80098a2:	60b9      	str	r1, [r7, #8]
 80098a4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	68b9      	ldr	r1, [r7, #8]
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f000 f83d 	bl	800992a <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 80098b0:	4603      	mov	r3, r0
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b084      	sub	sp, #16
 80098be:	af00      	add	r7, sp, #0
 80098c0:	60f8      	str	r0, [r7, #12]
 80098c2:	60b9      	str	r1, [r7, #8]
 80098c4:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	68b9      	ldr	r1, [r7, #8]
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f000 f805 	bl	80098da <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80098d0:	4603      	mov	r3, r0
    }
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80098da:	b580      	push	{r7, lr}
 80098dc:	b086      	sub	sp, #24
 80098de:	af00      	add	r7, sp, #0
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	60b9      	str	r1, [r7, #8]
 80098e4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d005      	beq.n	8009900 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	461a      	mov	r2, r3
 80098f8:	68f9      	ldr	r1, [r7, #12]
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 ff98 	bl	800a830 <memmove>
	  return __result + _Num;
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	4413      	add	r3, r2
	}
 8009906:	4618      	mov	r0, r3
 8009908:	3718      	adds	r7, #24
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8009916:	1d3b      	adds	r3, r7, #4
 8009918:	4618      	mov	r0, r3
 800991a:	f000 f816 	bl	800994a <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 800991e:	4603      	mov	r3, r0
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4618      	mov	r0, r3
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	68b9      	ldr	r1, [r7, #8]
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f000 f80f 	bl	800995e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8009940:	4603      	mov	r3, r0
    }
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800994a:	b480      	push	{r7}
 800994c:	b083      	sub	sp, #12
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4618      	mov	r0, r3
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	bc80      	pop	{r7}
 800995c:	4770      	bx	lr

0800995e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800995e:	b580      	push	{r7, lr}
 8009960:	b086      	sub	sp, #24
 8009962:	af00      	add	r7, sp, #0
 8009964:	60f8      	str	r0, [r7, #12]
 8009966:	60b9      	str	r1, [r7, #8]
 8009968:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d005      	beq.n	8009984 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	461a      	mov	r2, r3
 800997c:	68f9      	ldr	r1, [r7, #12]
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 ff56 	bl	800a830 <memmove>
	  return __result + _Num;
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	4413      	add	r3, r2
	}
 800998a:	4618      	mov	r0, r3
 800998c:	3718      	adds	r7, #24
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <_ZN8TerminalC1EP20__UART_HandleTypeDef>:
 *  Created on: Apr 27, 2023
 *      Author: ADMIN
 */
#include "terminal.h"

Terminal::Terminal(UART_HandleTypeDef* huart){
 8009992:	b580      	push	{r7, lr}
 8009994:	b082      	sub	sp, #8
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
 800999a:	6039      	str	r1, [r7, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	3310      	adds	r3, #16
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7fd fdb2 	bl	800750a <_ZNSt6vectorIhSaIhEEC1Ev>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	331c      	adds	r3, #28
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fd fbab 	bl	8007106 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EEC1Ev>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	3344      	adds	r3, #68	; 0x44
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fd fba6 	bl	8007106 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EEC1Ev>
	this->huart = huart;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	601a      	str	r2, [r3, #0]

	stage = 0;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	flagTxDone = HAL_OK;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4618      	mov	r0, r3
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <_ZN8TerminalD1Ev>:

Terminal::~Terminal(){
 80099da:	b580      	push	{r7, lr}
 80099dc:	b082      	sub	sp, #8
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	3344      	adds	r3, #68	; 0x44
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fe f83d 	bl	8007a66 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EED1Ev>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	331c      	adds	r3, #28
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7fe f838 	bl	8007a66 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EED1Ev>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	3310      	adds	r3, #16
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7f7 fdc8 	bl	8001590 <_ZNSt6vectorIhSaIhEED1Ev>

}
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4618      	mov	r0, r3
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <_ZN8Terminal7run_vecEv>:
//		listData.pop_front();
//		stage = 0;
//	}
//}

void Terminal::run_vec() {
 8009a0a:	b5b0      	push	{r4, r5, r7, lr}
 8009a0c:	b082      	sub	sp, #8
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
	if (stage == 0) {
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d117      	bne.n	8009a4c <_ZN8Terminal7run_vecEv+0x42>
		if (HAL_UARTEx_ReceiveToIdle_DMA(huart, aRXBufferUser, sizeof(aRXBufferUser)) != HAL_OK) return;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6818      	ldr	r0, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	3304      	adds	r3, #4
 8009a24:	220a      	movs	r2, #10
 8009a26:	4619      	mov	r1, r3
 8009a28:	f7fc fe04 	bl	8006634 <HAL_UARTEx_ReceiveToIdle_DMA>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	bf14      	ite	ne
 8009a32:	2301      	movne	r3, #1
 8009a34:	2300      	moveq	r3, #0
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d157      	bne.n	8009aec <_ZN8Terminal7run_vecEv+0xe2>
		stage++;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009a42:	3301      	adds	r3, #1
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	}

	if (stage == 1){
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d136      	bne.n	8009ac4 <_ZN8Terminal7run_vecEv+0xba>
		if (pTxlistData_vec.size() == 0) return;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	331c      	adds	r3, #28
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7f7 fbef 	bl	800123e <_ZNKSt5dequeISt6vectorIhSaIhEESaIS2_EE4sizeEv>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	bf0c      	ite	eq
 8009a66:	2301      	moveq	r3, #1
 8009a68:	2300      	movne	r3, #0
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d13f      	bne.n	8009af0 <_ZN8Terminal7run_vecEv+0xe6>
		HAL_UART_Transmit_DMA(huart, pTxlistData_vec[0].data(), pTxlistData_vec[0].size());
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681c      	ldr	r4, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	331c      	adds	r3, #28
 8009a78:	2100      	movs	r1, #0
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7f7 fbf1 	bl	8001262 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EEixEj>
 8009a80:	4603      	mov	r3, r0
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fe f814 	bl	8007ab0 <_ZNSt6vectorIhSaIhEE4dataEv>
 8009a88:	4605      	mov	r5, r0
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	331c      	adds	r3, #28
 8009a8e:	2100      	movs	r1, #0
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7f7 fbe6 	bl	8001262 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EEixEj>
 8009a96:	4603      	mov	r3, r0
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7ff f9b9 	bl	8008e10 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f7fc fd58 	bl	800655c <HAL_UART_Transmit_DMA>
		flagTxDone = HAL_BUSY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2202      	movs	r2, #2
 8009ab0:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

		stage++;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009aba:	3301      	adds	r3, #1
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	}
	if (stage == 2) {
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d113      	bne.n	8009af6 <_ZN8Terminal7run_vecEv+0xec>
		if (flagTxDone != HAL_OK) return;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10d      	bne.n	8009af4 <_ZN8Terminal7run_vecEv+0xea>
		pTxlistData_vec.pop_front();
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	331c      	adds	r3, #28
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7f7 fbd1 	bl	8001284 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE9pop_frontEv>
		stage = 1;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8009aea:	e004      	b.n	8009af6 <_ZN8Terminal7run_vecEv+0xec>
		if (HAL_UARTEx_ReceiveToIdle_DMA(huart, aRXBufferUser, sizeof(aRXBufferUser)) != HAL_OK) return;
 8009aec:	bf00      	nop
 8009aee:	e002      	b.n	8009af6 <_ZN8Terminal7run_vecEv+0xec>
		if (pTxlistData_vec.size() == 0) return;
 8009af0:	bf00      	nop
 8009af2:	e000      	b.n	8009af6 <_ZN8Terminal7run_vecEv+0xec>
		if (flagTxDone != HAL_OK) return;
 8009af4:	bf00      	nop
	}
}
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bdb0      	pop	{r4, r5, r7, pc}

08009afc <_ZN8Terminal11setListDataEPSt6vectorIhSaIhEE>:

//void Terminal::setListData(const std::string &data){
//	listData.push_back(data);
//}

void Terminal::setListData(std::vector<uint8_t>* data){
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
	pTxlistData_vec.push_back(*data);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	331c      	adds	r3, #28
 8009b0a:	6839      	ldr	r1, [r7, #0]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fe f80b 	bl	8007b28 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE9push_backERKS2_>
}
 8009b12:	bf00      	nop
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <_ZN8Terminal13getRxListDataEv>:

//uint8_t Terminal::getSizeRxListData(){
//	return pRxlistData_vec.size();
//}

std::deque<std::vector<uint8_t>>* Terminal::getRxListData() {
 8009b1a:	b480      	push	{r7}
 8009b1c:	b083      	sub	sp, #12
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
	return &pRxlistData_vec;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	3344      	adds	r3, #68	; 0x44
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	370c      	adds	r7, #12
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bc80      	pop	{r7}
 8009b2e:	4770      	bx	lr

08009b30 <_ZN8Terminal14TxCpltCallbackEP20__UART_HandleTypeDef>:

void Terminal::TxCpltCallback(UART_HandleTypeDef *huart) {
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
	if (this->huart->Instance == huart->Instance) {
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d103      	bne.n	8009b50 <_ZN8Terminal14TxCpltCallbackEP20__UART_HandleTypeDef+0x20>
		flagTxDone = HAL_OK;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	}
}
 8009b50:	bf00      	nop
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bc80      	pop	{r7}
 8009b58:	4770      	bx	lr
	...

08009b5c <__tcf_0>:

void Terminal::RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size, uint8_t* flagIDLE) {
	if (this->huart->Instance != huart->Instance) return;

	static uint16_t old_pos = 0;
	static std::vector<uint8_t> pRxdata_vec;
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	4801      	ldr	r0, [pc, #4]	; (8009b68 <__tcf_0+0xc>)
 8009b62:	f7f7 fd15 	bl	8001590 <_ZNSt6vectorIhSaIhEED1Ev>
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	20000cd8 	.word	0x20000cd8

08009b6c <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh>:
void Terminal::RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size, uint8_t* flagIDLE) {
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b088      	sub	sp, #32
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	603b      	str	r3, [r7, #0]
 8009b78:	4613      	mov	r3, r2
 8009b7a:	80fb      	strh	r3, [r7, #6]
	if (this->huart->Instance != huart->Instance) return;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d173      	bne.n	8009c72 <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0x106>
	static std::vector<uint8_t> pRxdata_vec;
 8009b8a:	4b3c      	ldr	r3, [pc, #240]	; (8009c7c <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0x110>)
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	f3bf 8f5b 	dmb	ish
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	f003 0301 	and.w	r3, r3, #1
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	bf0c      	ite	eq
 8009b9c:	2301      	moveq	r3, #1
 8009b9e:	2300      	movne	r3, #0
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d013      	beq.n	8009bce <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0x62>
 8009ba6:	4835      	ldr	r0, [pc, #212]	; (8009c7c <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0x110>)
 8009ba8:	f000 fb6b 	bl	800a282 <__cxa_guard_acquire>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	bf14      	ite	ne
 8009bb2:	2301      	movne	r3, #1
 8009bb4:	2300      	moveq	r3, #0
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d008      	beq.n	8009bce <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0x62>
 8009bbc:	4830      	ldr	r0, [pc, #192]	; (8009c80 <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0x114>)
 8009bbe:	f7fd fca4 	bl	800750a <_ZNSt6vectorIhSaIhEEC1Ev>
 8009bc2:	4830      	ldr	r0, [pc, #192]	; (8009c84 <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0x118>)
 8009bc4:	f000 fb95 	bl	800a2f2 <atexit>
 8009bc8:	482c      	ldr	r0, [pc, #176]	; (8009c7c <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0x110>)
 8009bca:	f000 fb66 	bl	800a29a <__cxa_guard_release>

	/* Check if number of received data in recpetion buffer has changed */
	if (Size != old_pos){
 8009bce:	4b2e      	ldr	r3, [pc, #184]	; (8009c88 <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0x11c>)
 8009bd0:	881b      	ldrh	r3, [r3, #0]
 8009bd2:	88fa      	ldrh	r2, [r7, #6]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d038      	beq.n	8009c4a <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0xde>

		/* Check if position of index in reception buffer has simply be increased
			   of if end of buffer has been reached */
		if (Size > old_pos){
 8009bd8:	4b2b      	ldr	r3, [pc, #172]	; (8009c88 <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0x11c>)
 8009bda:	881b      	ldrh	r3, [r3, #0]
 8009bdc:	88fa      	ldrh	r2, [r7, #6]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d91b      	bls.n	8009c1a <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0xae>

			/* Current position is higher than previous one */
			/* Copy received data in "User" buffer for evacuation */
			pRxdata_vec.insert(pRxdata_vec.end(), aRXBufferUser + old_pos, aRXBufferUser + Size);
 8009be2:	4827      	ldr	r0, [pc, #156]	; (8009c80 <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0x114>)
 8009be4:	f7fe fa48 	bl	8008078 <_ZNSt6vectorIhSaIhEE3endEv>
 8009be8:	4603      	mov	r3, r0
 8009bea:	617b      	str	r3, [r7, #20]
 8009bec:	f107 0214 	add.w	r2, r7, #20
 8009bf0:	f107 0310 	add.w	r3, r7, #16
 8009bf4:	4611      	mov	r1, r2
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 f848 	bl	8009c8c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1IPhEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	3304      	adds	r3, #4
 8009c00:	4a21      	ldr	r2, [pc, #132]	; (8009c88 <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0x11c>)
 8009c02:	8812      	ldrh	r2, [r2, #0]
 8009c04:	1899      	adds	r1, r3, r2
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	1d1a      	adds	r2, r3, #4
 8009c0a:	88fb      	ldrh	r3, [r7, #6]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	460a      	mov	r2, r1
 8009c10:	6939      	ldr	r1, [r7, #16]
 8009c12:	481b      	ldr	r0, [pc, #108]	; (8009c80 <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0x114>)
 8009c14:	f000 f84b 	bl	8009cae <_ZNSt6vectorIhSaIhEE6insertIPhvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKhS1_EET_SA_>
 8009c18:	e017      	b.n	8009c4a <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0xde>
		}
		else {

			/* Current position is lower than previous one : end of buffer has been reached */
			/* First copy data from current position till end of buffer */
			pRxdata_vec.insert(pRxdata_vec.end(), aRXBufferUser, aRXBufferUser + Size);
 8009c1a:	4819      	ldr	r0, [pc, #100]	; (8009c80 <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0x114>)
 8009c1c:	f7fe fa2c 	bl	8008078 <_ZNSt6vectorIhSaIhEE3endEv>
 8009c20:	4603      	mov	r3, r0
 8009c22:	61fb      	str	r3, [r7, #28]
 8009c24:	f107 021c 	add.w	r2, r7, #28
 8009c28:	f107 0318 	add.w	r3, r7, #24
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 f82c 	bl	8009c8c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1IPhEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	1d19      	adds	r1, r3, #4
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	1d1a      	adds	r2, r3, #4
 8009c3c:	88fb      	ldrh	r3, [r7, #6]
 8009c3e:	4413      	add	r3, r2
 8009c40:	460a      	mov	r2, r1
 8009c42:	69b9      	ldr	r1, [r7, #24]
 8009c44:	480e      	ldr	r0, [pc, #56]	; (8009c80 <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0x114>)
 8009c46:	f000 f832 	bl	8009cae <_ZNSt6vectorIhSaIhEE6insertIPhvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKhS1_EET_SA_>
		}
	}

	/* Check if IDLE flag is set */
	if (*flagIDLE == SET) {
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d10b      	bne.n	8009c6a <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0xfe>

		/* Clear IDLE flag in ISR */
		*flagIDLE = RESET;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	2200      	movs	r2, #0
 8009c56:	701a      	strb	r2, [r3, #0]

		/* Insert Vec into rxBuffer_deque */
		pRxlistData_vec.push_back(pRxdata_vec);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	3344      	adds	r3, #68	; 0x44
 8009c5c:	4908      	ldr	r1, [pc, #32]	; (8009c80 <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0x114>)
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fd ff62 	bl	8007b28 <_ZNSt5dequeISt6vectorIhSaIhEESaIS2_EE9push_backERKS2_>
		pRxdata_vec.clear();
 8009c64:	4806      	ldr	r0, [pc, #24]	; (8009c80 <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0x114>)
 8009c66:	f000 f85a 	bl	8009d1e <_ZNSt6vectorIhSaIhEE5clearEv>
	}

	/* Update old_pos as new reference of position in User Rx buffer that
			indicates position to which data have been processed */
	old_pos = Size;
 8009c6a:	4a07      	ldr	r2, [pc, #28]	; (8009c88 <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0x11c>)
 8009c6c:	88fb      	ldrh	r3, [r7, #6]
 8009c6e:	8013      	strh	r3, [r2, #0]
 8009c70:	e000      	b.n	8009c74 <_ZN8Terminal15RxEventCallbackEP20__UART_HandleTypeDeftPh+0x108>
	if (this->huart->Instance != huart->Instance) return;
 8009c72:	bf00      	nop
}
 8009c74:	3720      	adds	r7, #32
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20000ce4 	.word	0x20000ce4
 8009c80:	20000cd8 	.word	0x20000cd8
 8009c84:	08009b5d 	.word	0x08009b5d
 8009c88:	20000cd6 	.word	0x20000cd6

08009c8c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1IPhEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 8009c96:	6838      	ldr	r0, [r7, #0]
 8009c98:	f7fe fe73 	bl	8008982 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	601a      	str	r2, [r3, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <_ZNSt6vectorIhSaIhEE6insertIPhvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKhS1_EET_SA_>:
	insert(const_iterator __position, _InputIterator __first,
 8009cae:	b590      	push	{r4, r7, lr}
 8009cb0:	b08b      	sub	sp, #44	; 0x2c
 8009cb2:	af02      	add	r7, sp, #8
 8009cb4:	60f8      	str	r0, [r7, #12]
 8009cb6:	60b9      	str	r1, [r7, #8]
 8009cb8:	607a      	str	r2, [r7, #4]
 8009cba:	603b      	str	r3, [r7, #0]
	  difference_type __offset = __position - cbegin();
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f000 f83c 	bl	8009d3a <_ZNKSt6vectorIhSaIhEE6cbeginEv>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	613b      	str	r3, [r7, #16]
 8009cc6:	f107 0210 	add.w	r2, r7, #16
 8009cca:	f107 0308 	add.w	r3, r7, #8
 8009cce:	4611      	mov	r1, r2
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f000 f842 	bl	8009d5a <_ZN9__gnu_cxxmiIPKhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8009cd6:	61f8      	str	r0, [r7, #28]
	  _M_insert_dispatch(begin() + __offset,
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f7fe fe1a 	bl	8008912 <_ZNSt6vectorIhSaIhEE5beginEv>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	617b      	str	r3, [r7, #20]
 8009ce2:	f107 0314 	add.w	r3, r7, #20
 8009ce6:	69f9      	ldr	r1, [r7, #28]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f000 f84a 	bl	8009d82 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 8009cee:	4601      	mov	r1, r0
 8009cf0:	f88d 4000 	strb.w	r4, [sp]
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f000 f859 	bl	8009db0 <_ZNSt6vectorIhSaIhEE18_M_insert_dispatchIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St12__false_type>
	  return begin() + __offset;
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f7fe fe07 	bl	8008912 <_ZNSt6vectorIhSaIhEE5beginEv>
 8009d04:	4603      	mov	r3, r0
 8009d06:	61bb      	str	r3, [r7, #24]
 8009d08:	f107 0318 	add.w	r3, r7, #24
 8009d0c:	69f9      	ldr	r1, [r7, #28]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 f837 	bl	8009d82 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 8009d14:	4603      	mov	r3, r0
	}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3724      	adds	r7, #36	; 0x24
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd90      	pop	{r4, r7, pc}

08009d1e <_ZNSt6vectorIhSaIhEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b082      	sub	sp, #8
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f857 	bl	8009de0 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
 8009d32:	bf00      	nop
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <_ZNKSt6vectorIhSaIhEE6cbeginEv>:
      cbegin() const noexcept
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b084      	sub	sp, #16
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	f107 030c 	add.w	r3, r7, #12
 8009d48:	4611      	mov	r1, r2
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7ff fad0 	bl	80092f0 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <_ZN9__gnu_cxxmiIPKhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009d5a:	b590      	push	{r4, r7, lr}
 8009d5c:	b083      	sub	sp, #12
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7ff fdf0 	bl	800994a <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	681c      	ldr	r4, [r3, #0]
 8009d6e:	6838      	ldr	r0, [r7, #0]
 8009d70:	f7ff fdeb 	bl	800994a <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8009d74:	4603      	mov	r3, r0
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	1ae3      	subs	r3, r4, r3
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	370c      	adds	r7, #12
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd90      	pop	{r4, r7, pc}

08009d82 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b084      	sub	sp, #16
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
 8009d8a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	4413      	add	r3, r2
 8009d94:	60fb      	str	r3, [r7, #12]
 8009d96:	f107 020c 	add.w	r2, r7, #12
 8009d9a:	f107 0308 	add.w	r3, r7, #8
 8009d9e:	4611      	mov	r1, r2
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7fe fd60 	bl	8008866 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <_ZNSt6vectorIhSaIhEE18_M_insert_dispatchIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St12__false_type>:
	_M_insert_dispatch(iterator __pos, _InputIterator __first,
 8009db0:	b5b0      	push	{r4, r5, r7, lr}
 8009db2:	b088      	sub	sp, #32
 8009db4:	af02      	add	r7, sp, #8
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
 8009dbc:	603b      	str	r3, [r7, #0]
	  _M_range_insert(__pos, __first, __last,
 8009dbe:	687c      	ldr	r4, [r7, #4]
			  std::__iterator_category(__first));
 8009dc0:	1d3b      	adds	r3, r7, #4
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fe fa36 	bl	8008234 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
	  _M_range_insert(__pos, __first, __last,
 8009dc8:	f88d 5000 	strb.w	r5, [sp]
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	4622      	mov	r2, r4
 8009dd0:	68b9      	ldr	r1, [r7, #8]
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f000 f824 	bl	8009e20 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>
	}
 8009dd8:	bf00      	nop
 8009dda:	3718      	adds	r7, #24
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bdb0      	pop	{r4, r5, r7, pc}

08009de0 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8009de0:	b590      	push	{r4, r7, lr}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685a      	ldr	r2, [r3, #4]
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	60fb      	str	r3, [r7, #12]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00e      	beq.n	8009e18 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh+0x38>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7f7 fc13 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8009e06:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8009e08:	461a      	mov	r2, r3
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	6838      	ldr	r0, [r7, #0]
 8009e0e:	f7f7 fc17 	bl	8001640 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	605a      	str	r2, [r3, #4]
      }
 8009e18:	bf00      	nop
 8009e1a:	3714      	adds	r7, #20
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd90      	pop	{r4, r7, pc}

08009e20 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 8009e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e22:	b08d      	sub	sp, #52	; 0x34
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
 8009e2c:	603b      	str	r3, [r7, #0]
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	f000 80f6 	beq.w	800a024 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
	  {
	    const size_type __n = std::distance(__first, __last);
 8009e38:	6839      	ldr	r1, [r7, #0]
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7fe fdc4 	bl	80089c8 <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8009e40:	4603      	mov	r3, r0
 8009e42:	62fb      	str	r3, [r7, #44]	; 0x2c
	    if (size_type(this->_M_impl._M_end_of_storage
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_finish) >= __n)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	1ad3      	subs	r3, r2, r3
	    if (size_type(this->_M_impl._M_end_of_storage
 8009e4e:	461a      	mov	r2, r3
 8009e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e52:	4293      	cmp	r3, r2
 8009e54:	f200 8081 	bhi.w	8009f5a <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x13a>
	      {
		const size_type __elems_after = end() - __position;
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f7fe f90d 	bl	8008078 <_ZNSt6vectorIhSaIhEE3endEv>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	617b      	str	r3, [r7, #20]
 8009e62:	f107 0208 	add.w	r2, r7, #8
 8009e66:	f107 0314 	add.w	r3, r7, #20
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fe fd60 	bl	8008932 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8009e72:	4603      	mov	r3, r0
 8009e74:	61fb      	str	r3, [r7, #28]
		pointer __old_finish(this->_M_impl._M_finish);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	61bb      	str	r3, [r7, #24]
		if (__elems_after > __n)
 8009e7c:	69fa      	ldr	r2, [r7, #28]
 8009e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d92d      	bls.n	8009ee0 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xc0>
		  {
		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	685a      	ldr	r2, [r3, #4]
 8009e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8a:	425b      	negs	r3, r3
 8009e8c:	18d4      	adds	r4, r2, r3
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	685d      	ldr	r5, [r3, #4]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	685e      	ldr	r6, [r3, #4]
						this->_M_impl._M_finish,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7f7 fbc7 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8009e9e:	4603      	mov	r3, r0
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8009ea0:	4632      	mov	r2, r6
 8009ea2:	4629      	mov	r1, r5
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	f000 f8c3 	bl	800a030 <_ZSt22__uninitialized_move_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
		    this->_M_impl._M_finish += __n;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	685a      	ldr	r2, [r3, #4]
 8009eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb0:	441a      	add	r2, r3
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	605a      	str	r2, [r3, #4]
		    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
		    _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 8009eb6:	f107 0308 	add.w	r3, r7, #8
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fe fd61 	bl	8008982 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	6818      	ldr	r0, [r3, #0]
 8009ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec6:	425b      	negs	r3, r3
 8009ec8:	69ba      	ldr	r2, [r7, #24]
 8009eca:	4413      	add	r3, r2
 8009ecc:	69ba      	ldr	r2, [r7, #24]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	f000 f8c7 	bl	800a062 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_>
					    __old_finish - __n, __old_finish);
		    std::copy(__first, __last, __position);
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	6839      	ldr	r1, [r7, #0]
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 f8da 	bl	800a092 <_ZSt4copyIPhN9__gnu_cxx17__normal_iteratorIS0_St6vectorIhSaIhEEEEET0_T_S8_S7_>
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
	      }
	  }
      }
 8009ede:	e0a1      	b.n	800a024 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
		    _ForwardIterator __mid = __first;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	613b      	str	r3, [r7, #16]
		    std::advance(__mid, __elems_after);
 8009ee4:	f107 0310 	add.w	r3, r7, #16
 8009ee8:	69f9      	ldr	r1, [r7, #28]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 f8e9 	bl	800a0c2 <_ZSt7advanceIPhjEvRT_T0_>
		    std::__uninitialized_copy_a(__mid, __last,
 8009ef0:	693c      	ldr	r4, [r7, #16]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	685d      	ldr	r5, [r3, #4]
						_M_get_Tp_allocator());
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7f7 fb97 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8009efe:	4603      	mov	r3, r0
		    std::__uninitialized_copy_a(__mid, __last,
 8009f00:	462a      	mov	r2, r5
 8009f02:	6839      	ldr	r1, [r7, #0]
 8009f04:	4620      	mov	r0, r4
 8009f06:	f7fe fd73 	bl	80089f0 <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
		    this->_M_impl._M_finish += __n - __elems_after;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	1acb      	subs	r3, r1, r3
 8009f14:	441a      	add	r2, r3
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	605a      	str	r2, [r3, #4]
		    std::__uninitialized_move_a(__position.base(),
 8009f1a:	f107 0308 	add.w	r3, r7, #8
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7fe fd2f 	bl	8008982 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8009f24:	4603      	mov	r3, r0
 8009f26:	681c      	ldr	r4, [r3, #0]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	685d      	ldr	r5, [r3, #4]
						_M_get_Tp_allocator());
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7f7 fb7c 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8009f34:	4603      	mov	r3, r0
		    std::__uninitialized_move_a(__position.base(),
 8009f36:	462a      	mov	r2, r5
 8009f38:	69b9      	ldr	r1, [r7, #24]
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f000 f878 	bl	800a030 <_ZSt22__uninitialized_move_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
		    this->_M_impl._M_finish += __elems_after;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	685a      	ldr	r2, [r3, #4]
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	441a      	add	r2, r3
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	605a      	str	r2, [r3, #4]
		    std::copy(__first, __mid, __position);
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	4619      	mov	r1, r3
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f89d 	bl	800a092 <_ZSt4copyIPhN9__gnu_cxx17__normal_iteratorIS0_St6vectorIhSaIhEEEEET0_T_S8_S7_>
      }
 8009f58:	e064      	b.n	800a024 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
		  _M_check_len(__n, "vector::_M_range_insert");
 8009f5a:	4a34      	ldr	r2, [pc, #208]	; (800a02c <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x20c>)
 8009f5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f7fe fc90 	bl	8008884 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8009f64:	62b8      	str	r0, [r7, #40]	; 0x28
		pointer __new_start(this->_M_allocate(__len));
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7fe fb00 	bl	8008570 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8009f70:	6278      	str	r0, [r7, #36]	; 0x24
		pointer __new_finish(__new_start);
 8009f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f74:	623b      	str	r3, [r7, #32]
		      (this->_M_impl._M_start, __position.base(),
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681c      	ldr	r4, [r3, #0]
 8009f7a:	f107 0308 	add.w	r3, r7, #8
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fe fcff 	bl	8008982 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8009f84:	4603      	mov	r3, r0
 8009f86:	681d      	ldr	r5, [r3, #0]
		       __new_start, _M_get_Tp_allocator());
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7f7 fb4e 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8009f90:	4603      	mov	r3, r0
		      (this->_M_impl._M_start, __position.base(),
 8009f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f94:	4629      	mov	r1, r5
 8009f96:	4620      	mov	r0, r4
 8009f98:	f7fe fcfd 	bl	8008996 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8009f9c:	6238      	str	r0, [r7, #32]
						    _M_get_Tp_allocator());
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7f7 fb43 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8009fa6:	4603      	mov	r3, r0
		      = std::__uninitialized_copy_a(__first, __last,
 8009fa8:	6a3a      	ldr	r2, [r7, #32]
 8009faa:	6839      	ldr	r1, [r7, #0]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7fe fd1f 	bl	80089f0 <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
 8009fb2:	6238      	str	r0, [r7, #32]
		      (__position.base(), this->_M_impl._M_finish,
 8009fb4:	f107 0308 	add.w	r3, r7, #8
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fe fce2 	bl	8008982 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	681c      	ldr	r4, [r3, #0]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	685d      	ldr	r5, [r3, #4]
		       __new_finish, _M_get_Tp_allocator());
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7f7 fb2f 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8009fce:	4603      	mov	r3, r0
		      (__position.base(), this->_M_impl._M_finish,
 8009fd0:	6a3a      	ldr	r2, [r7, #32]
 8009fd2:	4629      	mov	r1, r5
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f7fe fcde 	bl	8008996 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8009fda:	6238      	str	r0, [r7, #32]
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681c      	ldr	r4, [r3, #0]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	685d      	ldr	r5, [r3, #4]
			      _M_get_Tp_allocator());
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7f7 fb20 	bl	800162c <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8009fec:	4603      	mov	r3, r0
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009fee:	461a      	mov	r2, r3
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f7f7 fb24 	bl	8001640 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
		_M_deallocate(this->_M_impl._M_start,
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6819      	ldr	r1, [r3, #0]
			      this->_M_impl._M_end_of_storage
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	689a      	ldr	r2, [r3, #8]
			      - this->_M_impl._M_start);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	1ad3      	subs	r3, r2, r3
		_M_deallocate(this->_M_impl._M_start,
 800a008:	461a      	mov	r2, r3
 800a00a:	f7f7 fb46 	bl	800169a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		this->_M_impl._M_start = __new_start;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a012:	601a      	str	r2, [r3, #0]
		this->_M_impl._M_finish = __new_finish;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6a3a      	ldr	r2, [r7, #32]
 800a018:	605a      	str	r2, [r3, #4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 800a01a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01e:	441a      	add	r2, r3
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	609a      	str	r2, [r3, #8]
      }
 800a024:	bf00      	nop
 800a026:	3734      	adds	r7, #52	; 0x34
 800a028:	46bd      	mov	sp, r7
 800a02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a02c:	0800ef78 	.word	0x0800ef78

0800a030 <_ZSt22__uninitialized_move_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 800a030:	b590      	push	{r4, r7, lr}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	603b      	str	r3, [r7, #0]
      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f000 f852 	bl	800a0e8 <_ZSt18make_move_iteratorIPhESt13move_iteratorIT_ES2_>
 800a044:	4604      	mov	r4, r0
 800a046:	68b8      	ldr	r0, [r7, #8]
 800a048:	f000 f84e 	bl	800a0e8 <_ZSt18make_move_iteratorIPhESt13move_iteratorIT_ES2_>
 800a04c:	4601      	mov	r1, r0
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	4620      	mov	r0, r4
 800a054:	f7fe ff0b 	bl	8008e6e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 800a058:	4603      	mov	r3, r0
    }
 800a05a:	4618      	mov	r0, r3
 800a05c:	3714      	adds	r7, #20
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd90      	pop	{r4, r7, pc}

0800a062 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800a062:	b590      	push	{r4, r7, lr}
 800a064:	b085      	sub	sp, #20
 800a066:	af00      	add	r7, sp, #0
 800a068:	60f8      	str	r0, [r7, #12]
 800a06a:	60b9      	str	r1, [r7, #8]
 800a06c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_ConvertibleConcept<
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f7ff fabe 	bl	80095f0 <_ZSt12__miter_baseIPhET_S1_>
 800a074:	4604      	mov	r4, r0
 800a076:	68b8      	ldr	r0, [r7, #8]
 800a078:	f7ff faba 	bl	80095f0 <_ZSt12__miter_baseIPhET_S1_>
 800a07c:	4603      	mov	r3, r0
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	4619      	mov	r1, r3
 800a082:	4620      	mov	r0, r4
 800a084:	f000 f845 	bl	800a112 <_ZSt22__copy_move_backward_aILb1EPhS0_ET1_T0_S2_S1_>
 800a088:	4603      	mov	r3, r0
					       std::__miter_base(__last),
					       __result);
    }
 800a08a:	4618      	mov	r0, r3
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd90      	pop	{r4, r7, pc}

0800a092 <_ZSt4copyIPhN9__gnu_cxx17__normal_iteratorIS0_St6vectorIhSaIhEEEEET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 800a092:	b590      	push	{r4, r7, lr}
 800a094:	b085      	sub	sp, #20
 800a096:	af00      	add	r7, sp, #0
 800a098:	60f8      	str	r0, [r7, #12]
 800a09a:	60b9      	str	r1, [r7, #8]
 800a09c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f7ff faa6 	bl	80095f0 <_ZSt12__miter_baseIPhET_S1_>
 800a0a4:	4604      	mov	r4, r0
 800a0a6:	68b8      	ldr	r0, [r7, #8]
 800a0a8:	f7ff faa2 	bl	80095f0 <_ZSt12__miter_baseIPhET_S1_>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f000 f850 	bl	800a158 <_ZSt13__copy_move_aILb0EPhN9__gnu_cxx17__normal_iteratorIS0_St6vectorIhSaIhEEEEET1_T0_S8_S7_>
 800a0b8:	4603      	mov	r3, r0
    }
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3714      	adds	r7, #20
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd90      	pop	{r4, r7, pc}

0800a0c2 <_ZSt7advanceIPhjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 800a0c2:	b590      	push	{r4, r7, lr}
 800a0c4:	b085      	sub	sp, #20
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f7fe f8af 	bl	8008234 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800a0d6:	4622      	mov	r2, r4
 800a0d8:	68f9      	ldr	r1, [r7, #12]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 f85d 	bl	800a19a <_ZSt9__advanceIPhiEvRT_T0_St26random_access_iterator_tag>
    }
 800a0e0:	bf00      	nop
 800a0e2:	3714      	adds	r7, #20
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd90      	pop	{r4, r7, pc}

0800a0e8 <_ZSt18make_move_iteratorIPhESt13move_iteratorIT_ES2_>:
    make_move_iterator(_Iterator __i)
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
    { return move_iterator<_Iterator>(std::move(__i)); }
 800a0f0:	1d3b      	adds	r3, r7, #4
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7ff f9ab 	bl	800944e <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	f107 030c 	add.w	r3, r7, #12
 800a100:	4611      	mov	r1, r2
 800a102:	4618      	mov	r0, r3
 800a104:	f7ff f847 	bl	8009196 <_ZNSt13move_iteratorIPhEC1ES0_>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <_ZSt22__copy_move_backward_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800a112:	b5b0      	push	{r4, r5, r7, lr}
 800a114:	b084      	sub	sp, #16
 800a116:	af00      	add	r7, sp, #0
 800a118:	60f8      	str	r0, [r7, #12]
 800a11a:	60b9      	str	r1, [r7, #8]
 800a11c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f7ff f970 	bl	8009404 <_ZSt12__niter_baseIPhET_S1_>
 800a124:	4604      	mov	r4, r0
 800a126:	68b8      	ldr	r0, [r7, #8]
 800a128:	f7ff f96c 	bl	8009404 <_ZSt12__niter_baseIPhET_S1_>
 800a12c:	4605      	mov	r5, r0
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4618      	mov	r0, r3
 800a132:	f7ff f967 	bl	8009404 <_ZSt12__niter_baseIPhET_S1_>
 800a136:	4603      	mov	r3, r0
 800a138:	461a      	mov	r2, r3
 800a13a:	4629      	mov	r1, r5
 800a13c:	4620      	mov	r0, r4
 800a13e:	f000 f83d 	bl	800a1bc <_ZSt23__copy_move_backward_a1ILb1EPhS0_ET1_T0_S2_S1_>
 800a142:	4602      	mov	r2, r0
 800a144:	1d3b      	adds	r3, r7, #4
 800a146:	4611      	mov	r1, r2
 800a148:	4618      	mov	r0, r3
 800a14a:	f7ff fa98 	bl	800967e <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 800a14e:	4603      	mov	r3, r0
    }
 800a150:	4618      	mov	r0, r3
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bdb0      	pop	{r4, r5, r7, pc}

0800a158 <_ZSt13__copy_move_aILb0EPhN9__gnu_cxx17__normal_iteratorIS0_St6vectorIhSaIhEEEEET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800a158:	b5b0      	push	{r4, r5, r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f7ff f94d 	bl	8009404 <_ZSt12__niter_baseIPhET_S1_>
 800a16a:	4604      	mov	r4, r0
 800a16c:	68b8      	ldr	r0, [r7, #8]
 800a16e:	f7ff f949 	bl	8009404 <_ZSt12__niter_baseIPhET_S1_>
 800a172:	4605      	mov	r5, r0
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 f831 	bl	800a1dc <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800a17a:	4603      	mov	r3, r0
 800a17c:	461a      	mov	r2, r3
 800a17e:	4629      	mov	r1, r5
 800a180:	4620      	mov	r0, r4
 800a182:	f7ff faf3 	bl	800976c <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 800a186:	4603      	mov	r3, r0
 800a188:	4619      	mov	r1, r3
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f834 	bl	800a1f8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>
 800a190:	4603      	mov	r3, r0
    }
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bdb0      	pop	{r4, r5, r7, pc}

0800a19a <_ZSt9__advanceIPhiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 800a19a:	b480      	push	{r7}
 800a19c:	b085      	sub	sp, #20
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	60f8      	str	r0, [r7, #12]
 800a1a2:	60b9      	str	r1, [r7, #8]
 800a1a4:	713a      	strb	r2, [r7, #4]
	__i += __n;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	441a      	add	r2, r3
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	601a      	str	r2, [r3, #0]
    }
 800a1b2:	bf00      	nop
 800a1b4:	3714      	adds	r7, #20
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bc80      	pop	{r7}
 800a1ba:	4770      	bx	lr

0800a1bc <_ZSt23__copy_move_backward_a1ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	68b9      	ldr	r1, [r7, #8]
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f000 f828 	bl	800a222 <_ZSt23__copy_move_backward_a2ILb1EPhS0_ET1_T0_S2_S1_>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800a1e4:	1d3b      	adds	r3, r7, #4
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fe fbcb 	bl	8008982 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f7ff ffea 	bl	800a1dc <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800a208:	4602      	mov	r2, r0
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	1a9a      	subs	r2, r3, r2
 800a20e:	1d3b      	adds	r3, r7, #4
 800a210:	4611      	mov	r1, r2
 800a212:	4618      	mov	r0, r3
 800a214:	f7ff fdb5 	bl	8009d82 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 800a218:	4603      	mov	r3, r0
 800a21a:	4618      	mov	r0, r3
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <_ZSt23__copy_move_backward_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	60f8      	str	r0, [r7, #12]
 800a22a:	60b9      	str	r1, [r7, #8]
 800a22c:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	68b9      	ldr	r1, [r7, #8]
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f000 f805 	bl	800a242 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIhEEPT_PKS3_S6_S4_>
 800a238:	4603      	mov	r3, r0
    }
 800a23a:	4618      	mov	r0, r3
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIhEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800a242:	b580      	push	{r7, lr}
 800a244:	b086      	sub	sp, #24
 800a246:	af00      	add	r7, sp, #0
 800a248:	60f8      	str	r0, [r7, #12]
 800a24a:	60b9      	str	r1, [r7, #8]
 800a24c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d008      	beq.n	800a26e <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIhEEPT_PKS3_S6_S4_+0x2c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	425b      	negs	r3, r3
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	4413      	add	r3, r2
 800a264:	697a      	ldr	r2, [r7, #20]
 800a266:	68f9      	ldr	r1, [r7, #12]
 800a268:	4618      	mov	r0, r3
 800a26a:	f000 fae1 	bl	800a830 <memmove>
	  return __result - _Num;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	425b      	negs	r3, r3
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	4413      	add	r3, r2
	}
 800a276:	4618      	mov	r0, r3
 800a278:	3718      	adds	r7, #24
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <_ZdlPvj>:
 800a27e:	f000 b826 	b.w	800a2ce <_ZdlPv>

0800a282 <__cxa_guard_acquire>:
 800a282:	6802      	ldr	r2, [r0, #0]
 800a284:	4603      	mov	r3, r0
 800a286:	07d2      	lsls	r2, r2, #31
 800a288:	d405      	bmi.n	800a296 <__cxa_guard_acquire+0x14>
 800a28a:	7842      	ldrb	r2, [r0, #1]
 800a28c:	b102      	cbz	r2, 800a290 <__cxa_guard_acquire+0xe>
 800a28e:	deff      	udf	#255	; 0xff
 800a290:	2001      	movs	r0, #1
 800a292:	7058      	strb	r0, [r3, #1]
 800a294:	4770      	bx	lr
 800a296:	2000      	movs	r0, #0
 800a298:	4770      	bx	lr

0800a29a <__cxa_guard_release>:
 800a29a:	2301      	movs	r3, #1
 800a29c:	6003      	str	r3, [r0, #0]
 800a29e:	4770      	bx	lr

0800a2a0 <_Znwj>:
 800a2a0:	2801      	cmp	r0, #1
 800a2a2:	bf38      	it	cc
 800a2a4:	2001      	movcc	r0, #1
 800a2a6:	b510      	push	{r4, lr}
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f000 f856 	bl	800a35c <malloc>
 800a2b0:	b930      	cbnz	r0, 800a2c0 <_Znwj+0x20>
 800a2b2:	f000 f80f 	bl	800a2d4 <_ZSt15get_new_handlerv>
 800a2b6:	b908      	cbnz	r0, 800a2bc <_Znwj+0x1c>
 800a2b8:	f000 f814 	bl	800a2e4 <abort>
 800a2bc:	4780      	blx	r0
 800a2be:	e7f4      	b.n	800a2aa <_Znwj+0xa>
 800a2c0:	bd10      	pop	{r4, pc}

0800a2c2 <_ZSt17__throw_bad_allocv>:
 800a2c2:	b508      	push	{r3, lr}
 800a2c4:	f000 f80e 	bl	800a2e4 <abort>

0800a2c8 <_ZSt20__throw_length_errorPKc>:
 800a2c8:	b508      	push	{r3, lr}
 800a2ca:	f000 f80b 	bl	800a2e4 <abort>

0800a2ce <_ZdlPv>:
 800a2ce:	f000 b84d 	b.w	800a36c <free>
	...

0800a2d4 <_ZSt15get_new_handlerv>:
 800a2d4:	4b02      	ldr	r3, [pc, #8]	; (800a2e0 <_ZSt15get_new_handlerv+0xc>)
 800a2d6:	6818      	ldr	r0, [r3, #0]
 800a2d8:	f3bf 8f5b 	dmb	ish
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	20000ce8 	.word	0x20000ce8

0800a2e4 <abort>:
 800a2e4:	2006      	movs	r0, #6
 800a2e6:	b508      	push	{r3, lr}
 800a2e8:	f000 fb0a 	bl	800a900 <raise>
 800a2ec:	2001      	movs	r0, #1
 800a2ee:	f7f7 fc96 	bl	8001c1e <_exit>

0800a2f2 <atexit>:
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	4601      	mov	r1, r0
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f001 bda5 	b.w	800be48 <__register_exitproc>

0800a2fe <atoi>:
 800a2fe:	220a      	movs	r2, #10
 800a300:	2100      	movs	r1, #0
 800a302:	f000 bbb5 	b.w	800aa70 <strtol>
	...

0800a308 <__errno>:
 800a308:	4b01      	ldr	r3, [pc, #4]	; (800a310 <__errno+0x8>)
 800a30a:	6818      	ldr	r0, [r3, #0]
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	2000000c 	.word	0x2000000c

0800a314 <__libc_init_array>:
 800a314:	b570      	push	{r4, r5, r6, lr}
 800a316:	2600      	movs	r6, #0
 800a318:	4d0c      	ldr	r5, [pc, #48]	; (800a34c <__libc_init_array+0x38>)
 800a31a:	4c0d      	ldr	r4, [pc, #52]	; (800a350 <__libc_init_array+0x3c>)
 800a31c:	1b64      	subs	r4, r4, r5
 800a31e:	10a4      	asrs	r4, r4, #2
 800a320:	42a6      	cmp	r6, r4
 800a322:	d109      	bne.n	800a338 <__libc_init_array+0x24>
 800a324:	f004 fd9a 	bl	800ee5c <_init>
 800a328:	2600      	movs	r6, #0
 800a32a:	4d0a      	ldr	r5, [pc, #40]	; (800a354 <__libc_init_array+0x40>)
 800a32c:	4c0a      	ldr	r4, [pc, #40]	; (800a358 <__libc_init_array+0x44>)
 800a32e:	1b64      	subs	r4, r4, r5
 800a330:	10a4      	asrs	r4, r4, #2
 800a332:	42a6      	cmp	r6, r4
 800a334:	d105      	bne.n	800a342 <__libc_init_array+0x2e>
 800a336:	bd70      	pop	{r4, r5, r6, pc}
 800a338:	f855 3b04 	ldr.w	r3, [r5], #4
 800a33c:	4798      	blx	r3
 800a33e:	3601      	adds	r6, #1
 800a340:	e7ee      	b.n	800a320 <__libc_init_array+0xc>
 800a342:	f855 3b04 	ldr.w	r3, [r5], #4
 800a346:	4798      	blx	r3
 800a348:	3601      	adds	r6, #1
 800a34a:	e7f2      	b.n	800a332 <__libc_init_array+0x1e>
 800a34c:	0800f344 	.word	0x0800f344
 800a350:	0800f344 	.word	0x0800f344
 800a354:	0800f344 	.word	0x0800f344
 800a358:	0800f350 	.word	0x0800f350

0800a35c <malloc>:
 800a35c:	4b02      	ldr	r3, [pc, #8]	; (800a368 <malloc+0xc>)
 800a35e:	4601      	mov	r1, r0
 800a360:	6818      	ldr	r0, [r3, #0]
 800a362:	f000 b80b 	b.w	800a37c <_malloc_r>
 800a366:	bf00      	nop
 800a368:	2000000c 	.word	0x2000000c

0800a36c <free>:
 800a36c:	4b02      	ldr	r3, [pc, #8]	; (800a378 <free+0xc>)
 800a36e:	4601      	mov	r1, r0
 800a370:	6818      	ldr	r0, [r3, #0]
 800a372:	f002 bc5d 	b.w	800cc30 <_free_r>
 800a376:	bf00      	nop
 800a378:	2000000c 	.word	0x2000000c

0800a37c <_malloc_r>:
 800a37c:	f101 030b 	add.w	r3, r1, #11
 800a380:	2b16      	cmp	r3, #22
 800a382:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a386:	4605      	mov	r5, r0
 800a388:	d906      	bls.n	800a398 <_malloc_r+0x1c>
 800a38a:	f033 0707 	bics.w	r7, r3, #7
 800a38e:	d504      	bpl.n	800a39a <_malloc_r+0x1e>
 800a390:	230c      	movs	r3, #12
 800a392:	602b      	str	r3, [r5, #0]
 800a394:	2400      	movs	r4, #0
 800a396:	e1a3      	b.n	800a6e0 <_malloc_r+0x364>
 800a398:	2710      	movs	r7, #16
 800a39a:	42b9      	cmp	r1, r7
 800a39c:	d8f8      	bhi.n	800a390 <_malloc_r+0x14>
 800a39e:	4628      	mov	r0, r5
 800a3a0:	f000 fa68 	bl	800a874 <__malloc_lock>
 800a3a4:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800a3a8:	4eaf      	ldr	r6, [pc, #700]	; (800a668 <_malloc_r+0x2ec>)
 800a3aa:	d237      	bcs.n	800a41c <_malloc_r+0xa0>
 800a3ac:	f107 0208 	add.w	r2, r7, #8
 800a3b0:	4432      	add	r2, r6
 800a3b2:	6854      	ldr	r4, [r2, #4]
 800a3b4:	f1a2 0108 	sub.w	r1, r2, #8
 800a3b8:	428c      	cmp	r4, r1
 800a3ba:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800a3be:	d102      	bne.n	800a3c6 <_malloc_r+0x4a>
 800a3c0:	68d4      	ldr	r4, [r2, #12]
 800a3c2:	42a2      	cmp	r2, r4
 800a3c4:	d010      	beq.n	800a3e8 <_malloc_r+0x6c>
 800a3c6:	6863      	ldr	r3, [r4, #4]
 800a3c8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800a3cc:	f023 0303 	bic.w	r3, r3, #3
 800a3d0:	60ca      	str	r2, [r1, #12]
 800a3d2:	4423      	add	r3, r4
 800a3d4:	6091      	str	r1, [r2, #8]
 800a3d6:	685a      	ldr	r2, [r3, #4]
 800a3d8:	f042 0201 	orr.w	r2, r2, #1
 800a3dc:	605a      	str	r2, [r3, #4]
 800a3de:	4628      	mov	r0, r5
 800a3e0:	f000 fa4e 	bl	800a880 <__malloc_unlock>
 800a3e4:	3408      	adds	r4, #8
 800a3e6:	e17b      	b.n	800a6e0 <_malloc_r+0x364>
 800a3e8:	3302      	adds	r3, #2
 800a3ea:	6934      	ldr	r4, [r6, #16]
 800a3ec:	499f      	ldr	r1, [pc, #636]	; (800a66c <_malloc_r+0x2f0>)
 800a3ee:	428c      	cmp	r4, r1
 800a3f0:	d077      	beq.n	800a4e2 <_malloc_r+0x166>
 800a3f2:	6862      	ldr	r2, [r4, #4]
 800a3f4:	f022 0c03 	bic.w	ip, r2, #3
 800a3f8:	ebac 0007 	sub.w	r0, ip, r7
 800a3fc:	280f      	cmp	r0, #15
 800a3fe:	dd48      	ble.n	800a492 <_malloc_r+0x116>
 800a400:	19e2      	adds	r2, r4, r7
 800a402:	f040 0301 	orr.w	r3, r0, #1
 800a406:	f047 0701 	orr.w	r7, r7, #1
 800a40a:	6067      	str	r7, [r4, #4]
 800a40c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800a410:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800a414:	6053      	str	r3, [r2, #4]
 800a416:	f844 000c 	str.w	r0, [r4, ip]
 800a41a:	e7e0      	b.n	800a3de <_malloc_r+0x62>
 800a41c:	0a7b      	lsrs	r3, r7, #9
 800a41e:	d02a      	beq.n	800a476 <_malloc_r+0xfa>
 800a420:	2b04      	cmp	r3, #4
 800a422:	d812      	bhi.n	800a44a <_malloc_r+0xce>
 800a424:	09bb      	lsrs	r3, r7, #6
 800a426:	3338      	adds	r3, #56	; 0x38
 800a428:	1c5a      	adds	r2, r3, #1
 800a42a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800a42e:	6854      	ldr	r4, [r2, #4]
 800a430:	f1a2 0c08 	sub.w	ip, r2, #8
 800a434:	4564      	cmp	r4, ip
 800a436:	d006      	beq.n	800a446 <_malloc_r+0xca>
 800a438:	6862      	ldr	r2, [r4, #4]
 800a43a:	f022 0203 	bic.w	r2, r2, #3
 800a43e:	1bd0      	subs	r0, r2, r7
 800a440:	280f      	cmp	r0, #15
 800a442:	dd1c      	ble.n	800a47e <_malloc_r+0x102>
 800a444:	3b01      	subs	r3, #1
 800a446:	3301      	adds	r3, #1
 800a448:	e7cf      	b.n	800a3ea <_malloc_r+0x6e>
 800a44a:	2b14      	cmp	r3, #20
 800a44c:	d801      	bhi.n	800a452 <_malloc_r+0xd6>
 800a44e:	335b      	adds	r3, #91	; 0x5b
 800a450:	e7ea      	b.n	800a428 <_malloc_r+0xac>
 800a452:	2b54      	cmp	r3, #84	; 0x54
 800a454:	d802      	bhi.n	800a45c <_malloc_r+0xe0>
 800a456:	0b3b      	lsrs	r3, r7, #12
 800a458:	336e      	adds	r3, #110	; 0x6e
 800a45a:	e7e5      	b.n	800a428 <_malloc_r+0xac>
 800a45c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a460:	d802      	bhi.n	800a468 <_malloc_r+0xec>
 800a462:	0bfb      	lsrs	r3, r7, #15
 800a464:	3377      	adds	r3, #119	; 0x77
 800a466:	e7df      	b.n	800a428 <_malloc_r+0xac>
 800a468:	f240 5254 	movw	r2, #1364	; 0x554
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d804      	bhi.n	800a47a <_malloc_r+0xfe>
 800a470:	0cbb      	lsrs	r3, r7, #18
 800a472:	337c      	adds	r3, #124	; 0x7c
 800a474:	e7d8      	b.n	800a428 <_malloc_r+0xac>
 800a476:	233f      	movs	r3, #63	; 0x3f
 800a478:	e7d6      	b.n	800a428 <_malloc_r+0xac>
 800a47a:	237e      	movs	r3, #126	; 0x7e
 800a47c:	e7d4      	b.n	800a428 <_malloc_r+0xac>
 800a47e:	2800      	cmp	r0, #0
 800a480:	68e1      	ldr	r1, [r4, #12]
 800a482:	db04      	blt.n	800a48e <_malloc_r+0x112>
 800a484:	68a3      	ldr	r3, [r4, #8]
 800a486:	60d9      	str	r1, [r3, #12]
 800a488:	608b      	str	r3, [r1, #8]
 800a48a:	18a3      	adds	r3, r4, r2
 800a48c:	e7a3      	b.n	800a3d6 <_malloc_r+0x5a>
 800a48e:	460c      	mov	r4, r1
 800a490:	e7d0      	b.n	800a434 <_malloc_r+0xb8>
 800a492:	2800      	cmp	r0, #0
 800a494:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800a498:	db07      	blt.n	800a4aa <_malloc_r+0x12e>
 800a49a:	44a4      	add	ip, r4
 800a49c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800a4a0:	f043 0301 	orr.w	r3, r3, #1
 800a4a4:	f8cc 3004 	str.w	r3, [ip, #4]
 800a4a8:	e799      	b.n	800a3de <_malloc_r+0x62>
 800a4aa:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800a4ae:	6870      	ldr	r0, [r6, #4]
 800a4b0:	f080 8094 	bcs.w	800a5dc <_malloc_r+0x260>
 800a4b4:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800a4b8:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800a4bc:	f04f 0c01 	mov.w	ip, #1
 800a4c0:	fa0c fc0e 	lsl.w	ip, ip, lr
 800a4c4:	ea4c 0000 	orr.w	r0, ip, r0
 800a4c8:	3201      	adds	r2, #1
 800a4ca:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800a4ce:	6070      	str	r0, [r6, #4]
 800a4d0:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800a4d4:	3808      	subs	r0, #8
 800a4d6:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800a4da:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800a4de:	f8cc 400c 	str.w	r4, [ip, #12]
 800a4e2:	2001      	movs	r0, #1
 800a4e4:	109a      	asrs	r2, r3, #2
 800a4e6:	fa00 f202 	lsl.w	r2, r0, r2
 800a4ea:	6870      	ldr	r0, [r6, #4]
 800a4ec:	4290      	cmp	r0, r2
 800a4ee:	d326      	bcc.n	800a53e <_malloc_r+0x1c2>
 800a4f0:	4210      	tst	r0, r2
 800a4f2:	d106      	bne.n	800a502 <_malloc_r+0x186>
 800a4f4:	f023 0303 	bic.w	r3, r3, #3
 800a4f8:	0052      	lsls	r2, r2, #1
 800a4fa:	4210      	tst	r0, r2
 800a4fc:	f103 0304 	add.w	r3, r3, #4
 800a500:	d0fa      	beq.n	800a4f8 <_malloc_r+0x17c>
 800a502:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800a506:	46c1      	mov	r9, r8
 800a508:	469e      	mov	lr, r3
 800a50a:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800a50e:	454c      	cmp	r4, r9
 800a510:	f040 80b8 	bne.w	800a684 <_malloc_r+0x308>
 800a514:	f10e 0e01 	add.w	lr, lr, #1
 800a518:	f01e 0f03 	tst.w	lr, #3
 800a51c:	f109 0908 	add.w	r9, r9, #8
 800a520:	d1f3      	bne.n	800a50a <_malloc_r+0x18e>
 800a522:	0798      	lsls	r0, r3, #30
 800a524:	f040 80e2 	bne.w	800a6ec <_malloc_r+0x370>
 800a528:	6873      	ldr	r3, [r6, #4]
 800a52a:	ea23 0302 	bic.w	r3, r3, r2
 800a52e:	6073      	str	r3, [r6, #4]
 800a530:	6870      	ldr	r0, [r6, #4]
 800a532:	0052      	lsls	r2, r2, #1
 800a534:	4290      	cmp	r0, r2
 800a536:	d302      	bcc.n	800a53e <_malloc_r+0x1c2>
 800a538:	2a00      	cmp	r2, #0
 800a53a:	f040 80e3 	bne.w	800a704 <_malloc_r+0x388>
 800a53e:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800a542:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a546:	f023 0903 	bic.w	r9, r3, #3
 800a54a:	45b9      	cmp	r9, r7
 800a54c:	d304      	bcc.n	800a558 <_malloc_r+0x1dc>
 800a54e:	eba9 0207 	sub.w	r2, r9, r7
 800a552:	2a0f      	cmp	r2, #15
 800a554:	f300 8141 	bgt.w	800a7da <_malloc_r+0x45e>
 800a558:	4b45      	ldr	r3, [pc, #276]	; (800a670 <_malloc_r+0x2f4>)
 800a55a:	2008      	movs	r0, #8
 800a55c:	6819      	ldr	r1, [r3, #0]
 800a55e:	eb0a 0b09 	add.w	fp, sl, r9
 800a562:	3110      	adds	r1, #16
 800a564:	4439      	add	r1, r7
 800a566:	9101      	str	r1, [sp, #4]
 800a568:	f001 fc60 	bl	800be2c <sysconf>
 800a56c:	4a41      	ldr	r2, [pc, #260]	; (800a674 <_malloc_r+0x2f8>)
 800a56e:	9901      	ldr	r1, [sp, #4]
 800a570:	6813      	ldr	r3, [r2, #0]
 800a572:	4680      	mov	r8, r0
 800a574:	3301      	adds	r3, #1
 800a576:	bf1f      	itttt	ne
 800a578:	f101 31ff 	addne.w	r1, r1, #4294967295
 800a57c:	1809      	addne	r1, r1, r0
 800a57e:	4243      	negne	r3, r0
 800a580:	4019      	andne	r1, r3
 800a582:	4628      	mov	r0, r5
 800a584:	9101      	str	r1, [sp, #4]
 800a586:	f000 f981 	bl	800a88c <_sbrk_r>
 800a58a:	1c42      	adds	r2, r0, #1
 800a58c:	4604      	mov	r4, r0
 800a58e:	f000 80f7 	beq.w	800a780 <_malloc_r+0x404>
 800a592:	4583      	cmp	fp, r0
 800a594:	9901      	ldr	r1, [sp, #4]
 800a596:	4a37      	ldr	r2, [pc, #220]	; (800a674 <_malloc_r+0x2f8>)
 800a598:	d902      	bls.n	800a5a0 <_malloc_r+0x224>
 800a59a:	45b2      	cmp	sl, r6
 800a59c:	f040 80f0 	bne.w	800a780 <_malloc_r+0x404>
 800a5a0:	4b35      	ldr	r3, [pc, #212]	; (800a678 <_malloc_r+0x2fc>)
 800a5a2:	45a3      	cmp	fp, r4
 800a5a4:	6818      	ldr	r0, [r3, #0]
 800a5a6:	f108 3cff 	add.w	ip, r8, #4294967295
 800a5aa:	4408      	add	r0, r1
 800a5ac:	6018      	str	r0, [r3, #0]
 800a5ae:	f040 80ab 	bne.w	800a708 <_malloc_r+0x38c>
 800a5b2:	ea1b 0f0c 	tst.w	fp, ip
 800a5b6:	f040 80a7 	bne.w	800a708 <_malloc_r+0x38c>
 800a5ba:	68b2      	ldr	r2, [r6, #8]
 800a5bc:	4449      	add	r1, r9
 800a5be:	f041 0101 	orr.w	r1, r1, #1
 800a5c2:	6051      	str	r1, [r2, #4]
 800a5c4:	4a2d      	ldr	r2, [pc, #180]	; (800a67c <_malloc_r+0x300>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6811      	ldr	r1, [r2, #0]
 800a5ca:	428b      	cmp	r3, r1
 800a5cc:	bf88      	it	hi
 800a5ce:	6013      	strhi	r3, [r2, #0]
 800a5d0:	4a2b      	ldr	r2, [pc, #172]	; (800a680 <_malloc_r+0x304>)
 800a5d2:	6811      	ldr	r1, [r2, #0]
 800a5d4:	428b      	cmp	r3, r1
 800a5d6:	bf88      	it	hi
 800a5d8:	6013      	strhi	r3, [r2, #0]
 800a5da:	e0d1      	b.n	800a780 <_malloc_r+0x404>
 800a5dc:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800a5e0:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800a5e4:	d218      	bcs.n	800a618 <_malloc_r+0x29c>
 800a5e6:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800a5ea:	3238      	adds	r2, #56	; 0x38
 800a5ec:	f102 0e01 	add.w	lr, r2, #1
 800a5f0:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800a5f4:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800a5f8:	45f0      	cmp	r8, lr
 800a5fa:	d12b      	bne.n	800a654 <_malloc_r+0x2d8>
 800a5fc:	f04f 0c01 	mov.w	ip, #1
 800a600:	1092      	asrs	r2, r2, #2
 800a602:	fa0c f202 	lsl.w	r2, ip, r2
 800a606:	4310      	orrs	r0, r2
 800a608:	6070      	str	r0, [r6, #4]
 800a60a:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800a60e:	f8c8 4008 	str.w	r4, [r8, #8]
 800a612:	f8ce 400c 	str.w	r4, [lr, #12]
 800a616:	e764      	b.n	800a4e2 <_malloc_r+0x166>
 800a618:	2a14      	cmp	r2, #20
 800a61a:	d801      	bhi.n	800a620 <_malloc_r+0x2a4>
 800a61c:	325b      	adds	r2, #91	; 0x5b
 800a61e:	e7e5      	b.n	800a5ec <_malloc_r+0x270>
 800a620:	2a54      	cmp	r2, #84	; 0x54
 800a622:	d803      	bhi.n	800a62c <_malloc_r+0x2b0>
 800a624:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800a628:	326e      	adds	r2, #110	; 0x6e
 800a62a:	e7df      	b.n	800a5ec <_malloc_r+0x270>
 800a62c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a630:	d803      	bhi.n	800a63a <_malloc_r+0x2be>
 800a632:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800a636:	3277      	adds	r2, #119	; 0x77
 800a638:	e7d8      	b.n	800a5ec <_malloc_r+0x270>
 800a63a:	f240 5e54 	movw	lr, #1364	; 0x554
 800a63e:	4572      	cmp	r2, lr
 800a640:	bf96      	itet	ls
 800a642:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800a646:	227e      	movhi	r2, #126	; 0x7e
 800a648:	327c      	addls	r2, #124	; 0x7c
 800a64a:	e7cf      	b.n	800a5ec <_malloc_r+0x270>
 800a64c:	f8de e008 	ldr.w	lr, [lr, #8]
 800a650:	45f0      	cmp	r8, lr
 800a652:	d005      	beq.n	800a660 <_malloc_r+0x2e4>
 800a654:	f8de 2004 	ldr.w	r2, [lr, #4]
 800a658:	f022 0203 	bic.w	r2, r2, #3
 800a65c:	4562      	cmp	r2, ip
 800a65e:	d8f5      	bhi.n	800a64c <_malloc_r+0x2d0>
 800a660:	f8de 800c 	ldr.w	r8, [lr, #12]
 800a664:	e7d1      	b.n	800a60a <_malloc_r+0x28e>
 800a666:	bf00      	nop
 800a668:	20000438 	.word	0x20000438
 800a66c:	20000440 	.word	0x20000440
 800a670:	20000d1c 	.word	0x20000d1c
 800a674:	20000840 	.word	0x20000840
 800a678:	20000cec 	.word	0x20000cec
 800a67c:	20000d14 	.word	0x20000d14
 800a680:	20000d18 	.word	0x20000d18
 800a684:	6860      	ldr	r0, [r4, #4]
 800a686:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800a68a:	f020 0003 	bic.w	r0, r0, #3
 800a68e:	eba0 0a07 	sub.w	sl, r0, r7
 800a692:	f1ba 0f0f 	cmp.w	sl, #15
 800a696:	dd12      	ble.n	800a6be <_malloc_r+0x342>
 800a698:	68a3      	ldr	r3, [r4, #8]
 800a69a:	19e2      	adds	r2, r4, r7
 800a69c:	f047 0701 	orr.w	r7, r7, #1
 800a6a0:	6067      	str	r7, [r4, #4]
 800a6a2:	f8c3 c00c 	str.w	ip, [r3, #12]
 800a6a6:	f8cc 3008 	str.w	r3, [ip, #8]
 800a6aa:	f04a 0301 	orr.w	r3, sl, #1
 800a6ae:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800a6b2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800a6b6:	6053      	str	r3, [r2, #4]
 800a6b8:	f844 a000 	str.w	sl, [r4, r0]
 800a6bc:	e68f      	b.n	800a3de <_malloc_r+0x62>
 800a6be:	f1ba 0f00 	cmp.w	sl, #0
 800a6c2:	db11      	blt.n	800a6e8 <_malloc_r+0x36c>
 800a6c4:	4420      	add	r0, r4
 800a6c6:	6843      	ldr	r3, [r0, #4]
 800a6c8:	f043 0301 	orr.w	r3, r3, #1
 800a6cc:	6043      	str	r3, [r0, #4]
 800a6ce:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	f8c3 c00c 	str.w	ip, [r3, #12]
 800a6d8:	f8cc 3008 	str.w	r3, [ip, #8]
 800a6dc:	f000 f8d0 	bl	800a880 <__malloc_unlock>
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	b003      	add	sp, #12
 800a6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e8:	4664      	mov	r4, ip
 800a6ea:	e710      	b.n	800a50e <_malloc_r+0x192>
 800a6ec:	f858 0908 	ldr.w	r0, [r8], #-8
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	4540      	cmp	r0, r8
 800a6f4:	f43f af15 	beq.w	800a522 <_malloc_r+0x1a6>
 800a6f8:	e71a      	b.n	800a530 <_malloc_r+0x1b4>
 800a6fa:	3304      	adds	r3, #4
 800a6fc:	0052      	lsls	r2, r2, #1
 800a6fe:	4210      	tst	r0, r2
 800a700:	d0fb      	beq.n	800a6fa <_malloc_r+0x37e>
 800a702:	e6fe      	b.n	800a502 <_malloc_r+0x186>
 800a704:	4673      	mov	r3, lr
 800a706:	e7fa      	b.n	800a6fe <_malloc_r+0x382>
 800a708:	f8d2 e000 	ldr.w	lr, [r2]
 800a70c:	f1be 3fff 	cmp.w	lr, #4294967295
 800a710:	bf1b      	ittet	ne
 800a712:	eba4 0b0b 	subne.w	fp, r4, fp
 800a716:	eb0b 0200 	addne.w	r2, fp, r0
 800a71a:	6014      	streq	r4, [r2, #0]
 800a71c:	601a      	strne	r2, [r3, #0]
 800a71e:	f014 0b07 	ands.w	fp, r4, #7
 800a722:	bf0e      	itee	eq
 800a724:	4658      	moveq	r0, fp
 800a726:	f1cb 0008 	rsbne	r0, fp, #8
 800a72a:	1824      	addne	r4, r4, r0
 800a72c:	1862      	adds	r2, r4, r1
 800a72e:	ea02 010c 	and.w	r1, r2, ip
 800a732:	4480      	add	r8, r0
 800a734:	eba8 0801 	sub.w	r8, r8, r1
 800a738:	ea08 080c 	and.w	r8, r8, ip
 800a73c:	4641      	mov	r1, r8
 800a73e:	4628      	mov	r0, r5
 800a740:	9201      	str	r2, [sp, #4]
 800a742:	f000 f8a3 	bl	800a88c <_sbrk_r>
 800a746:	1c43      	adds	r3, r0, #1
 800a748:	9a01      	ldr	r2, [sp, #4]
 800a74a:	4b29      	ldr	r3, [pc, #164]	; (800a7f0 <_malloc_r+0x474>)
 800a74c:	d107      	bne.n	800a75e <_malloc_r+0x3e2>
 800a74e:	f1bb 0f00 	cmp.w	fp, #0
 800a752:	d023      	beq.n	800a79c <_malloc_r+0x420>
 800a754:	f04f 0800 	mov.w	r8, #0
 800a758:	f1ab 0008 	sub.w	r0, fp, #8
 800a75c:	4410      	add	r0, r2
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	1b00      	subs	r0, r0, r4
 800a762:	4440      	add	r0, r8
 800a764:	4442      	add	r2, r8
 800a766:	f040 0001 	orr.w	r0, r0, #1
 800a76a:	45b2      	cmp	sl, r6
 800a76c:	60b4      	str	r4, [r6, #8]
 800a76e:	601a      	str	r2, [r3, #0]
 800a770:	6060      	str	r0, [r4, #4]
 800a772:	f43f af27 	beq.w	800a5c4 <_malloc_r+0x248>
 800a776:	f1b9 0f0f 	cmp.w	r9, #15
 800a77a:	d812      	bhi.n	800a7a2 <_malloc_r+0x426>
 800a77c:	2301      	movs	r3, #1
 800a77e:	6063      	str	r3, [r4, #4]
 800a780:	68b3      	ldr	r3, [r6, #8]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	f023 0303 	bic.w	r3, r3, #3
 800a788:	42bb      	cmp	r3, r7
 800a78a:	eba3 0207 	sub.w	r2, r3, r7
 800a78e:	d301      	bcc.n	800a794 <_malloc_r+0x418>
 800a790:	2a0f      	cmp	r2, #15
 800a792:	dc22      	bgt.n	800a7da <_malloc_r+0x45e>
 800a794:	4628      	mov	r0, r5
 800a796:	f000 f873 	bl	800a880 <__malloc_unlock>
 800a79a:	e5fb      	b.n	800a394 <_malloc_r+0x18>
 800a79c:	4610      	mov	r0, r2
 800a79e:	46d8      	mov	r8, fp
 800a7a0:	e7dd      	b.n	800a75e <_malloc_r+0x3e2>
 800a7a2:	2105      	movs	r1, #5
 800a7a4:	f8da 2004 	ldr.w	r2, [sl, #4]
 800a7a8:	f1a9 090c 	sub.w	r9, r9, #12
 800a7ac:	f029 0907 	bic.w	r9, r9, #7
 800a7b0:	f002 0201 	and.w	r2, r2, #1
 800a7b4:	ea42 0209 	orr.w	r2, r2, r9
 800a7b8:	f8ca 2004 	str.w	r2, [sl, #4]
 800a7bc:	f1b9 0f0f 	cmp.w	r9, #15
 800a7c0:	eb0a 0209 	add.w	r2, sl, r9
 800a7c4:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800a7c8:	f67f aefc 	bls.w	800a5c4 <_malloc_r+0x248>
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	f10a 0108 	add.w	r1, sl, #8
 800a7d2:	f002 fa2d 	bl	800cc30 <_free_r>
 800a7d6:	4b06      	ldr	r3, [pc, #24]	; (800a7f0 <_malloc_r+0x474>)
 800a7d8:	e6f4      	b.n	800a5c4 <_malloc_r+0x248>
 800a7da:	68b4      	ldr	r4, [r6, #8]
 800a7dc:	f047 0301 	orr.w	r3, r7, #1
 800a7e0:	f042 0201 	orr.w	r2, r2, #1
 800a7e4:	4427      	add	r7, r4
 800a7e6:	6063      	str	r3, [r4, #4]
 800a7e8:	60b7      	str	r7, [r6, #8]
 800a7ea:	607a      	str	r2, [r7, #4]
 800a7ec:	e5f7      	b.n	800a3de <_malloc_r+0x62>
 800a7ee:	bf00      	nop
 800a7f0:	20000cec 	.word	0x20000cec

0800a7f4 <memcmp>:
 800a7f4:	b510      	push	{r4, lr}
 800a7f6:	3901      	subs	r1, #1
 800a7f8:	4402      	add	r2, r0
 800a7fa:	4290      	cmp	r0, r2
 800a7fc:	d101      	bne.n	800a802 <memcmp+0xe>
 800a7fe:	2000      	movs	r0, #0
 800a800:	e005      	b.n	800a80e <memcmp+0x1a>
 800a802:	7803      	ldrb	r3, [r0, #0]
 800a804:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a808:	42a3      	cmp	r3, r4
 800a80a:	d001      	beq.n	800a810 <memcmp+0x1c>
 800a80c:	1b18      	subs	r0, r3, r4
 800a80e:	bd10      	pop	{r4, pc}
 800a810:	3001      	adds	r0, #1
 800a812:	e7f2      	b.n	800a7fa <memcmp+0x6>

0800a814 <memcpy>:
 800a814:	440a      	add	r2, r1
 800a816:	4291      	cmp	r1, r2
 800a818:	f100 33ff 	add.w	r3, r0, #4294967295
 800a81c:	d100      	bne.n	800a820 <memcpy+0xc>
 800a81e:	4770      	bx	lr
 800a820:	b510      	push	{r4, lr}
 800a822:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a826:	4291      	cmp	r1, r2
 800a828:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a82c:	d1f9      	bne.n	800a822 <memcpy+0xe>
 800a82e:	bd10      	pop	{r4, pc}

0800a830 <memmove>:
 800a830:	4288      	cmp	r0, r1
 800a832:	b510      	push	{r4, lr}
 800a834:	eb01 0402 	add.w	r4, r1, r2
 800a838:	d902      	bls.n	800a840 <memmove+0x10>
 800a83a:	4284      	cmp	r4, r0
 800a83c:	4623      	mov	r3, r4
 800a83e:	d807      	bhi.n	800a850 <memmove+0x20>
 800a840:	1e43      	subs	r3, r0, #1
 800a842:	42a1      	cmp	r1, r4
 800a844:	d008      	beq.n	800a858 <memmove+0x28>
 800a846:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a84a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a84e:	e7f8      	b.n	800a842 <memmove+0x12>
 800a850:	4601      	mov	r1, r0
 800a852:	4402      	add	r2, r0
 800a854:	428a      	cmp	r2, r1
 800a856:	d100      	bne.n	800a85a <memmove+0x2a>
 800a858:	bd10      	pop	{r4, pc}
 800a85a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a85e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a862:	e7f7      	b.n	800a854 <memmove+0x24>

0800a864 <memset>:
 800a864:	4603      	mov	r3, r0
 800a866:	4402      	add	r2, r0
 800a868:	4293      	cmp	r3, r2
 800a86a:	d100      	bne.n	800a86e <memset+0xa>
 800a86c:	4770      	bx	lr
 800a86e:	f803 1b01 	strb.w	r1, [r3], #1
 800a872:	e7f9      	b.n	800a868 <memset+0x4>

0800a874 <__malloc_lock>:
 800a874:	4801      	ldr	r0, [pc, #4]	; (800a87c <__malloc_lock+0x8>)
 800a876:	f002 baa1 	b.w	800cdbc <__retarget_lock_acquire_recursive>
 800a87a:	bf00      	nop
 800a87c:	20000d21 	.word	0x20000d21

0800a880 <__malloc_unlock>:
 800a880:	4801      	ldr	r0, [pc, #4]	; (800a888 <__malloc_unlock+0x8>)
 800a882:	f002 ba9c 	b.w	800cdbe <__retarget_lock_release_recursive>
 800a886:	bf00      	nop
 800a888:	20000d21 	.word	0x20000d21

0800a88c <_sbrk_r>:
 800a88c:	b538      	push	{r3, r4, r5, lr}
 800a88e:	2300      	movs	r3, #0
 800a890:	4d05      	ldr	r5, [pc, #20]	; (800a8a8 <_sbrk_r+0x1c>)
 800a892:	4604      	mov	r4, r0
 800a894:	4608      	mov	r0, r1
 800a896:	602b      	str	r3, [r5, #0]
 800a898:	f7f7 fa34 	bl	8001d04 <_sbrk>
 800a89c:	1c43      	adds	r3, r0, #1
 800a89e:	d102      	bne.n	800a8a6 <_sbrk_r+0x1a>
 800a8a0:	682b      	ldr	r3, [r5, #0]
 800a8a2:	b103      	cbz	r3, 800a8a6 <_sbrk_r+0x1a>
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	bd38      	pop	{r3, r4, r5, pc}
 800a8a8:	20000d24 	.word	0x20000d24

0800a8ac <_raise_r>:
 800a8ac:	291f      	cmp	r1, #31
 800a8ae:	b538      	push	{r3, r4, r5, lr}
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	460d      	mov	r5, r1
 800a8b4:	d904      	bls.n	800a8c0 <_raise_r+0x14>
 800a8b6:	2316      	movs	r3, #22
 800a8b8:	6003      	str	r3, [r0, #0]
 800a8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a8be:	bd38      	pop	{r3, r4, r5, pc}
 800a8c0:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800a8c4:	b112      	cbz	r2, 800a8cc <_raise_r+0x20>
 800a8c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8ca:	b94b      	cbnz	r3, 800a8e0 <_raise_r+0x34>
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f000 f831 	bl	800a934 <_getpid_r>
 800a8d2:	462a      	mov	r2, r5
 800a8d4:	4601      	mov	r1, r0
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8dc:	f000 b818 	b.w	800a910 <_kill_r>
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d00a      	beq.n	800a8fa <_raise_r+0x4e>
 800a8e4:	1c59      	adds	r1, r3, #1
 800a8e6:	d103      	bne.n	800a8f0 <_raise_r+0x44>
 800a8e8:	2316      	movs	r3, #22
 800a8ea:	6003      	str	r3, [r0, #0]
 800a8ec:	2001      	movs	r0, #1
 800a8ee:	e7e6      	b.n	800a8be <_raise_r+0x12>
 800a8f0:	2400      	movs	r4, #0
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8f8:	4798      	blx	r3
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	e7df      	b.n	800a8be <_raise_r+0x12>
	...

0800a900 <raise>:
 800a900:	4b02      	ldr	r3, [pc, #8]	; (800a90c <raise+0xc>)
 800a902:	4601      	mov	r1, r0
 800a904:	6818      	ldr	r0, [r3, #0]
 800a906:	f7ff bfd1 	b.w	800a8ac <_raise_r>
 800a90a:	bf00      	nop
 800a90c:	2000000c 	.word	0x2000000c

0800a910 <_kill_r>:
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	2300      	movs	r3, #0
 800a914:	4d06      	ldr	r5, [pc, #24]	; (800a930 <_kill_r+0x20>)
 800a916:	4604      	mov	r4, r0
 800a918:	4608      	mov	r0, r1
 800a91a:	4611      	mov	r1, r2
 800a91c:	602b      	str	r3, [r5, #0]
 800a91e:	f7f7 f96e 	bl	8001bfe <_kill>
 800a922:	1c43      	adds	r3, r0, #1
 800a924:	d102      	bne.n	800a92c <_kill_r+0x1c>
 800a926:	682b      	ldr	r3, [r5, #0]
 800a928:	b103      	cbz	r3, 800a92c <_kill_r+0x1c>
 800a92a:	6023      	str	r3, [r4, #0]
 800a92c:	bd38      	pop	{r3, r4, r5, pc}
 800a92e:	bf00      	nop
 800a930:	20000d24 	.word	0x20000d24

0800a934 <_getpid_r>:
 800a934:	f7f7 b95c 	b.w	8001bf0 <_getpid>

0800a938 <sprintf>:
 800a938:	b40e      	push	{r1, r2, r3}
 800a93a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a93e:	b500      	push	{lr}
 800a940:	b09c      	sub	sp, #112	; 0x70
 800a942:	ab1d      	add	r3, sp, #116	; 0x74
 800a944:	9002      	str	r0, [sp, #8]
 800a946:	9006      	str	r0, [sp, #24]
 800a948:	9107      	str	r1, [sp, #28]
 800a94a:	9104      	str	r1, [sp, #16]
 800a94c:	4808      	ldr	r0, [pc, #32]	; (800a970 <sprintf+0x38>)
 800a94e:	4909      	ldr	r1, [pc, #36]	; (800a974 <sprintf+0x3c>)
 800a950:	f853 2b04 	ldr.w	r2, [r3], #4
 800a954:	9105      	str	r1, [sp, #20]
 800a956:	6800      	ldr	r0, [r0, #0]
 800a958:	a902      	add	r1, sp, #8
 800a95a:	9301      	str	r3, [sp, #4]
 800a95c:	f000 f892 	bl	800aa84 <_svfprintf_r>
 800a960:	2200      	movs	r2, #0
 800a962:	9b02      	ldr	r3, [sp, #8]
 800a964:	701a      	strb	r2, [r3, #0]
 800a966:	b01c      	add	sp, #112	; 0x70
 800a968:	f85d eb04 	ldr.w	lr, [sp], #4
 800a96c:	b003      	add	sp, #12
 800a96e:	4770      	bx	lr
 800a970:	2000000c 	.word	0x2000000c
 800a974:	ffff0208 	.word	0xffff0208

0800a978 <_strtol_l.constprop.0>:
 800a978:	2b01      	cmp	r3, #1
 800a97a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a97e:	4680      	mov	r8, r0
 800a980:	d001      	beq.n	800a986 <_strtol_l.constprop.0+0xe>
 800a982:	2b24      	cmp	r3, #36	; 0x24
 800a984:	d906      	bls.n	800a994 <_strtol_l.constprop.0+0x1c>
 800a986:	f7ff fcbf 	bl	800a308 <__errno>
 800a98a:	2316      	movs	r3, #22
 800a98c:	6003      	str	r3, [r0, #0]
 800a98e:	2000      	movs	r0, #0
 800a990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a994:	460d      	mov	r5, r1
 800a996:	4f35      	ldr	r7, [pc, #212]	; (800aa6c <_strtol_l.constprop.0+0xf4>)
 800a998:	4628      	mov	r0, r5
 800a99a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a99e:	5de6      	ldrb	r6, [r4, r7]
 800a9a0:	f016 0608 	ands.w	r6, r6, #8
 800a9a4:	d1f8      	bne.n	800a998 <_strtol_l.constprop.0+0x20>
 800a9a6:	2c2d      	cmp	r4, #45	; 0x2d
 800a9a8:	d12f      	bne.n	800aa0a <_strtol_l.constprop.0+0x92>
 800a9aa:	2601      	movs	r6, #1
 800a9ac:	782c      	ldrb	r4, [r5, #0]
 800a9ae:	1c85      	adds	r5, r0, #2
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d057      	beq.n	800aa64 <_strtol_l.constprop.0+0xec>
 800a9b4:	2b10      	cmp	r3, #16
 800a9b6:	d109      	bne.n	800a9cc <_strtol_l.constprop.0+0x54>
 800a9b8:	2c30      	cmp	r4, #48	; 0x30
 800a9ba:	d107      	bne.n	800a9cc <_strtol_l.constprop.0+0x54>
 800a9bc:	7828      	ldrb	r0, [r5, #0]
 800a9be:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a9c2:	2858      	cmp	r0, #88	; 0x58
 800a9c4:	d149      	bne.n	800aa5a <_strtol_l.constprop.0+0xe2>
 800a9c6:	2310      	movs	r3, #16
 800a9c8:	786c      	ldrb	r4, [r5, #1]
 800a9ca:	3502      	adds	r5, #2
 800a9cc:	2700      	movs	r7, #0
 800a9ce:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a9d2:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a9d6:	fbbe f9f3 	udiv	r9, lr, r3
 800a9da:	4638      	mov	r0, r7
 800a9dc:	fb03 ea19 	mls	sl, r3, r9, lr
 800a9e0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a9e4:	f1bc 0f09 	cmp.w	ip, #9
 800a9e8:	d814      	bhi.n	800aa14 <_strtol_l.constprop.0+0x9c>
 800a9ea:	4664      	mov	r4, ip
 800a9ec:	42a3      	cmp	r3, r4
 800a9ee:	dd22      	ble.n	800aa36 <_strtol_l.constprop.0+0xbe>
 800a9f0:	2f00      	cmp	r7, #0
 800a9f2:	db1d      	blt.n	800aa30 <_strtol_l.constprop.0+0xb8>
 800a9f4:	4581      	cmp	r9, r0
 800a9f6:	d31b      	bcc.n	800aa30 <_strtol_l.constprop.0+0xb8>
 800a9f8:	d101      	bne.n	800a9fe <_strtol_l.constprop.0+0x86>
 800a9fa:	45a2      	cmp	sl, r4
 800a9fc:	db18      	blt.n	800aa30 <_strtol_l.constprop.0+0xb8>
 800a9fe:	2701      	movs	r7, #1
 800aa00:	fb00 4003 	mla	r0, r0, r3, r4
 800aa04:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa08:	e7ea      	b.n	800a9e0 <_strtol_l.constprop.0+0x68>
 800aa0a:	2c2b      	cmp	r4, #43	; 0x2b
 800aa0c:	bf04      	itt	eq
 800aa0e:	782c      	ldrbeq	r4, [r5, #0]
 800aa10:	1c85      	addeq	r5, r0, #2
 800aa12:	e7cd      	b.n	800a9b0 <_strtol_l.constprop.0+0x38>
 800aa14:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800aa18:	f1bc 0f19 	cmp.w	ip, #25
 800aa1c:	d801      	bhi.n	800aa22 <_strtol_l.constprop.0+0xaa>
 800aa1e:	3c37      	subs	r4, #55	; 0x37
 800aa20:	e7e4      	b.n	800a9ec <_strtol_l.constprop.0+0x74>
 800aa22:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800aa26:	f1bc 0f19 	cmp.w	ip, #25
 800aa2a:	d804      	bhi.n	800aa36 <_strtol_l.constprop.0+0xbe>
 800aa2c:	3c57      	subs	r4, #87	; 0x57
 800aa2e:	e7dd      	b.n	800a9ec <_strtol_l.constprop.0+0x74>
 800aa30:	f04f 37ff 	mov.w	r7, #4294967295
 800aa34:	e7e6      	b.n	800aa04 <_strtol_l.constprop.0+0x8c>
 800aa36:	2f00      	cmp	r7, #0
 800aa38:	da07      	bge.n	800aa4a <_strtol_l.constprop.0+0xd2>
 800aa3a:	2322      	movs	r3, #34	; 0x22
 800aa3c:	4670      	mov	r0, lr
 800aa3e:	f8c8 3000 	str.w	r3, [r8]
 800aa42:	2a00      	cmp	r2, #0
 800aa44:	d0a4      	beq.n	800a990 <_strtol_l.constprop.0+0x18>
 800aa46:	1e69      	subs	r1, r5, #1
 800aa48:	e005      	b.n	800aa56 <_strtol_l.constprop.0+0xde>
 800aa4a:	b106      	cbz	r6, 800aa4e <_strtol_l.constprop.0+0xd6>
 800aa4c:	4240      	negs	r0, r0
 800aa4e:	2a00      	cmp	r2, #0
 800aa50:	d09e      	beq.n	800a990 <_strtol_l.constprop.0+0x18>
 800aa52:	2f00      	cmp	r7, #0
 800aa54:	d1f7      	bne.n	800aa46 <_strtol_l.constprop.0+0xce>
 800aa56:	6011      	str	r1, [r2, #0]
 800aa58:	e79a      	b.n	800a990 <_strtol_l.constprop.0+0x18>
 800aa5a:	2430      	movs	r4, #48	; 0x30
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1b5      	bne.n	800a9cc <_strtol_l.constprop.0+0x54>
 800aa60:	2308      	movs	r3, #8
 800aa62:	e7b3      	b.n	800a9cc <_strtol_l.constprop.0+0x54>
 800aa64:	2c30      	cmp	r4, #48	; 0x30
 800aa66:	d0a9      	beq.n	800a9bc <_strtol_l.constprop.0+0x44>
 800aa68:	230a      	movs	r3, #10
 800aa6a:	e7af      	b.n	800a9cc <_strtol_l.constprop.0+0x54>
 800aa6c:	0800f001 	.word	0x0800f001

0800aa70 <strtol>:
 800aa70:	4613      	mov	r3, r2
 800aa72:	460a      	mov	r2, r1
 800aa74:	4601      	mov	r1, r0
 800aa76:	4802      	ldr	r0, [pc, #8]	; (800aa80 <strtol+0x10>)
 800aa78:	6800      	ldr	r0, [r0, #0]
 800aa7a:	f7ff bf7d 	b.w	800a978 <_strtol_l.constprop.0>
 800aa7e:	bf00      	nop
 800aa80:	2000000c 	.word	0x2000000c

0800aa84 <_svfprintf_r>:
 800aa84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa88:	b0d3      	sub	sp, #332	; 0x14c
 800aa8a:	468b      	mov	fp, r1
 800aa8c:	4692      	mov	sl, r2
 800aa8e:	461e      	mov	r6, r3
 800aa90:	4681      	mov	r9, r0
 800aa92:	f002 f98d 	bl	800cdb0 <_localeconv_r>
 800aa96:	6803      	ldr	r3, [r0, #0]
 800aa98:	4618      	mov	r0, r3
 800aa9a:	9317      	str	r3, [sp, #92]	; 0x5c
 800aa9c:	f7f5 fb58 	bl	8000150 <strlen>
 800aaa0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800aaa4:	9012      	str	r0, [sp, #72]	; 0x48
 800aaa6:	0618      	lsls	r0, r3, #24
 800aaa8:	d518      	bpl.n	800aadc <_svfprintf_r+0x58>
 800aaaa:	f8db 3010 	ldr.w	r3, [fp, #16]
 800aaae:	b9ab      	cbnz	r3, 800aadc <_svfprintf_r+0x58>
 800aab0:	2140      	movs	r1, #64	; 0x40
 800aab2:	4648      	mov	r0, r9
 800aab4:	f7ff fc62 	bl	800a37c <_malloc_r>
 800aab8:	f8cb 0000 	str.w	r0, [fp]
 800aabc:	f8cb 0010 	str.w	r0, [fp, #16]
 800aac0:	b948      	cbnz	r0, 800aad6 <_svfprintf_r+0x52>
 800aac2:	230c      	movs	r3, #12
 800aac4:	f8c9 3000 	str.w	r3, [r9]
 800aac8:	f04f 33ff 	mov.w	r3, #4294967295
 800aacc:	930f      	str	r3, [sp, #60]	; 0x3c
 800aace:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800aad0:	b053      	add	sp, #332	; 0x14c
 800aad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aad6:	2340      	movs	r3, #64	; 0x40
 800aad8:	f8cb 3014 	str.w	r3, [fp, #20]
 800aadc:	2500      	movs	r5, #0
 800aade:	2200      	movs	r2, #0
 800aae0:	2300      	movs	r3, #0
 800aae2:	e9cd 5527 	strd	r5, r5, [sp, #156]	; 0x9c
 800aae6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800aaea:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
 800aaee:	ac29      	add	r4, sp, #164	; 0xa4
 800aaf0:	9426      	str	r4, [sp, #152]	; 0x98
 800aaf2:	9509      	str	r5, [sp, #36]	; 0x24
 800aaf4:	950d      	str	r5, [sp, #52]	; 0x34
 800aaf6:	9515      	str	r5, [sp, #84]	; 0x54
 800aaf8:	9518      	str	r5, [sp, #96]	; 0x60
 800aafa:	950f      	str	r5, [sp, #60]	; 0x3c
 800aafc:	4653      	mov	r3, sl
 800aafe:	461d      	mov	r5, r3
 800ab00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab04:	b10a      	cbz	r2, 800ab0a <_svfprintf_r+0x86>
 800ab06:	2a25      	cmp	r2, #37	; 0x25
 800ab08:	d1f9      	bne.n	800aafe <_svfprintf_r+0x7a>
 800ab0a:	ebb5 070a 	subs.w	r7, r5, sl
 800ab0e:	d00d      	beq.n	800ab2c <_svfprintf_r+0xa8>
 800ab10:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ab12:	e9c4 a700 	strd	sl, r7, [r4]
 800ab16:	443b      	add	r3, r7
 800ab18:	9328      	str	r3, [sp, #160]	; 0xa0
 800ab1a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	2b07      	cmp	r3, #7
 800ab20:	9327      	str	r3, [sp, #156]	; 0x9c
 800ab22:	dc79      	bgt.n	800ac18 <_svfprintf_r+0x194>
 800ab24:	3408      	adds	r4, #8
 800ab26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab28:	443b      	add	r3, r7
 800ab2a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab2c:	782b      	ldrb	r3, [r5, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	f001 813a 	beq.w	800bda8 <_svfprintf_r+0x1324>
 800ab34:	2300      	movs	r3, #0
 800ab36:	f04f 32ff 	mov.w	r2, #4294967295
 800ab3a:	4698      	mov	r8, r3
 800ab3c:	9207      	str	r2, [sp, #28]
 800ab3e:	270a      	movs	r7, #10
 800ab40:	222b      	movs	r2, #43	; 0x2b
 800ab42:	3501      	adds	r5, #1
 800ab44:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800ab48:	9313      	str	r3, [sp, #76]	; 0x4c
 800ab4a:	462b      	mov	r3, r5
 800ab4c:	f813 1b01 	ldrb.w	r1, [r3], #1
 800ab50:	910a      	str	r1, [sp, #40]	; 0x28
 800ab52:	930e      	str	r3, [sp, #56]	; 0x38
 800ab54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab56:	3b20      	subs	r3, #32
 800ab58:	2b5a      	cmp	r3, #90	; 0x5a
 800ab5a:	f200 85ac 	bhi.w	800b6b6 <_svfprintf_r+0xc32>
 800ab5e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ab62:	007e      	.short	0x007e
 800ab64:	05aa05aa 	.word	0x05aa05aa
 800ab68:	05aa0086 	.word	0x05aa0086
 800ab6c:	05aa05aa 	.word	0x05aa05aa
 800ab70:	05aa0065 	.word	0x05aa0065
 800ab74:	008905aa 	.word	0x008905aa
 800ab78:	05aa0093 	.word	0x05aa0093
 800ab7c:	00960090 	.word	0x00960090
 800ab80:	00b305aa 	.word	0x00b305aa
 800ab84:	00b600b6 	.word	0x00b600b6
 800ab88:	00b600b6 	.word	0x00b600b6
 800ab8c:	00b600b6 	.word	0x00b600b6
 800ab90:	00b600b6 	.word	0x00b600b6
 800ab94:	05aa00b6 	.word	0x05aa00b6
 800ab98:	05aa05aa 	.word	0x05aa05aa
 800ab9c:	05aa05aa 	.word	0x05aa05aa
 800aba0:	05aa05aa 	.word	0x05aa05aa
 800aba4:	05aa0125 	.word	0x05aa0125
 800aba8:	00f600e3 	.word	0x00f600e3
 800abac:	01250125 	.word	0x01250125
 800abb0:	05aa0125 	.word	0x05aa0125
 800abb4:	05aa05aa 	.word	0x05aa05aa
 800abb8:	00c605aa 	.word	0x00c605aa
 800abbc:	05aa05aa 	.word	0x05aa05aa
 800abc0:	05aa0482 	.word	0x05aa0482
 800abc4:	05aa05aa 	.word	0x05aa05aa
 800abc8:	05aa04cd 	.word	0x05aa04cd
 800abcc:	05aa04ee 	.word	0x05aa04ee
 800abd0:	051005aa 	.word	0x051005aa
 800abd4:	05aa05aa 	.word	0x05aa05aa
 800abd8:	05aa05aa 	.word	0x05aa05aa
 800abdc:	05aa05aa 	.word	0x05aa05aa
 800abe0:	05aa05aa 	.word	0x05aa05aa
 800abe4:	05aa0125 	.word	0x05aa0125
 800abe8:	00f800e3 	.word	0x00f800e3
 800abec:	01250125 	.word	0x01250125
 800abf0:	00c90125 	.word	0x00c90125
 800abf4:	00dd00f8 	.word	0x00dd00f8
 800abf8:	00d605aa 	.word	0x00d605aa
 800abfc:	045d05aa 	.word	0x045d05aa
 800ac00:	04bb0484 	.word	0x04bb0484
 800ac04:	05aa00dd 	.word	0x05aa00dd
 800ac08:	007c04cd 	.word	0x007c04cd
 800ac0c:	05aa04f0 	.word	0x05aa04f0
 800ac10:	052f05aa 	.word	0x052f05aa
 800ac14:	007c05aa 	.word	0x007c05aa
 800ac18:	4659      	mov	r1, fp
 800ac1a:	4648      	mov	r0, r9
 800ac1c:	aa26      	add	r2, sp, #152	; 0x98
 800ac1e:	f002 fc58 	bl	800d4d2 <__ssprint_r>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	f040 812f 	bne.w	800ae86 <_svfprintf_r+0x402>
 800ac28:	ac29      	add	r4, sp, #164	; 0xa4
 800ac2a:	e77c      	b.n	800ab26 <_svfprintf_r+0xa2>
 800ac2c:	4648      	mov	r0, r9
 800ac2e:	f002 f8bf 	bl	800cdb0 <_localeconv_r>
 800ac32:	6843      	ldr	r3, [r0, #4]
 800ac34:	4618      	mov	r0, r3
 800ac36:	9318      	str	r3, [sp, #96]	; 0x60
 800ac38:	f7f5 fa8a 	bl	8000150 <strlen>
 800ac3c:	9015      	str	r0, [sp, #84]	; 0x54
 800ac3e:	4648      	mov	r0, r9
 800ac40:	f002 f8b6 	bl	800cdb0 <_localeconv_r>
 800ac44:	6883      	ldr	r3, [r0, #8]
 800ac46:	222b      	movs	r2, #43	; 0x2b
 800ac48:	930d      	str	r3, [sp, #52]	; 0x34
 800ac4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac4c:	b12b      	cbz	r3, 800ac5a <_svfprintf_r+0x1d6>
 800ac4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac50:	b11b      	cbz	r3, 800ac5a <_svfprintf_r+0x1d6>
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	b10b      	cbz	r3, 800ac5a <_svfprintf_r+0x1d6>
 800ac56:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 800ac5a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ac5c:	e775      	b.n	800ab4a <_svfprintf_r+0xc6>
 800ac5e:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d1f9      	bne.n	800ac5a <_svfprintf_r+0x1d6>
 800ac66:	2320      	movs	r3, #32
 800ac68:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800ac6c:	e7f5      	b.n	800ac5a <_svfprintf_r+0x1d6>
 800ac6e:	f048 0801 	orr.w	r8, r8, #1
 800ac72:	e7f2      	b.n	800ac5a <_svfprintf_r+0x1d6>
 800ac74:	f856 3b04 	ldr.w	r3, [r6], #4
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	9313      	str	r3, [sp, #76]	; 0x4c
 800ac7c:	daed      	bge.n	800ac5a <_svfprintf_r+0x1d6>
 800ac7e:	425b      	negs	r3, r3
 800ac80:	9313      	str	r3, [sp, #76]	; 0x4c
 800ac82:	f048 0804 	orr.w	r8, r8, #4
 800ac86:	e7e8      	b.n	800ac5a <_svfprintf_r+0x1d6>
 800ac88:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800ac8c:	e7e5      	b.n	800ac5a <_svfprintf_r+0x1d6>
 800ac8e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ac90:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ac94:	2b2a      	cmp	r3, #42	; 0x2a
 800ac96:	930a      	str	r3, [sp, #40]	; 0x28
 800ac98:	d113      	bne.n	800acc2 <_svfprintf_r+0x23e>
 800ac9a:	f856 0b04 	ldr.w	r0, [r6], #4
 800ac9e:	950e      	str	r5, [sp, #56]	; 0x38
 800aca0:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800aca4:	9307      	str	r3, [sp, #28]
 800aca6:	e7d8      	b.n	800ac5a <_svfprintf_r+0x1d6>
 800aca8:	9907      	ldr	r1, [sp, #28]
 800acaa:	fb07 3301 	mla	r3, r7, r1, r3
 800acae:	9307      	str	r3, [sp, #28]
 800acb0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800acb4:	930a      	str	r3, [sp, #40]	; 0x28
 800acb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acb8:	3b30      	subs	r3, #48	; 0x30
 800acba:	2b09      	cmp	r3, #9
 800acbc:	d9f4      	bls.n	800aca8 <_svfprintf_r+0x224>
 800acbe:	950e      	str	r5, [sp, #56]	; 0x38
 800acc0:	e748      	b.n	800ab54 <_svfprintf_r+0xd0>
 800acc2:	2300      	movs	r3, #0
 800acc4:	9307      	str	r3, [sp, #28]
 800acc6:	e7f6      	b.n	800acb6 <_svfprintf_r+0x232>
 800acc8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 800accc:	e7c5      	b.n	800ac5a <_svfprintf_r+0x1d6>
 800acce:	2300      	movs	r3, #0
 800acd0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800acd2:	9313      	str	r3, [sp, #76]	; 0x4c
 800acd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acd6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800acd8:	3b30      	subs	r3, #48	; 0x30
 800acda:	fb07 3301 	mla	r3, r7, r1, r3
 800acde:	9313      	str	r3, [sp, #76]	; 0x4c
 800ace0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ace4:	930a      	str	r3, [sp, #40]	; 0x28
 800ace6:	3b30      	subs	r3, #48	; 0x30
 800ace8:	2b09      	cmp	r3, #9
 800acea:	d9f3      	bls.n	800acd4 <_svfprintf_r+0x250>
 800acec:	e7e7      	b.n	800acbe <_svfprintf_r+0x23a>
 800acee:	f048 0808 	orr.w	r8, r8, #8
 800acf2:	e7b2      	b.n	800ac5a <_svfprintf_r+0x1d6>
 800acf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	2b68      	cmp	r3, #104	; 0x68
 800acfa:	bf01      	itttt	eq
 800acfc:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 800acfe:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 800ad02:	3301      	addeq	r3, #1
 800ad04:	930e      	streq	r3, [sp, #56]	; 0x38
 800ad06:	bf18      	it	ne
 800ad08:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 800ad0c:	e7a5      	b.n	800ac5a <_svfprintf_r+0x1d6>
 800ad0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	2b6c      	cmp	r3, #108	; 0x6c
 800ad14:	d105      	bne.n	800ad22 <_svfprintf_r+0x29e>
 800ad16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad18:	3301      	adds	r3, #1
 800ad1a:	930e      	str	r3, [sp, #56]	; 0x38
 800ad1c:	f048 0820 	orr.w	r8, r8, #32
 800ad20:	e79b      	b.n	800ac5a <_svfprintf_r+0x1d6>
 800ad22:	f048 0810 	orr.w	r8, r8, #16
 800ad26:	e798      	b.n	800ac5a <_svfprintf_r+0x1d6>
 800ad28:	4632      	mov	r2, r6
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	f852 3b04 	ldr.w	r3, [r2], #4
 800ad30:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800ad34:	920b      	str	r2, [sp, #44]	; 0x2c
 800ad36:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	4607      	mov	r7, r0
 800ad3e:	4606      	mov	r6, r0
 800ad40:	4605      	mov	r5, r0
 800ad42:	9008      	str	r0, [sp, #32]
 800ad44:	9307      	str	r3, [sp, #28]
 800ad46:	900c      	str	r0, [sp, #48]	; 0x30
 800ad48:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 800ad4c:	e1b0      	b.n	800b0b0 <_svfprintf_r+0x62c>
 800ad4e:	f048 0810 	orr.w	r8, r8, #16
 800ad52:	f018 0f20 	tst.w	r8, #32
 800ad56:	d011      	beq.n	800ad7c <_svfprintf_r+0x2f8>
 800ad58:	1df3      	adds	r3, r6, #7
 800ad5a:	f023 0307 	bic.w	r3, r3, #7
 800ad5e:	461a      	mov	r2, r3
 800ad60:	f852 6b08 	ldr.w	r6, [r2], #8
 800ad64:	685f      	ldr	r7, [r3, #4]
 800ad66:	920b      	str	r2, [sp, #44]	; 0x2c
 800ad68:	2f00      	cmp	r7, #0
 800ad6a:	da05      	bge.n	800ad78 <_svfprintf_r+0x2f4>
 800ad6c:	232d      	movs	r3, #45	; 0x2d
 800ad6e:	4276      	negs	r6, r6
 800ad70:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800ad74:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e387      	b.n	800b48c <_svfprintf_r+0xa08>
 800ad7c:	4633      	mov	r3, r6
 800ad7e:	f853 7b04 	ldr.w	r7, [r3], #4
 800ad82:	f018 0f10 	tst.w	r8, #16
 800ad86:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad88:	d002      	beq.n	800ad90 <_svfprintf_r+0x30c>
 800ad8a:	463e      	mov	r6, r7
 800ad8c:	17ff      	asrs	r7, r7, #31
 800ad8e:	e7eb      	b.n	800ad68 <_svfprintf_r+0x2e4>
 800ad90:	f018 0f40 	tst.w	r8, #64	; 0x40
 800ad94:	d003      	beq.n	800ad9e <_svfprintf_r+0x31a>
 800ad96:	b23e      	sxth	r6, r7
 800ad98:	f347 37c0 	sbfx	r7, r7, #15, #1
 800ad9c:	e7e4      	b.n	800ad68 <_svfprintf_r+0x2e4>
 800ad9e:	f418 7f00 	tst.w	r8, #512	; 0x200
 800ada2:	d0f2      	beq.n	800ad8a <_svfprintf_r+0x306>
 800ada4:	b27e      	sxtb	r6, r7
 800ada6:	f347 17c0 	sbfx	r7, r7, #7, #1
 800adaa:	e7dd      	b.n	800ad68 <_svfprintf_r+0x2e4>
 800adac:	3607      	adds	r6, #7
 800adae:	f026 0307 	bic.w	r3, r6, #7
 800adb2:	4619      	mov	r1, r3
 800adb4:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800adb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800adbc:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 800adc0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800adc4:	910b      	str	r1, [sp, #44]	; 0x2c
 800adc6:	f04f 32ff 	mov.w	r2, #4294967295
 800adca:	4630      	mov	r0, r6
 800adcc:	4629      	mov	r1, r5
 800adce:	4b3a      	ldr	r3, [pc, #232]	; (800aeb8 <_svfprintf_r+0x434>)
 800add0:	f7f5 fe1c 	bl	8000a0c <__aeabi_dcmpun>
 800add4:	bb18      	cbnz	r0, 800ae1e <_svfprintf_r+0x39a>
 800add6:	f04f 32ff 	mov.w	r2, #4294967295
 800adda:	4630      	mov	r0, r6
 800addc:	4629      	mov	r1, r5
 800adde:	4b36      	ldr	r3, [pc, #216]	; (800aeb8 <_svfprintf_r+0x434>)
 800ade0:	f7f5 fdf6 	bl	80009d0 <__aeabi_dcmple>
 800ade4:	b9d8      	cbnz	r0, 800ae1e <_svfprintf_r+0x39a>
 800ade6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800adea:	2200      	movs	r2, #0
 800adec:	2300      	movs	r3, #0
 800adee:	f7f5 fde5 	bl	80009bc <__aeabi_dcmplt>
 800adf2:	b110      	cbz	r0, 800adfa <_svfprintf_r+0x376>
 800adf4:	232d      	movs	r3, #45	; 0x2d
 800adf6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800adfa:	4a30      	ldr	r2, [pc, #192]	; (800aebc <_svfprintf_r+0x438>)
 800adfc:	4830      	ldr	r0, [pc, #192]	; (800aec0 <_svfprintf_r+0x43c>)
 800adfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae00:	2100      	movs	r1, #0
 800ae02:	2b47      	cmp	r3, #71	; 0x47
 800ae04:	bfd4      	ite	le
 800ae06:	4692      	movle	sl, r2
 800ae08:	4682      	movgt	sl, r0
 800ae0a:	2303      	movs	r3, #3
 800ae0c:	e9cd 3107 	strd	r3, r1, [sp, #28]
 800ae10:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 800ae14:	2700      	movs	r7, #0
 800ae16:	463e      	mov	r6, r7
 800ae18:	463b      	mov	r3, r7
 800ae1a:	f000 bfff 	b.w	800be1c <_svfprintf_r+0x1398>
 800ae1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae22:	4610      	mov	r0, r2
 800ae24:	4619      	mov	r1, r3
 800ae26:	f7f5 fdf1 	bl	8000a0c <__aeabi_dcmpun>
 800ae2a:	b148      	cbz	r0, 800ae40 <_svfprintf_r+0x3bc>
 800ae2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae2e:	4a25      	ldr	r2, [pc, #148]	; (800aec4 <_svfprintf_r+0x440>)
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	bfb8      	it	lt
 800ae34:	232d      	movlt	r3, #45	; 0x2d
 800ae36:	4824      	ldr	r0, [pc, #144]	; (800aec8 <_svfprintf_r+0x444>)
 800ae38:	bfb8      	it	lt
 800ae3a:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 800ae3e:	e7de      	b.n	800adfe <_svfprintf_r+0x37a>
 800ae40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae42:	f023 0320 	bic.w	r3, r3, #32
 800ae46:	2b41      	cmp	r3, #65	; 0x41
 800ae48:	930c      	str	r3, [sp, #48]	; 0x30
 800ae4a:	d125      	bne.n	800ae98 <_svfprintf_r+0x414>
 800ae4c:	2330      	movs	r3, #48	; 0x30
 800ae4e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800ae52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae54:	f048 0802 	orr.w	r8, r8, #2
 800ae58:	2b61      	cmp	r3, #97	; 0x61
 800ae5a:	bf0c      	ite	eq
 800ae5c:	2378      	moveq	r3, #120	; 0x78
 800ae5e:	2358      	movne	r3, #88	; 0x58
 800ae60:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800ae64:	9b07      	ldr	r3, [sp, #28]
 800ae66:	2b63      	cmp	r3, #99	; 0x63
 800ae68:	dd30      	ble.n	800aecc <_svfprintf_r+0x448>
 800ae6a:	4648      	mov	r0, r9
 800ae6c:	1c59      	adds	r1, r3, #1
 800ae6e:	f7ff fa85 	bl	800a37c <_malloc_r>
 800ae72:	4682      	mov	sl, r0
 800ae74:	2800      	cmp	r0, #0
 800ae76:	f040 81f7 	bne.w	800b268 <_svfprintf_r+0x7e4>
 800ae7a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800ae7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae82:	f8ab 300c 	strh.w	r3, [fp, #12]
 800ae86:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800ae8a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ae8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae90:	bf18      	it	ne
 800ae92:	f04f 33ff 	movne.w	r3, #4294967295
 800ae96:	e619      	b.n	800aacc <_svfprintf_r+0x48>
 800ae98:	9b07      	ldr	r3, [sp, #28]
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	f000 81e6 	beq.w	800b26c <_svfprintf_r+0x7e8>
 800aea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aea2:	2b47      	cmp	r3, #71	; 0x47
 800aea4:	f040 81e5 	bne.w	800b272 <_svfprintf_r+0x7ee>
 800aea8:	9b07      	ldr	r3, [sp, #28]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	f040 81e1 	bne.w	800b272 <_svfprintf_r+0x7ee>
 800aeb0:	9308      	str	r3, [sp, #32]
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	9307      	str	r3, [sp, #28]
 800aeb6:	e00c      	b.n	800aed2 <_svfprintf_r+0x44e>
 800aeb8:	7fefffff 	.word	0x7fefffff
 800aebc:	0800efac 	.word	0x0800efac
 800aec0:	0800efb0 	.word	0x0800efb0
 800aec4:	0800efb4 	.word	0x0800efb4
 800aec8:	0800efb8 	.word	0x0800efb8
 800aecc:	9008      	str	r0, [sp, #32]
 800aece:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 800aed2:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 800aed6:	9314      	str	r3, [sp, #80]	; 0x50
 800aed8:	e9dd 7310 	ldrd	r7, r3, [sp, #64]	; 0x40
 800aedc:	1e1d      	subs	r5, r3, #0
 800aede:	bfae      	itee	ge
 800aee0:	2300      	movge	r3, #0
 800aee2:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 800aee6:	232d      	movlt	r3, #45	; 0x2d
 800aee8:	931c      	str	r3, [sp, #112]	; 0x70
 800aeea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aeec:	2b41      	cmp	r3, #65	; 0x41
 800aeee:	f040 81d8 	bne.w	800b2a2 <_svfprintf_r+0x81e>
 800aef2:	4638      	mov	r0, r7
 800aef4:	aa20      	add	r2, sp, #128	; 0x80
 800aef6:	4629      	mov	r1, r5
 800aef8:	f002 faa4 	bl	800d444 <frexp>
 800aefc:	2200      	movs	r2, #0
 800aefe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800af02:	f7f5 fae9 	bl	80004d8 <__aeabi_dmul>
 800af06:	2200      	movs	r2, #0
 800af08:	2300      	movs	r3, #0
 800af0a:	4606      	mov	r6, r0
 800af0c:	460f      	mov	r7, r1
 800af0e:	f7f5 fd4b 	bl	80009a8 <__aeabi_dcmpeq>
 800af12:	b108      	cbz	r0, 800af18 <_svfprintf_r+0x494>
 800af14:	2301      	movs	r3, #1
 800af16:	9320      	str	r3, [sp, #128]	; 0x80
 800af18:	4bad      	ldr	r3, [pc, #692]	; (800b1d0 <_svfprintf_r+0x74c>)
 800af1a:	4aae      	ldr	r2, [pc, #696]	; (800b1d4 <_svfprintf_r+0x750>)
 800af1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800af1e:	4655      	mov	r5, sl
 800af20:	2961      	cmp	r1, #97	; 0x61
 800af22:	bf18      	it	ne
 800af24:	461a      	movne	r2, r3
 800af26:	9b07      	ldr	r3, [sp, #28]
 800af28:	921b      	str	r2, [sp, #108]	; 0x6c
 800af2a:	3b01      	subs	r3, #1
 800af2c:	9309      	str	r3, [sp, #36]	; 0x24
 800af2e:	2200      	movs	r2, #0
 800af30:	4ba9      	ldr	r3, [pc, #676]	; (800b1d8 <_svfprintf_r+0x754>)
 800af32:	4630      	mov	r0, r6
 800af34:	4639      	mov	r1, r7
 800af36:	f7f5 facf 	bl	80004d8 <__aeabi_dmul>
 800af3a:	460f      	mov	r7, r1
 800af3c:	4606      	mov	r6, r0
 800af3e:	f7f5 fd7b 	bl	8000a38 <__aeabi_d2iz>
 800af42:	901d      	str	r0, [sp, #116]	; 0x74
 800af44:	f7f5 fa5e 	bl	8000404 <__aeabi_i2d>
 800af48:	4602      	mov	r2, r0
 800af4a:	460b      	mov	r3, r1
 800af4c:	4630      	mov	r0, r6
 800af4e:	4639      	mov	r1, r7
 800af50:	f7f5 f90a 	bl	8000168 <__aeabi_dsub>
 800af54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800af56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af58:	4606      	mov	r6, r0
 800af5a:	5c9b      	ldrb	r3, [r3, r2]
 800af5c:	460f      	mov	r7, r1
 800af5e:	f805 3b01 	strb.w	r3, [r5], #1
 800af62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af64:	1c5a      	adds	r2, r3, #1
 800af66:	9316      	str	r3, [sp, #88]	; 0x58
 800af68:	d007      	beq.n	800af7a <_svfprintf_r+0x4f6>
 800af6a:	3b01      	subs	r3, #1
 800af6c:	9309      	str	r3, [sp, #36]	; 0x24
 800af6e:	2200      	movs	r2, #0
 800af70:	2300      	movs	r3, #0
 800af72:	f7f5 fd19 	bl	80009a8 <__aeabi_dcmpeq>
 800af76:	2800      	cmp	r0, #0
 800af78:	d0d9      	beq.n	800af2e <_svfprintf_r+0x4aa>
 800af7a:	2200      	movs	r2, #0
 800af7c:	4630      	mov	r0, r6
 800af7e:	4639      	mov	r1, r7
 800af80:	4b96      	ldr	r3, [pc, #600]	; (800b1dc <_svfprintf_r+0x758>)
 800af82:	f7f5 fd39 	bl	80009f8 <__aeabi_dcmpgt>
 800af86:	b960      	cbnz	r0, 800afa2 <_svfprintf_r+0x51e>
 800af88:	2200      	movs	r2, #0
 800af8a:	4630      	mov	r0, r6
 800af8c:	4639      	mov	r1, r7
 800af8e:	4b93      	ldr	r3, [pc, #588]	; (800b1dc <_svfprintf_r+0x758>)
 800af90:	f7f5 fd0a 	bl	80009a8 <__aeabi_dcmpeq>
 800af94:	2800      	cmp	r0, #0
 800af96:	f000 817f 	beq.w	800b298 <_svfprintf_r+0x814>
 800af9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af9c:	07db      	lsls	r3, r3, #31
 800af9e:	f140 817b 	bpl.w	800b298 <_svfprintf_r+0x814>
 800afa2:	2030      	movs	r0, #48	; 0x30
 800afa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afa6:	9524      	str	r5, [sp, #144]	; 0x90
 800afa8:	7bd9      	ldrb	r1, [r3, #15]
 800afaa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800afac:	1e53      	subs	r3, r2, #1
 800afae:	9324      	str	r3, [sp, #144]	; 0x90
 800afb0:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800afb4:	428b      	cmp	r3, r1
 800afb6:	f000 815e 	beq.w	800b276 <_svfprintf_r+0x7f2>
 800afba:	2b39      	cmp	r3, #57	; 0x39
 800afbc:	bf0b      	itete	eq
 800afbe:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
 800afc0:	3301      	addne	r3, #1
 800afc2:	7a9b      	ldrbeq	r3, [r3, #10]
 800afc4:	b2db      	uxtbne	r3, r3
 800afc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800afca:	eba5 030a 	sub.w	r3, r5, sl
 800afce:	9309      	str	r3, [sp, #36]	; 0x24
 800afd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afd2:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800afd4:	2b47      	cmp	r3, #71	; 0x47
 800afd6:	f040 81b1 	bne.w	800b33c <_svfprintf_r+0x8b8>
 800afda:	1cef      	adds	r7, r5, #3
 800afdc:	db03      	blt.n	800afe6 <_svfprintf_r+0x562>
 800afde:	9b07      	ldr	r3, [sp, #28]
 800afe0:	42ab      	cmp	r3, r5
 800afe2:	f280 81d6 	bge.w	800b392 <_svfprintf_r+0x90e>
 800afe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afe8:	3b02      	subs	r3, #2
 800afea:	930a      	str	r3, [sp, #40]	; 0x28
 800afec:	990a      	ldr	r1, [sp, #40]	; 0x28
 800afee:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800aff2:	f021 0120 	bic.w	r1, r1, #32
 800aff6:	2941      	cmp	r1, #65	; 0x41
 800aff8:	bf08      	it	eq
 800affa:	320f      	addeq	r2, #15
 800affc:	f105 33ff 	add.w	r3, r5, #4294967295
 800b000:	bf06      	itte	eq
 800b002:	b2d2      	uxtbeq	r2, r2
 800b004:	2101      	moveq	r1, #1
 800b006:	2100      	movne	r1, #0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 800b00e:	bfb4      	ite	lt
 800b010:	222d      	movlt	r2, #45	; 0x2d
 800b012:	222b      	movge	r2, #43	; 0x2b
 800b014:	9320      	str	r3, [sp, #128]	; 0x80
 800b016:	bfb8      	it	lt
 800b018:	f1c5 0301 	rsblt	r3, r5, #1
 800b01c:	2b09      	cmp	r3, #9
 800b01e:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 800b022:	f340 81a4 	ble.w	800b36e <_svfprintf_r+0x8ea>
 800b026:	260a      	movs	r6, #10
 800b028:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 800b02c:	fb93 f5f6 	sdiv	r5, r3, r6
 800b030:	4611      	mov	r1, r2
 800b032:	fb06 3015 	mls	r0, r6, r5, r3
 800b036:	3030      	adds	r0, #48	; 0x30
 800b038:	f801 0c01 	strb.w	r0, [r1, #-1]
 800b03c:	4618      	mov	r0, r3
 800b03e:	2863      	cmp	r0, #99	; 0x63
 800b040:	462b      	mov	r3, r5
 800b042:	f102 32ff 	add.w	r2, r2, #4294967295
 800b046:	dcf1      	bgt.n	800b02c <_svfprintf_r+0x5a8>
 800b048:	3330      	adds	r3, #48	; 0x30
 800b04a:	1e88      	subs	r0, r1, #2
 800b04c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b050:	4603      	mov	r3, r0
 800b052:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 800b056:	f10d 0597 	add.w	r5, sp, #151	; 0x97
 800b05a:	42ab      	cmp	r3, r5
 800b05c:	f0c0 8182 	bcc.w	800b364 <_svfprintf_r+0x8e0>
 800b060:	f10d 0299 	add.w	r2, sp, #153	; 0x99
 800b064:	1a52      	subs	r2, r2, r1
 800b066:	42a8      	cmp	r0, r5
 800b068:	bf88      	it	hi
 800b06a:	2200      	movhi	r2, #0
 800b06c:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 800b070:	441a      	add	r2, r3
 800b072:	ab22      	add	r3, sp, #136	; 0x88
 800b074:	1ad3      	subs	r3, r2, r3
 800b076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b078:	9319      	str	r3, [sp, #100]	; 0x64
 800b07a:	2a01      	cmp	r2, #1
 800b07c:	4413      	add	r3, r2
 800b07e:	9307      	str	r3, [sp, #28]
 800b080:	dc02      	bgt.n	800b088 <_svfprintf_r+0x604>
 800b082:	f018 0f01 	tst.w	r8, #1
 800b086:	d003      	beq.n	800b090 <_svfprintf_r+0x60c>
 800b088:	9b07      	ldr	r3, [sp, #28]
 800b08a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b08c:	4413      	add	r3, r2
 800b08e:	9307      	str	r3, [sp, #28]
 800b090:	2600      	movs	r6, #0
 800b092:	4635      	mov	r5, r6
 800b094:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 800b098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b09c:	9314      	str	r3, [sp, #80]	; 0x50
 800b09e:	960c      	str	r6, [sp, #48]	; 0x30
 800b0a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b0a2:	b113      	cbz	r3, 800b0aa <_svfprintf_r+0x626>
 800b0a4:	232d      	movs	r3, #45	; 0x2d
 800b0a6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800b0aa:	2700      	movs	r7, #0
 800b0ac:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b0b0:	9b07      	ldr	r3, [sp, #28]
 800b0b2:	42bb      	cmp	r3, r7
 800b0b4:	bfb8      	it	lt
 800b0b6:	463b      	movlt	r3, r7
 800b0b8:	9314      	str	r3, [sp, #80]	; 0x50
 800b0ba:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800b0be:	b113      	cbz	r3, 800b0c6 <_svfprintf_r+0x642>
 800b0c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	9314      	str	r3, [sp, #80]	; 0x50
 800b0c6:	f018 0302 	ands.w	r3, r8, #2
 800b0ca:	931b      	str	r3, [sp, #108]	; 0x6c
 800b0cc:	bf1e      	ittt	ne
 800b0ce:	9b14      	ldrne	r3, [sp, #80]	; 0x50
 800b0d0:	3302      	addne	r3, #2
 800b0d2:	9314      	strne	r3, [sp, #80]	; 0x50
 800b0d4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 800b0d8:	931c      	str	r3, [sp, #112]	; 0x70
 800b0da:	d121      	bne.n	800b120 <_svfprintf_r+0x69c>
 800b0dc:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 800b0e0:	1a9b      	subs	r3, r3, r2
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	9316      	str	r3, [sp, #88]	; 0x58
 800b0e6:	dd1b      	ble.n	800b120 <_svfprintf_r+0x69c>
 800b0e8:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800b0ec:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b0ee:	3201      	adds	r2, #1
 800b0f0:	2810      	cmp	r0, #16
 800b0f2:	483b      	ldr	r0, [pc, #236]	; (800b1e0 <_svfprintf_r+0x75c>)
 800b0f4:	f104 0108 	add.w	r1, r4, #8
 800b0f8:	6020      	str	r0, [r4, #0]
 800b0fa:	f300 82eb 	bgt.w	800b6d4 <_svfprintf_r+0xc50>
 800b0fe:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b100:	2a07      	cmp	r2, #7
 800b102:	4403      	add	r3, r0
 800b104:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800b108:	6060      	str	r0, [r4, #4]
 800b10a:	f340 82f8 	ble.w	800b6fe <_svfprintf_r+0xc7a>
 800b10e:	4659      	mov	r1, fp
 800b110:	4648      	mov	r0, r9
 800b112:	aa26      	add	r2, sp, #152	; 0x98
 800b114:	f002 f9dd 	bl	800d4d2 <__ssprint_r>
 800b118:	2800      	cmp	r0, #0
 800b11a:	f040 8623 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800b11e:	ac29      	add	r4, sp, #164	; 0xa4
 800b120:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800b124:	b173      	cbz	r3, 800b144 <_svfprintf_r+0x6c0>
 800b126:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 800b12a:	6023      	str	r3, [r4, #0]
 800b12c:	2301      	movs	r3, #1
 800b12e:	6063      	str	r3, [r4, #4]
 800b130:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b132:	3301      	adds	r3, #1
 800b134:	9328      	str	r3, [sp, #160]	; 0xa0
 800b136:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b138:	3301      	adds	r3, #1
 800b13a:	2b07      	cmp	r3, #7
 800b13c:	9327      	str	r3, [sp, #156]	; 0x9c
 800b13e:	f300 82e0 	bgt.w	800b702 <_svfprintf_r+0xc7e>
 800b142:	3408      	adds	r4, #8
 800b144:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b146:	b16b      	cbz	r3, 800b164 <_svfprintf_r+0x6e0>
 800b148:	ab1f      	add	r3, sp, #124	; 0x7c
 800b14a:	6023      	str	r3, [r4, #0]
 800b14c:	2302      	movs	r3, #2
 800b14e:	6063      	str	r3, [r4, #4]
 800b150:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b152:	3302      	adds	r3, #2
 800b154:	9328      	str	r3, [sp, #160]	; 0xa0
 800b156:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b158:	3301      	adds	r3, #1
 800b15a:	2b07      	cmp	r3, #7
 800b15c:	9327      	str	r3, [sp, #156]	; 0x9c
 800b15e:	f300 82da 	bgt.w	800b716 <_svfprintf_r+0xc92>
 800b162:	3408      	adds	r4, #8
 800b164:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b166:	2b80      	cmp	r3, #128	; 0x80
 800b168:	d121      	bne.n	800b1ae <_svfprintf_r+0x72a>
 800b16a:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 800b16e:	1a9b      	subs	r3, r3, r2
 800b170:	2b00      	cmp	r3, #0
 800b172:	9316      	str	r3, [sp, #88]	; 0x58
 800b174:	dd1b      	ble.n	800b1ae <_svfprintf_r+0x72a>
 800b176:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800b17a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b17c:	3201      	adds	r2, #1
 800b17e:	2810      	cmp	r0, #16
 800b180:	4818      	ldr	r0, [pc, #96]	; (800b1e4 <_svfprintf_r+0x760>)
 800b182:	f104 0108 	add.w	r1, r4, #8
 800b186:	6020      	str	r0, [r4, #0]
 800b188:	f300 82cf 	bgt.w	800b72a <_svfprintf_r+0xca6>
 800b18c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b18e:	2a07      	cmp	r2, #7
 800b190:	4403      	add	r3, r0
 800b192:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800b196:	6060      	str	r0, [r4, #4]
 800b198:	f340 82dc 	ble.w	800b754 <_svfprintf_r+0xcd0>
 800b19c:	4659      	mov	r1, fp
 800b19e:	4648      	mov	r0, r9
 800b1a0:	aa26      	add	r2, sp, #152	; 0x98
 800b1a2:	f002 f996 	bl	800d4d2 <__ssprint_r>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	f040 85dc 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800b1ac:	ac29      	add	r4, sp, #164	; 0xa4
 800b1ae:	9b07      	ldr	r3, [sp, #28]
 800b1b0:	1aff      	subs	r7, r7, r3
 800b1b2:	2f00      	cmp	r7, #0
 800b1b4:	dd28      	ble.n	800b208 <_svfprintf_r+0x784>
 800b1b6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800b1ba:	480a      	ldr	r0, [pc, #40]	; (800b1e4 <_svfprintf_r+0x760>)
 800b1bc:	2f10      	cmp	r7, #16
 800b1be:	f103 0301 	add.w	r3, r3, #1
 800b1c2:	f104 0108 	add.w	r1, r4, #8
 800b1c6:	6020      	str	r0, [r4, #0]
 800b1c8:	f300 82c6 	bgt.w	800b758 <_svfprintf_r+0xcd4>
 800b1cc:	e00c      	b.n	800b1e8 <_svfprintf_r+0x764>
 800b1ce:	bf00      	nop
 800b1d0:	0800efcd 	.word	0x0800efcd
 800b1d4:	0800efbc 	.word	0x0800efbc
 800b1d8:	40300000 	.word	0x40300000
 800b1dc:	3fe00000 	.word	0x3fe00000
 800b1e0:	0800efe0 	.word	0x0800efe0
 800b1e4:	0800eff0 	.word	0x0800eff0
 800b1e8:	6067      	str	r7, [r4, #4]
 800b1ea:	2b07      	cmp	r3, #7
 800b1ec:	4417      	add	r7, r2
 800b1ee:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 800b1f2:	f340 82c4 	ble.w	800b77e <_svfprintf_r+0xcfa>
 800b1f6:	4659      	mov	r1, fp
 800b1f8:	4648      	mov	r0, r9
 800b1fa:	aa26      	add	r2, sp, #152	; 0x98
 800b1fc:	f002 f969 	bl	800d4d2 <__ssprint_r>
 800b200:	2800      	cmp	r0, #0
 800b202:	f040 85af 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800b206:	ac29      	add	r4, sp, #164	; 0xa4
 800b208:	f418 7f80 	tst.w	r8, #256	; 0x100
 800b20c:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 800b20e:	f040 82bd 	bne.w	800b78c <_svfprintf_r+0xd08>
 800b212:	9b07      	ldr	r3, [sp, #28]
 800b214:	f8c4 a000 	str.w	sl, [r4]
 800b218:	441f      	add	r7, r3
 800b21a:	6063      	str	r3, [r4, #4]
 800b21c:	9728      	str	r7, [sp, #160]	; 0xa0
 800b21e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b220:	3301      	adds	r3, #1
 800b222:	2b07      	cmp	r3, #7
 800b224:	9327      	str	r3, [sp, #156]	; 0x9c
 800b226:	f300 82f6 	bgt.w	800b816 <_svfprintf_r+0xd92>
 800b22a:	3408      	adds	r4, #8
 800b22c:	f018 0f04 	tst.w	r8, #4
 800b230:	f040 857a 	bne.w	800bd28 <_svfprintf_r+0x12a4>
 800b234:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 800b238:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b23a:	428a      	cmp	r2, r1
 800b23c:	bfac      	ite	ge
 800b23e:	189b      	addge	r3, r3, r2
 800b240:	185b      	addlt	r3, r3, r1
 800b242:	930f      	str	r3, [sp, #60]	; 0x3c
 800b244:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b246:	b13b      	cbz	r3, 800b258 <_svfprintf_r+0x7d4>
 800b248:	4659      	mov	r1, fp
 800b24a:	4648      	mov	r0, r9
 800b24c:	aa26      	add	r2, sp, #152	; 0x98
 800b24e:	f002 f940 	bl	800d4d2 <__ssprint_r>
 800b252:	2800      	cmp	r0, #0
 800b254:	f040 8586 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800b258:	2300      	movs	r3, #0
 800b25a:	9327      	str	r3, [sp, #156]	; 0x9c
 800b25c:	9b08      	ldr	r3, [sp, #32]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f040 859c 	bne.w	800bd9c <_svfprintf_r+0x1318>
 800b264:	ac29      	add	r4, sp, #164	; 0xa4
 800b266:	e0e4      	b.n	800b432 <_svfprintf_r+0x9ae>
 800b268:	9008      	str	r0, [sp, #32]
 800b26a:	e632      	b.n	800aed2 <_svfprintf_r+0x44e>
 800b26c:	2306      	movs	r3, #6
 800b26e:	9008      	str	r0, [sp, #32]
 800b270:	e620      	b.n	800aeb4 <_svfprintf_r+0x430>
 800b272:	9008      	str	r0, [sp, #32]
 800b274:	e62d      	b.n	800aed2 <_svfprintf_r+0x44e>
 800b276:	f802 0c01 	strb.w	r0, [r2, #-1]
 800b27a:	e696      	b.n	800afaa <_svfprintf_r+0x526>
 800b27c:	f803 0b01 	strb.w	r0, [r3], #1
 800b280:	1aca      	subs	r2, r1, r3
 800b282:	2a00      	cmp	r2, #0
 800b284:	dafa      	bge.n	800b27c <_svfprintf_r+0x7f8>
 800b286:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b288:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b28a:	3201      	adds	r2, #1
 800b28c:	f103 0301 	add.w	r3, r3, #1
 800b290:	bfb8      	it	lt
 800b292:	2300      	movlt	r3, #0
 800b294:	441d      	add	r5, r3
 800b296:	e698      	b.n	800afca <_svfprintf_r+0x546>
 800b298:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b29a:	462b      	mov	r3, r5
 800b29c:	2030      	movs	r0, #48	; 0x30
 800b29e:	18a9      	adds	r1, r5, r2
 800b2a0:	e7ee      	b.n	800b280 <_svfprintf_r+0x7fc>
 800b2a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2a4:	2b46      	cmp	r3, #70	; 0x46
 800b2a6:	d005      	beq.n	800b2b4 <_svfprintf_r+0x830>
 800b2a8:	2b45      	cmp	r3, #69	; 0x45
 800b2aa:	d11b      	bne.n	800b2e4 <_svfprintf_r+0x860>
 800b2ac:	9b07      	ldr	r3, [sp, #28]
 800b2ae:	1c5e      	adds	r6, r3, #1
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	e001      	b.n	800b2b8 <_svfprintf_r+0x834>
 800b2b4:	2303      	movs	r3, #3
 800b2b6:	9e07      	ldr	r6, [sp, #28]
 800b2b8:	aa24      	add	r2, sp, #144	; 0x90
 800b2ba:	9204      	str	r2, [sp, #16]
 800b2bc:	aa21      	add	r2, sp, #132	; 0x84
 800b2be:	9203      	str	r2, [sp, #12]
 800b2c0:	aa20      	add	r2, sp, #128	; 0x80
 800b2c2:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800b2c6:	9300      	str	r3, [sp, #0]
 800b2c8:	463a      	mov	r2, r7
 800b2ca:	462b      	mov	r3, r5
 800b2cc:	4648      	mov	r0, r9
 800b2ce:	f000 fe93 	bl	800bff8 <_dtoa_r>
 800b2d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2d4:	4682      	mov	sl, r0
 800b2d6:	2b47      	cmp	r3, #71	; 0x47
 800b2d8:	d106      	bne.n	800b2e8 <_svfprintf_r+0x864>
 800b2da:	f018 0f01 	tst.w	r8, #1
 800b2de:	d103      	bne.n	800b2e8 <_svfprintf_r+0x864>
 800b2e0:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800b2e2:	e672      	b.n	800afca <_svfprintf_r+0x546>
 800b2e4:	9e07      	ldr	r6, [sp, #28]
 800b2e6:	e7e3      	b.n	800b2b0 <_svfprintf_r+0x82c>
 800b2e8:	eb0a 0306 	add.w	r3, sl, r6
 800b2ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2f0:	2b46      	cmp	r3, #70	; 0x46
 800b2f2:	d111      	bne.n	800b318 <_svfprintf_r+0x894>
 800b2f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b2f8:	2b30      	cmp	r3, #48	; 0x30
 800b2fa:	d109      	bne.n	800b310 <_svfprintf_r+0x88c>
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	2300      	movs	r3, #0
 800b300:	4638      	mov	r0, r7
 800b302:	4629      	mov	r1, r5
 800b304:	f7f5 fb50 	bl	80009a8 <__aeabi_dcmpeq>
 800b308:	b910      	cbnz	r0, 800b310 <_svfprintf_r+0x88c>
 800b30a:	f1c6 0601 	rsb	r6, r6, #1
 800b30e:	9620      	str	r6, [sp, #128]	; 0x80
 800b310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b312:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b314:	441a      	add	r2, r3
 800b316:	9209      	str	r2, [sp, #36]	; 0x24
 800b318:	2200      	movs	r2, #0
 800b31a:	2300      	movs	r3, #0
 800b31c:	4638      	mov	r0, r7
 800b31e:	4629      	mov	r1, r5
 800b320:	f7f5 fb42 	bl	80009a8 <__aeabi_dcmpeq>
 800b324:	b108      	cbz	r0, 800b32a <_svfprintf_r+0x8a6>
 800b326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b328:	9324      	str	r3, [sp, #144]	; 0x90
 800b32a:	2230      	movs	r2, #48	; 0x30
 800b32c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b32e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b330:	4299      	cmp	r1, r3
 800b332:	d9d5      	bls.n	800b2e0 <_svfprintf_r+0x85c>
 800b334:	1c59      	adds	r1, r3, #1
 800b336:	9124      	str	r1, [sp, #144]	; 0x90
 800b338:	701a      	strb	r2, [r3, #0]
 800b33a:	e7f7      	b.n	800b32c <_svfprintf_r+0x8a8>
 800b33c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b33e:	2b46      	cmp	r3, #70	; 0x46
 800b340:	f47f ae54 	bne.w	800afec <_svfprintf_r+0x568>
 800b344:	9a07      	ldr	r2, [sp, #28]
 800b346:	f008 0301 	and.w	r3, r8, #1
 800b34a:	2d00      	cmp	r5, #0
 800b34c:	ea43 0302 	orr.w	r3, r3, r2
 800b350:	dd1a      	ble.n	800b388 <_svfprintf_r+0x904>
 800b352:	2b00      	cmp	r3, #0
 800b354:	d034      	beq.n	800b3c0 <_svfprintf_r+0x93c>
 800b356:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b358:	18eb      	adds	r3, r5, r3
 800b35a:	441a      	add	r2, r3
 800b35c:	9207      	str	r2, [sp, #28]
 800b35e:	2366      	movs	r3, #102	; 0x66
 800b360:	930a      	str	r3, [sp, #40]	; 0x28
 800b362:	e033      	b.n	800b3cc <_svfprintf_r+0x948>
 800b364:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b368:	f802 6b01 	strb.w	r6, [r2], #1
 800b36c:	e675      	b.n	800b05a <_svfprintf_r+0x5d6>
 800b36e:	b941      	cbnz	r1, 800b382 <_svfprintf_r+0x8fe>
 800b370:	2230      	movs	r2, #48	; 0x30
 800b372:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 800b376:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 800b37a:	3330      	adds	r3, #48	; 0x30
 800b37c:	f802 3b01 	strb.w	r3, [r2], #1
 800b380:	e677      	b.n	800b072 <_svfprintf_r+0x5ee>
 800b382:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 800b386:	e7f8      	b.n	800b37a <_svfprintf_r+0x8f6>
 800b388:	b1e3      	cbz	r3, 800b3c4 <_svfprintf_r+0x940>
 800b38a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b38c:	9a07      	ldr	r2, [sp, #28]
 800b38e:	3301      	adds	r3, #1
 800b390:	e7e3      	b.n	800b35a <_svfprintf_r+0x8d6>
 800b392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b394:	429d      	cmp	r5, r3
 800b396:	db07      	blt.n	800b3a8 <_svfprintf_r+0x924>
 800b398:	f018 0f01 	tst.w	r8, #1
 800b39c:	d02b      	beq.n	800b3f6 <_svfprintf_r+0x972>
 800b39e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b3a0:	18eb      	adds	r3, r5, r3
 800b3a2:	9307      	str	r3, [sp, #28]
 800b3a4:	2367      	movs	r3, #103	; 0x67
 800b3a6:	e7db      	b.n	800b360 <_svfprintf_r+0x8dc>
 800b3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b3ac:	2d00      	cmp	r5, #0
 800b3ae:	4413      	add	r3, r2
 800b3b0:	9307      	str	r3, [sp, #28]
 800b3b2:	dcf7      	bgt.n	800b3a4 <_svfprintf_r+0x920>
 800b3b4:	9a07      	ldr	r2, [sp, #28]
 800b3b6:	f1c5 0301 	rsb	r3, r5, #1
 800b3ba:	441a      	add	r2, r3
 800b3bc:	9207      	str	r2, [sp, #28]
 800b3be:	e7f1      	b.n	800b3a4 <_svfprintf_r+0x920>
 800b3c0:	9507      	str	r5, [sp, #28]
 800b3c2:	e7cc      	b.n	800b35e <_svfprintf_r+0x8da>
 800b3c4:	2366      	movs	r3, #102	; 0x66
 800b3c6:	930a      	str	r3, [sp, #40]	; 0x28
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	9307      	str	r3, [sp, #28]
 800b3cc:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 800b3d0:	930c      	str	r3, [sp, #48]	; 0x30
 800b3d2:	d021      	beq.n	800b418 <_svfprintf_r+0x994>
 800b3d4:	2600      	movs	r6, #0
 800b3d6:	2d00      	cmp	r5, #0
 800b3d8:	960c      	str	r6, [sp, #48]	; 0x30
 800b3da:	f77f ae61 	ble.w	800b0a0 <_svfprintf_r+0x61c>
 800b3de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	2bff      	cmp	r3, #255	; 0xff
 800b3e4:	d109      	bne.n	800b3fa <_svfprintf_r+0x976>
 800b3e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3e8:	9a07      	ldr	r2, [sp, #28]
 800b3ea:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b3ec:	4433      	add	r3, r6
 800b3ee:	fb01 2303 	mla	r3, r1, r3, r2
 800b3f2:	9307      	str	r3, [sp, #28]
 800b3f4:	e654      	b.n	800b0a0 <_svfprintf_r+0x61c>
 800b3f6:	9507      	str	r5, [sp, #28]
 800b3f8:	e7d4      	b.n	800b3a4 <_svfprintf_r+0x920>
 800b3fa:	42ab      	cmp	r3, r5
 800b3fc:	daf3      	bge.n	800b3e6 <_svfprintf_r+0x962>
 800b3fe:	1aed      	subs	r5, r5, r3
 800b400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b402:	785b      	ldrb	r3, [r3, #1]
 800b404:	b133      	cbz	r3, 800b414 <_svfprintf_r+0x990>
 800b406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b408:	3301      	adds	r3, #1
 800b40a:	930c      	str	r3, [sp, #48]	; 0x30
 800b40c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b40e:	3301      	adds	r3, #1
 800b410:	930d      	str	r3, [sp, #52]	; 0x34
 800b412:	e7e4      	b.n	800b3de <_svfprintf_r+0x95a>
 800b414:	3601      	adds	r6, #1
 800b416:	e7e2      	b.n	800b3de <_svfprintf_r+0x95a>
 800b418:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b41a:	e641      	b.n	800b0a0 <_svfprintf_r+0x61c>
 800b41c:	1d33      	adds	r3, r6, #4
 800b41e:	f018 0f20 	tst.w	r8, #32
 800b422:	930b      	str	r3, [sp, #44]	; 0x2c
 800b424:	d00a      	beq.n	800b43c <_svfprintf_r+0x9b8>
 800b426:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b428:	6833      	ldr	r3, [r6, #0]
 800b42a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b42c:	17d2      	asrs	r2, r2, #31
 800b42e:	e9c3 1200 	strd	r1, r2, [r3]
 800b432:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b434:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800b438:	f7ff bb60 	b.w	800aafc <_svfprintf_r+0x78>
 800b43c:	f018 0f10 	tst.w	r8, #16
 800b440:	d003      	beq.n	800b44a <_svfprintf_r+0x9c6>
 800b442:	6833      	ldr	r3, [r6, #0]
 800b444:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b446:	601a      	str	r2, [r3, #0]
 800b448:	e7f3      	b.n	800b432 <_svfprintf_r+0x9ae>
 800b44a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800b44e:	d003      	beq.n	800b458 <_svfprintf_r+0x9d4>
 800b450:	6833      	ldr	r3, [r6, #0]
 800b452:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b454:	801a      	strh	r2, [r3, #0]
 800b456:	e7ec      	b.n	800b432 <_svfprintf_r+0x9ae>
 800b458:	f418 7f00 	tst.w	r8, #512	; 0x200
 800b45c:	d0f1      	beq.n	800b442 <_svfprintf_r+0x9be>
 800b45e:	6833      	ldr	r3, [r6, #0]
 800b460:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b462:	701a      	strb	r2, [r3, #0]
 800b464:	e7e5      	b.n	800b432 <_svfprintf_r+0x9ae>
 800b466:	f048 0810 	orr.w	r8, r8, #16
 800b46a:	f018 0320 	ands.w	r3, r8, #32
 800b46e:	d020      	beq.n	800b4b2 <_svfprintf_r+0xa2e>
 800b470:	1df3      	adds	r3, r6, #7
 800b472:	f023 0307 	bic.w	r3, r3, #7
 800b476:	461a      	mov	r2, r3
 800b478:	f852 6b08 	ldr.w	r6, [r2], #8
 800b47c:	685f      	ldr	r7, [r3, #4]
 800b47e:	920b      	str	r2, [sp, #44]	; 0x2c
 800b480:	2300      	movs	r3, #0
 800b482:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 800b486:	2200      	movs	r2, #0
 800b488:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800b48c:	9a07      	ldr	r2, [sp, #28]
 800b48e:	3201      	adds	r2, #1
 800b490:	f000 8495 	beq.w	800bdbe <_svfprintf_r+0x133a>
 800b494:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 800b498:	9208      	str	r2, [sp, #32]
 800b49a:	ea56 0207 	orrs.w	r2, r6, r7
 800b49e:	f040 8494 	bne.w	800bdca <_svfprintf_r+0x1346>
 800b4a2:	9a07      	ldr	r2, [sp, #28]
 800b4a4:	2a00      	cmp	r2, #0
 800b4a6:	f000 80fb 	beq.w	800b6a0 <_svfprintf_r+0xc1c>
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	f040 8490 	bne.w	800bdd0 <_svfprintf_r+0x134c>
 800b4b0:	e09f      	b.n	800b5f2 <_svfprintf_r+0xb6e>
 800b4b2:	4632      	mov	r2, r6
 800b4b4:	f852 6b04 	ldr.w	r6, [r2], #4
 800b4b8:	f018 0710 	ands.w	r7, r8, #16
 800b4bc:	920b      	str	r2, [sp, #44]	; 0x2c
 800b4be:	d001      	beq.n	800b4c4 <_svfprintf_r+0xa40>
 800b4c0:	461f      	mov	r7, r3
 800b4c2:	e7dd      	b.n	800b480 <_svfprintf_r+0x9fc>
 800b4c4:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 800b4c8:	d001      	beq.n	800b4ce <_svfprintf_r+0xa4a>
 800b4ca:	b2b6      	uxth	r6, r6
 800b4cc:	e7d8      	b.n	800b480 <_svfprintf_r+0x9fc>
 800b4ce:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 800b4d2:	d0d5      	beq.n	800b480 <_svfprintf_r+0x9fc>
 800b4d4:	b2f6      	uxtb	r6, r6
 800b4d6:	e7f3      	b.n	800b4c0 <_svfprintf_r+0xa3c>
 800b4d8:	4633      	mov	r3, r6
 800b4da:	f853 6b04 	ldr.w	r6, [r3], #4
 800b4de:	2278      	movs	r2, #120	; 0x78
 800b4e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4e2:	2330      	movs	r3, #48	; 0x30
 800b4e4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800b4e8:	4ba6      	ldr	r3, [pc, #664]	; (800b784 <_svfprintf_r+0xd00>)
 800b4ea:	2700      	movs	r7, #0
 800b4ec:	931a      	str	r3, [sp, #104]	; 0x68
 800b4ee:	f048 0802 	orr.w	r8, r8, #2
 800b4f2:	2302      	movs	r3, #2
 800b4f4:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 800b4f8:	920a      	str	r2, [sp, #40]	; 0x28
 800b4fa:	e7c4      	b.n	800b486 <_svfprintf_r+0xa02>
 800b4fc:	4633      	mov	r3, r6
 800b4fe:	2500      	movs	r5, #0
 800b500:	f853 ab04 	ldr.w	sl, [r3], #4
 800b504:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 800b508:	930b      	str	r3, [sp, #44]	; 0x2c
 800b50a:	9b07      	ldr	r3, [sp, #28]
 800b50c:	1c58      	adds	r0, r3, #1
 800b50e:	d010      	beq.n	800b532 <_svfprintf_r+0xaae>
 800b510:	461a      	mov	r2, r3
 800b512:	4629      	mov	r1, r5
 800b514:	4650      	mov	r0, sl
 800b516:	f001 fc53 	bl	800cdc0 <memchr>
 800b51a:	9008      	str	r0, [sp, #32]
 800b51c:	2800      	cmp	r0, #0
 800b51e:	f000 80d6 	beq.w	800b6ce <_svfprintf_r+0xc4a>
 800b522:	eba0 030a 	sub.w	r3, r0, sl
 800b526:	462f      	mov	r7, r5
 800b528:	462e      	mov	r6, r5
 800b52a:	e9cd 3507 	strd	r3, r5, [sp, #28]
 800b52e:	950c      	str	r5, [sp, #48]	; 0x30
 800b530:	e5be      	b.n	800b0b0 <_svfprintf_r+0x62c>
 800b532:	4650      	mov	r0, sl
 800b534:	f7f4 fe0c 	bl	8000150 <strlen>
 800b538:	e9cd 0507 	strd	r0, r5, [sp, #28]
 800b53c:	e46a      	b.n	800ae14 <_svfprintf_r+0x390>
 800b53e:	f048 0810 	orr.w	r8, r8, #16
 800b542:	f018 0320 	ands.w	r3, r8, #32
 800b546:	d009      	beq.n	800b55c <_svfprintf_r+0xad8>
 800b548:	1df3      	adds	r3, r6, #7
 800b54a:	f023 0307 	bic.w	r3, r3, #7
 800b54e:	461a      	mov	r2, r3
 800b550:	f852 6b08 	ldr.w	r6, [r2], #8
 800b554:	685f      	ldr	r7, [r3, #4]
 800b556:	920b      	str	r2, [sp, #44]	; 0x2c
 800b558:	2301      	movs	r3, #1
 800b55a:	e794      	b.n	800b486 <_svfprintf_r+0xa02>
 800b55c:	4632      	mov	r2, r6
 800b55e:	f852 6b04 	ldr.w	r6, [r2], #4
 800b562:	f018 0710 	ands.w	r7, r8, #16
 800b566:	920b      	str	r2, [sp, #44]	; 0x2c
 800b568:	d001      	beq.n	800b56e <_svfprintf_r+0xaea>
 800b56a:	461f      	mov	r7, r3
 800b56c:	e7f4      	b.n	800b558 <_svfprintf_r+0xad4>
 800b56e:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 800b572:	d001      	beq.n	800b578 <_svfprintf_r+0xaf4>
 800b574:	b2b6      	uxth	r6, r6
 800b576:	e7ef      	b.n	800b558 <_svfprintf_r+0xad4>
 800b578:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 800b57c:	d0ec      	beq.n	800b558 <_svfprintf_r+0xad4>
 800b57e:	b2f6      	uxtb	r6, r6
 800b580:	e7f3      	b.n	800b56a <_svfprintf_r+0xae6>
 800b582:	4b81      	ldr	r3, [pc, #516]	; (800b788 <_svfprintf_r+0xd04>)
 800b584:	931a      	str	r3, [sp, #104]	; 0x68
 800b586:	f018 0320 	ands.w	r3, r8, #32
 800b58a:	d01b      	beq.n	800b5c4 <_svfprintf_r+0xb40>
 800b58c:	1df3      	adds	r3, r6, #7
 800b58e:	f023 0307 	bic.w	r3, r3, #7
 800b592:	461a      	mov	r2, r3
 800b594:	f852 6b08 	ldr.w	r6, [r2], #8
 800b598:	685f      	ldr	r7, [r3, #4]
 800b59a:	920b      	str	r2, [sp, #44]	; 0x2c
 800b59c:	f018 0f01 	tst.w	r8, #1
 800b5a0:	d00a      	beq.n	800b5b8 <_svfprintf_r+0xb34>
 800b5a2:	ea56 0307 	orrs.w	r3, r6, r7
 800b5a6:	d007      	beq.n	800b5b8 <_svfprintf_r+0xb34>
 800b5a8:	2330      	movs	r3, #48	; 0x30
 800b5aa:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800b5ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5b0:	f048 0802 	orr.w	r8, r8, #2
 800b5b4:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800b5b8:	2302      	movs	r3, #2
 800b5ba:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 800b5be:	e762      	b.n	800b486 <_svfprintf_r+0xa02>
 800b5c0:	4b70      	ldr	r3, [pc, #448]	; (800b784 <_svfprintf_r+0xd00>)
 800b5c2:	e7df      	b.n	800b584 <_svfprintf_r+0xb00>
 800b5c4:	4632      	mov	r2, r6
 800b5c6:	f852 6b04 	ldr.w	r6, [r2], #4
 800b5ca:	f018 0710 	ands.w	r7, r8, #16
 800b5ce:	920b      	str	r2, [sp, #44]	; 0x2c
 800b5d0:	d001      	beq.n	800b5d6 <_svfprintf_r+0xb52>
 800b5d2:	461f      	mov	r7, r3
 800b5d4:	e7e2      	b.n	800b59c <_svfprintf_r+0xb18>
 800b5d6:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 800b5da:	d001      	beq.n	800b5e0 <_svfprintf_r+0xb5c>
 800b5dc:	b2b6      	uxth	r6, r6
 800b5de:	e7dd      	b.n	800b59c <_svfprintf_r+0xb18>
 800b5e0:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 800b5e4:	d0da      	beq.n	800b59c <_svfprintf_r+0xb18>
 800b5e6:	b2f6      	uxtb	r6, r6
 800b5e8:	e7f3      	b.n	800b5d2 <_svfprintf_r+0xb4e>
 800b5ea:	2e0a      	cmp	r6, #10
 800b5ec:	f177 0300 	sbcs.w	r3, r7, #0
 800b5f0:	d206      	bcs.n	800b600 <_svfprintf_r+0xb7c>
 800b5f2:	3630      	adds	r6, #48	; 0x30
 800b5f4:	f88d 6147 	strb.w	r6, [sp, #327]	; 0x147
 800b5f8:	f20d 1a47 	addw	sl, sp, #327	; 0x147
 800b5fc:	f000 bc04 	b.w	800be08 <_svfprintf_r+0x1384>
 800b600:	2300      	movs	r3, #0
 800b602:	9309      	str	r3, [sp, #36]	; 0x24
 800b604:	9b08      	ldr	r3, [sp, #32]
 800b606:	ad52      	add	r5, sp, #328	; 0x148
 800b608:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 800b60c:	220a      	movs	r2, #10
 800b60e:	2300      	movs	r3, #0
 800b610:	4630      	mov	r0, r6
 800b612:	4639      	mov	r1, r7
 800b614:	f7f5 fa38 	bl	8000a88 <__aeabi_uldivmod>
 800b618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b61a:	3230      	adds	r2, #48	; 0x30
 800b61c:	3301      	adds	r3, #1
 800b61e:	f105 3aff 	add.w	sl, r5, #4294967295
 800b622:	f805 2c01 	strb.w	r2, [r5, #-1]
 800b626:	9309      	str	r3, [sp, #36]	; 0x24
 800b628:	f1b8 0f00 	cmp.w	r8, #0
 800b62c:	d019      	beq.n	800b662 <_svfprintf_r+0xbde>
 800b62e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b630:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	429a      	cmp	r2, r3
 800b636:	d114      	bne.n	800b662 <_svfprintf_r+0xbde>
 800b638:	2aff      	cmp	r2, #255	; 0xff
 800b63a:	d012      	beq.n	800b662 <_svfprintf_r+0xbde>
 800b63c:	2e0a      	cmp	r6, #10
 800b63e:	f177 0300 	sbcs.w	r3, r7, #0
 800b642:	d30e      	bcc.n	800b662 <_svfprintf_r+0xbde>
 800b644:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b646:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b648:	ebaa 0a03 	sub.w	sl, sl, r3
 800b64c:	461a      	mov	r2, r3
 800b64e:	4650      	mov	r0, sl
 800b650:	f001 ff2c 	bl	800d4ac <strncpy>
 800b654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b656:	785d      	ldrb	r5, [r3, #1]
 800b658:	b195      	cbz	r5, 800b680 <_svfprintf_r+0xbfc>
 800b65a:	3301      	adds	r3, #1
 800b65c:	930d      	str	r3, [sp, #52]	; 0x34
 800b65e:	2300      	movs	r3, #0
 800b660:	9309      	str	r3, [sp, #36]	; 0x24
 800b662:	2300      	movs	r3, #0
 800b664:	220a      	movs	r2, #10
 800b666:	4630      	mov	r0, r6
 800b668:	4639      	mov	r1, r7
 800b66a:	f7f5 fa0d 	bl	8000a88 <__aeabi_uldivmod>
 800b66e:	2e0a      	cmp	r6, #10
 800b670:	f177 0300 	sbcs.w	r3, r7, #0
 800b674:	f0c0 83c8 	bcc.w	800be08 <_svfprintf_r+0x1384>
 800b678:	4606      	mov	r6, r0
 800b67a:	460f      	mov	r7, r1
 800b67c:	4655      	mov	r5, sl
 800b67e:	e7c5      	b.n	800b60c <_svfprintf_r+0xb88>
 800b680:	9509      	str	r5, [sp, #36]	; 0x24
 800b682:	e7ee      	b.n	800b662 <_svfprintf_r+0xbde>
 800b684:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b686:	f006 030f 	and.w	r3, r6, #15
 800b68a:	5cd3      	ldrb	r3, [r2, r3]
 800b68c:	0936      	lsrs	r6, r6, #4
 800b68e:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 800b692:	093f      	lsrs	r7, r7, #4
 800b694:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 800b698:	ea56 0307 	orrs.w	r3, r6, r7
 800b69c:	d1f2      	bne.n	800b684 <_svfprintf_r+0xc00>
 800b69e:	e3b3      	b.n	800be08 <_svfprintf_r+0x1384>
 800b6a0:	b933      	cbnz	r3, 800b6b0 <_svfprintf_r+0xc2c>
 800b6a2:	f018 0f01 	tst.w	r8, #1
 800b6a6:	d003      	beq.n	800b6b0 <_svfprintf_r+0xc2c>
 800b6a8:	2330      	movs	r3, #48	; 0x30
 800b6aa:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 800b6ae:	e7a3      	b.n	800b5f8 <_svfprintf_r+0xb74>
 800b6b0:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800b6b4:	e3a8      	b.n	800be08 <_svfprintf_r+0x1384>
 800b6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f000 8375 	beq.w	800bda8 <_svfprintf_r+0x1324>
 800b6be:	2000      	movs	r0, #0
 800b6c0:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800b6c4:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800b6c8:	960b      	str	r6, [sp, #44]	; 0x2c
 800b6ca:	f7ff bb36 	b.w	800ad3a <_svfprintf_r+0x2b6>
 800b6ce:	9f08      	ldr	r7, [sp, #32]
 800b6d0:	f7ff bba1 	b.w	800ae16 <_svfprintf_r+0x392>
 800b6d4:	2010      	movs	r0, #16
 800b6d6:	2a07      	cmp	r2, #7
 800b6d8:	4403      	add	r3, r0
 800b6da:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800b6de:	6060      	str	r0, [r4, #4]
 800b6e0:	dd08      	ble.n	800b6f4 <_svfprintf_r+0xc70>
 800b6e2:	4659      	mov	r1, fp
 800b6e4:	4648      	mov	r0, r9
 800b6e6:	aa26      	add	r2, sp, #152	; 0x98
 800b6e8:	f001 fef3 	bl	800d4d2 <__ssprint_r>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	f040 8339 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800b6f2:	a929      	add	r1, sp, #164	; 0xa4
 800b6f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b6f6:	460c      	mov	r4, r1
 800b6f8:	3b10      	subs	r3, #16
 800b6fa:	9316      	str	r3, [sp, #88]	; 0x58
 800b6fc:	e4f4      	b.n	800b0e8 <_svfprintf_r+0x664>
 800b6fe:	460c      	mov	r4, r1
 800b700:	e50e      	b.n	800b120 <_svfprintf_r+0x69c>
 800b702:	4659      	mov	r1, fp
 800b704:	4648      	mov	r0, r9
 800b706:	aa26      	add	r2, sp, #152	; 0x98
 800b708:	f001 fee3 	bl	800d4d2 <__ssprint_r>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	f040 8329 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800b712:	ac29      	add	r4, sp, #164	; 0xa4
 800b714:	e516      	b.n	800b144 <_svfprintf_r+0x6c0>
 800b716:	4659      	mov	r1, fp
 800b718:	4648      	mov	r0, r9
 800b71a:	aa26      	add	r2, sp, #152	; 0x98
 800b71c:	f001 fed9 	bl	800d4d2 <__ssprint_r>
 800b720:	2800      	cmp	r0, #0
 800b722:	f040 831f 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800b726:	ac29      	add	r4, sp, #164	; 0xa4
 800b728:	e51c      	b.n	800b164 <_svfprintf_r+0x6e0>
 800b72a:	2010      	movs	r0, #16
 800b72c:	2a07      	cmp	r2, #7
 800b72e:	4403      	add	r3, r0
 800b730:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800b734:	6060      	str	r0, [r4, #4]
 800b736:	dd08      	ble.n	800b74a <_svfprintf_r+0xcc6>
 800b738:	4659      	mov	r1, fp
 800b73a:	4648      	mov	r0, r9
 800b73c:	aa26      	add	r2, sp, #152	; 0x98
 800b73e:	f001 fec8 	bl	800d4d2 <__ssprint_r>
 800b742:	2800      	cmp	r0, #0
 800b744:	f040 830e 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800b748:	a929      	add	r1, sp, #164	; 0xa4
 800b74a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b74c:	460c      	mov	r4, r1
 800b74e:	3b10      	subs	r3, #16
 800b750:	9316      	str	r3, [sp, #88]	; 0x58
 800b752:	e510      	b.n	800b176 <_svfprintf_r+0x6f2>
 800b754:	460c      	mov	r4, r1
 800b756:	e52a      	b.n	800b1ae <_svfprintf_r+0x72a>
 800b758:	2010      	movs	r0, #16
 800b75a:	2b07      	cmp	r3, #7
 800b75c:	4402      	add	r2, r0
 800b75e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800b762:	6060      	str	r0, [r4, #4]
 800b764:	dd08      	ble.n	800b778 <_svfprintf_r+0xcf4>
 800b766:	4659      	mov	r1, fp
 800b768:	4648      	mov	r0, r9
 800b76a:	aa26      	add	r2, sp, #152	; 0x98
 800b76c:	f001 feb1 	bl	800d4d2 <__ssprint_r>
 800b770:	2800      	cmp	r0, #0
 800b772:	f040 82f7 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800b776:	a929      	add	r1, sp, #164	; 0xa4
 800b778:	460c      	mov	r4, r1
 800b77a:	3f10      	subs	r7, #16
 800b77c:	e51b      	b.n	800b1b6 <_svfprintf_r+0x732>
 800b77e:	460c      	mov	r4, r1
 800b780:	e542      	b.n	800b208 <_svfprintf_r+0x784>
 800b782:	bf00      	nop
 800b784:	0800efbc 	.word	0x0800efbc
 800b788:	0800efcd 	.word	0x0800efcd
 800b78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b78e:	2b65      	cmp	r3, #101	; 0x65
 800b790:	f340 8230 	ble.w	800bbf4 <_svfprintf_r+0x1170>
 800b794:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b798:	2200      	movs	r2, #0
 800b79a:	2300      	movs	r3, #0
 800b79c:	f7f5 f904 	bl	80009a8 <__aeabi_dcmpeq>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d068      	beq.n	800b876 <_svfprintf_r+0xdf2>
 800b7a4:	4b6d      	ldr	r3, [pc, #436]	; (800b95c <_svfprintf_r+0xed8>)
 800b7a6:	6023      	str	r3, [r4, #0]
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	441f      	add	r7, r3
 800b7ac:	6063      	str	r3, [r4, #4]
 800b7ae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b7b0:	9728      	str	r7, [sp, #160]	; 0xa0
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	2b07      	cmp	r3, #7
 800b7b6:	9327      	str	r3, [sp, #156]	; 0x9c
 800b7b8:	dc37      	bgt.n	800b82a <_svfprintf_r+0xda6>
 800b7ba:	3408      	adds	r4, #8
 800b7bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b7be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	db03      	blt.n	800b7cc <_svfprintf_r+0xd48>
 800b7c4:	f018 0f01 	tst.w	r8, #1
 800b7c8:	f43f ad30 	beq.w	800b22c <_svfprintf_r+0x7a8>
 800b7cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b7d0:	6023      	str	r3, [r4, #0]
 800b7d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b7d4:	6063      	str	r3, [r4, #4]
 800b7d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b7d8:	4413      	add	r3, r2
 800b7da:	9328      	str	r3, [sp, #160]	; 0xa0
 800b7dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b7de:	3301      	adds	r3, #1
 800b7e0:	2b07      	cmp	r3, #7
 800b7e2:	9327      	str	r3, [sp, #156]	; 0x9c
 800b7e4:	dc2b      	bgt.n	800b83e <_svfprintf_r+0xdba>
 800b7e6:	3408      	adds	r4, #8
 800b7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7ea:	1e5d      	subs	r5, r3, #1
 800b7ec:	2d00      	cmp	r5, #0
 800b7ee:	f77f ad1d 	ble.w	800b22c <_svfprintf_r+0x7a8>
 800b7f2:	2710      	movs	r7, #16
 800b7f4:	4e5a      	ldr	r6, [pc, #360]	; (800b960 <_svfprintf_r+0xedc>)
 800b7f6:	2d10      	cmp	r5, #16
 800b7f8:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800b7fc:	f104 0108 	add.w	r1, r4, #8
 800b800:	f103 0301 	add.w	r3, r3, #1
 800b804:	6026      	str	r6, [r4, #0]
 800b806:	dc24      	bgt.n	800b852 <_svfprintf_r+0xdce>
 800b808:	6065      	str	r5, [r4, #4]
 800b80a:	2b07      	cmp	r3, #7
 800b80c:	4415      	add	r5, r2
 800b80e:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800b812:	f340 8286 	ble.w	800bd22 <_svfprintf_r+0x129e>
 800b816:	4659      	mov	r1, fp
 800b818:	4648      	mov	r0, r9
 800b81a:	aa26      	add	r2, sp, #152	; 0x98
 800b81c:	f001 fe59 	bl	800d4d2 <__ssprint_r>
 800b820:	2800      	cmp	r0, #0
 800b822:	f040 829f 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800b826:	ac29      	add	r4, sp, #164	; 0xa4
 800b828:	e500      	b.n	800b22c <_svfprintf_r+0x7a8>
 800b82a:	4659      	mov	r1, fp
 800b82c:	4648      	mov	r0, r9
 800b82e:	aa26      	add	r2, sp, #152	; 0x98
 800b830:	f001 fe4f 	bl	800d4d2 <__ssprint_r>
 800b834:	2800      	cmp	r0, #0
 800b836:	f040 8295 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800b83a:	ac29      	add	r4, sp, #164	; 0xa4
 800b83c:	e7be      	b.n	800b7bc <_svfprintf_r+0xd38>
 800b83e:	4659      	mov	r1, fp
 800b840:	4648      	mov	r0, r9
 800b842:	aa26      	add	r2, sp, #152	; 0x98
 800b844:	f001 fe45 	bl	800d4d2 <__ssprint_r>
 800b848:	2800      	cmp	r0, #0
 800b84a:	f040 828b 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800b84e:	ac29      	add	r4, sp, #164	; 0xa4
 800b850:	e7ca      	b.n	800b7e8 <_svfprintf_r+0xd64>
 800b852:	3210      	adds	r2, #16
 800b854:	2b07      	cmp	r3, #7
 800b856:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800b85a:	6067      	str	r7, [r4, #4]
 800b85c:	dd08      	ble.n	800b870 <_svfprintf_r+0xdec>
 800b85e:	4659      	mov	r1, fp
 800b860:	4648      	mov	r0, r9
 800b862:	aa26      	add	r2, sp, #152	; 0x98
 800b864:	f001 fe35 	bl	800d4d2 <__ssprint_r>
 800b868:	2800      	cmp	r0, #0
 800b86a:	f040 827b 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800b86e:	a929      	add	r1, sp, #164	; 0xa4
 800b870:	460c      	mov	r4, r1
 800b872:	3d10      	subs	r5, #16
 800b874:	e7bf      	b.n	800b7f6 <_svfprintf_r+0xd72>
 800b876:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b878:	2b00      	cmp	r3, #0
 800b87a:	dc73      	bgt.n	800b964 <_svfprintf_r+0xee0>
 800b87c:	4b37      	ldr	r3, [pc, #220]	; (800b95c <_svfprintf_r+0xed8>)
 800b87e:	6023      	str	r3, [r4, #0]
 800b880:	2301      	movs	r3, #1
 800b882:	441f      	add	r7, r3
 800b884:	6063      	str	r3, [r4, #4]
 800b886:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b888:	9728      	str	r7, [sp, #160]	; 0xa0
 800b88a:	3301      	adds	r3, #1
 800b88c:	2b07      	cmp	r3, #7
 800b88e:	9327      	str	r3, [sp, #156]	; 0x9c
 800b890:	dc3d      	bgt.n	800b90e <_svfprintf_r+0xe8a>
 800b892:	3408      	adds	r4, #8
 800b894:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b896:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b898:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b89a:	430a      	orrs	r2, r1
 800b89c:	f008 0101 	and.w	r1, r8, #1
 800b8a0:	430a      	orrs	r2, r1
 800b8a2:	f43f acc3 	beq.w	800b22c <_svfprintf_r+0x7a8>
 800b8a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b8a8:	6022      	str	r2, [r4, #0]
 800b8aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b8ac:	4413      	add	r3, r2
 800b8ae:	9328      	str	r3, [sp, #160]	; 0xa0
 800b8b0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b8b2:	6062      	str	r2, [r4, #4]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	2b07      	cmp	r3, #7
 800b8b8:	9327      	str	r3, [sp, #156]	; 0x9c
 800b8ba:	dc32      	bgt.n	800b922 <_svfprintf_r+0xe9e>
 800b8bc:	3408      	adds	r4, #8
 800b8be:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800b8c0:	2d00      	cmp	r5, #0
 800b8c2:	da1b      	bge.n	800b8fc <_svfprintf_r+0xe78>
 800b8c4:	4623      	mov	r3, r4
 800b8c6:	2710      	movs	r7, #16
 800b8c8:	4e25      	ldr	r6, [pc, #148]	; (800b960 <_svfprintf_r+0xedc>)
 800b8ca:	426d      	negs	r5, r5
 800b8cc:	2d10      	cmp	r5, #16
 800b8ce:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 800b8d2:	f104 0408 	add.w	r4, r4, #8
 800b8d6:	f102 0201 	add.w	r2, r2, #1
 800b8da:	601e      	str	r6, [r3, #0]
 800b8dc:	dc2b      	bgt.n	800b936 <_svfprintf_r+0xeb2>
 800b8de:	605d      	str	r5, [r3, #4]
 800b8e0:	2a07      	cmp	r2, #7
 800b8e2:	440d      	add	r5, r1
 800b8e4:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 800b8e8:	dd08      	ble.n	800b8fc <_svfprintf_r+0xe78>
 800b8ea:	4659      	mov	r1, fp
 800b8ec:	4648      	mov	r0, r9
 800b8ee:	aa26      	add	r2, sp, #152	; 0x98
 800b8f0:	f001 fdef 	bl	800d4d2 <__ssprint_r>
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	f040 8235 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800b8fa:	ac29      	add	r4, sp, #164	; 0xa4
 800b8fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b900:	6063      	str	r3, [r4, #4]
 800b902:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b904:	f8c4 a000 	str.w	sl, [r4]
 800b908:	4413      	add	r3, r2
 800b90a:	9328      	str	r3, [sp, #160]	; 0xa0
 800b90c:	e487      	b.n	800b21e <_svfprintf_r+0x79a>
 800b90e:	4659      	mov	r1, fp
 800b910:	4648      	mov	r0, r9
 800b912:	aa26      	add	r2, sp, #152	; 0x98
 800b914:	f001 fddd 	bl	800d4d2 <__ssprint_r>
 800b918:	2800      	cmp	r0, #0
 800b91a:	f040 8223 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800b91e:	ac29      	add	r4, sp, #164	; 0xa4
 800b920:	e7b8      	b.n	800b894 <_svfprintf_r+0xe10>
 800b922:	4659      	mov	r1, fp
 800b924:	4648      	mov	r0, r9
 800b926:	aa26      	add	r2, sp, #152	; 0x98
 800b928:	f001 fdd3 	bl	800d4d2 <__ssprint_r>
 800b92c:	2800      	cmp	r0, #0
 800b92e:	f040 8219 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800b932:	ac29      	add	r4, sp, #164	; 0xa4
 800b934:	e7c3      	b.n	800b8be <_svfprintf_r+0xe3a>
 800b936:	3110      	adds	r1, #16
 800b938:	2a07      	cmp	r2, #7
 800b93a:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 800b93e:	605f      	str	r7, [r3, #4]
 800b940:	dd08      	ble.n	800b954 <_svfprintf_r+0xed0>
 800b942:	4659      	mov	r1, fp
 800b944:	4648      	mov	r0, r9
 800b946:	aa26      	add	r2, sp, #152	; 0x98
 800b948:	f001 fdc3 	bl	800d4d2 <__ssprint_r>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	f040 8209 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800b952:	ac29      	add	r4, sp, #164	; 0xa4
 800b954:	4623      	mov	r3, r4
 800b956:	3d10      	subs	r5, #16
 800b958:	e7b8      	b.n	800b8cc <_svfprintf_r+0xe48>
 800b95a:	bf00      	nop
 800b95c:	0800efde 	.word	0x0800efde
 800b960:	0800eff0 	.word	0x0800eff0
 800b964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b966:	42ab      	cmp	r3, r5
 800b968:	bfa8      	it	ge
 800b96a:	462b      	movge	r3, r5
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	9307      	str	r3, [sp, #28]
 800b970:	dd0a      	ble.n	800b988 <_svfprintf_r+0xf04>
 800b972:	441f      	add	r7, r3
 800b974:	e9c4 a300 	strd	sl, r3, [r4]
 800b978:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b97a:	9728      	str	r7, [sp, #160]	; 0xa0
 800b97c:	3301      	adds	r3, #1
 800b97e:	2b07      	cmp	r3, #7
 800b980:	9327      	str	r3, [sp, #156]	; 0x9c
 800b982:	f300 8085 	bgt.w	800ba90 <_svfprintf_r+0x100c>
 800b986:	3408      	adds	r4, #8
 800b988:	9b07      	ldr	r3, [sp, #28]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	bfb4      	ite	lt
 800b98e:	462f      	movlt	r7, r5
 800b990:	1aef      	subge	r7, r5, r3
 800b992:	2f00      	cmp	r7, #0
 800b994:	dd19      	ble.n	800b9ca <_svfprintf_r+0xf46>
 800b996:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800b99a:	4895      	ldr	r0, [pc, #596]	; (800bbf0 <_svfprintf_r+0x116c>)
 800b99c:	2f10      	cmp	r7, #16
 800b99e:	f103 0301 	add.w	r3, r3, #1
 800b9a2:	f104 0108 	add.w	r1, r4, #8
 800b9a6:	6020      	str	r0, [r4, #0]
 800b9a8:	dc7c      	bgt.n	800baa4 <_svfprintf_r+0x1020>
 800b9aa:	6067      	str	r7, [r4, #4]
 800b9ac:	2b07      	cmp	r3, #7
 800b9ae:	4417      	add	r7, r2
 800b9b0:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 800b9b4:	f340 8089 	ble.w	800baca <_svfprintf_r+0x1046>
 800b9b8:	4659      	mov	r1, fp
 800b9ba:	4648      	mov	r0, r9
 800b9bc:	aa26      	add	r2, sp, #152	; 0x98
 800b9be:	f001 fd88 	bl	800d4d2 <__ssprint_r>
 800b9c2:	2800      	cmp	r0, #0
 800b9c4:	f040 81ce 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800b9c8:	ac29      	add	r4, sp, #164	; 0xa4
 800b9ca:	f418 6f80 	tst.w	r8, #1024	; 0x400
 800b9ce:	4455      	add	r5, sl
 800b9d0:	d009      	beq.n	800b9e6 <_svfprintf_r+0xf62>
 800b9d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d17a      	bne.n	800bace <_svfprintf_r+0x104a>
 800b9d8:	2e00      	cmp	r6, #0
 800b9da:	d17a      	bne.n	800bad2 <_svfprintf_r+0x104e>
 800b9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9de:	4453      	add	r3, sl
 800b9e0:	429d      	cmp	r5, r3
 800b9e2:	bf28      	it	cs
 800b9e4:	461d      	movcs	r5, r3
 800b9e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b9e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	db02      	blt.n	800b9f4 <_svfprintf_r+0xf70>
 800b9ee:	f018 0f01 	tst.w	r8, #1
 800b9f2:	d00e      	beq.n	800ba12 <_svfprintf_r+0xf8e>
 800b9f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b9f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b9fc:	6063      	str	r3, [r4, #4]
 800b9fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ba00:	4413      	add	r3, r2
 800ba02:	9328      	str	r3, [sp, #160]	; 0xa0
 800ba04:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ba06:	3301      	adds	r3, #1
 800ba08:	2b07      	cmp	r3, #7
 800ba0a:	9327      	str	r3, [sp, #156]	; 0x9c
 800ba0c:	f300 80db 	bgt.w	800bbc6 <_svfprintf_r+0x1142>
 800ba10:	3408      	adds	r4, #8
 800ba12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba14:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800ba16:	eb0a 0203 	add.w	r2, sl, r3
 800ba1a:	1b9e      	subs	r6, r3, r6
 800ba1c:	1b52      	subs	r2, r2, r5
 800ba1e:	4296      	cmp	r6, r2
 800ba20:	bfa8      	it	ge
 800ba22:	4616      	movge	r6, r2
 800ba24:	2e00      	cmp	r6, #0
 800ba26:	dd0b      	ble.n	800ba40 <_svfprintf_r+0xfbc>
 800ba28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ba2a:	e9c4 5600 	strd	r5, r6, [r4]
 800ba2e:	4433      	add	r3, r6
 800ba30:	9328      	str	r3, [sp, #160]	; 0xa0
 800ba32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ba34:	3301      	adds	r3, #1
 800ba36:	2b07      	cmp	r3, #7
 800ba38:	9327      	str	r3, [sp, #156]	; 0x9c
 800ba3a:	f300 80ce 	bgt.w	800bbda <_svfprintf_r+0x1156>
 800ba3e:	3408      	adds	r4, #8
 800ba40:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800ba42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba44:	2e00      	cmp	r6, #0
 800ba46:	eba3 0505 	sub.w	r5, r3, r5
 800ba4a:	bfa8      	it	ge
 800ba4c:	1bad      	subge	r5, r5, r6
 800ba4e:	2d00      	cmp	r5, #0
 800ba50:	f77f abec 	ble.w	800b22c <_svfprintf_r+0x7a8>
 800ba54:	2710      	movs	r7, #16
 800ba56:	4e66      	ldr	r6, [pc, #408]	; (800bbf0 <_svfprintf_r+0x116c>)
 800ba58:	2d10      	cmp	r5, #16
 800ba5a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800ba5e:	f104 0108 	add.w	r1, r4, #8
 800ba62:	f103 0301 	add.w	r3, r3, #1
 800ba66:	6026      	str	r6, [r4, #0]
 800ba68:	f77f aece 	ble.w	800b808 <_svfprintf_r+0xd84>
 800ba6c:	3210      	adds	r2, #16
 800ba6e:	2b07      	cmp	r3, #7
 800ba70:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800ba74:	6067      	str	r7, [r4, #4]
 800ba76:	dd08      	ble.n	800ba8a <_svfprintf_r+0x1006>
 800ba78:	4659      	mov	r1, fp
 800ba7a:	4648      	mov	r0, r9
 800ba7c:	aa26      	add	r2, sp, #152	; 0x98
 800ba7e:	f001 fd28 	bl	800d4d2 <__ssprint_r>
 800ba82:	2800      	cmp	r0, #0
 800ba84:	f040 816e 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800ba88:	a929      	add	r1, sp, #164	; 0xa4
 800ba8a:	460c      	mov	r4, r1
 800ba8c:	3d10      	subs	r5, #16
 800ba8e:	e7e3      	b.n	800ba58 <_svfprintf_r+0xfd4>
 800ba90:	4659      	mov	r1, fp
 800ba92:	4648      	mov	r0, r9
 800ba94:	aa26      	add	r2, sp, #152	; 0x98
 800ba96:	f001 fd1c 	bl	800d4d2 <__ssprint_r>
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	f040 8162 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800baa0:	ac29      	add	r4, sp, #164	; 0xa4
 800baa2:	e771      	b.n	800b988 <_svfprintf_r+0xf04>
 800baa4:	2010      	movs	r0, #16
 800baa6:	2b07      	cmp	r3, #7
 800baa8:	4402      	add	r2, r0
 800baaa:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800baae:	6060      	str	r0, [r4, #4]
 800bab0:	dd08      	ble.n	800bac4 <_svfprintf_r+0x1040>
 800bab2:	4659      	mov	r1, fp
 800bab4:	4648      	mov	r0, r9
 800bab6:	aa26      	add	r2, sp, #152	; 0x98
 800bab8:	f001 fd0b 	bl	800d4d2 <__ssprint_r>
 800babc:	2800      	cmp	r0, #0
 800babe:	f040 8151 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800bac2:	a929      	add	r1, sp, #164	; 0xa4
 800bac4:	460c      	mov	r4, r1
 800bac6:	3f10      	subs	r7, #16
 800bac8:	e765      	b.n	800b996 <_svfprintf_r+0xf12>
 800baca:	460c      	mov	r4, r1
 800bacc:	e77d      	b.n	800b9ca <_svfprintf_r+0xf46>
 800bace:	2e00      	cmp	r6, #0
 800bad0:	d049      	beq.n	800bb66 <_svfprintf_r+0x10e2>
 800bad2:	3e01      	subs	r6, #1
 800bad4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bad6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bad8:	6023      	str	r3, [r4, #0]
 800bada:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800badc:	6063      	str	r3, [r4, #4]
 800bade:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bae0:	4413      	add	r3, r2
 800bae2:	9328      	str	r3, [sp, #160]	; 0xa0
 800bae4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800bae6:	3301      	adds	r3, #1
 800bae8:	2b07      	cmp	r3, #7
 800baea:	9327      	str	r3, [sp, #156]	; 0x9c
 800baec:	dc42      	bgt.n	800bb74 <_svfprintf_r+0x10f0>
 800baee:	3408      	adds	r4, #8
 800baf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baf2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800baf4:	4453      	add	r3, sl
 800baf6:	7812      	ldrb	r2, [r2, #0]
 800baf8:	1b5b      	subs	r3, r3, r5
 800bafa:	429a      	cmp	r2, r3
 800bafc:	bfa8      	it	ge
 800bafe:	461a      	movge	r2, r3
 800bb00:	2a00      	cmp	r2, #0
 800bb02:	9207      	str	r2, [sp, #28]
 800bb04:	dd0a      	ble.n	800bb1c <_svfprintf_r+0x1098>
 800bb06:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bb08:	e9c4 5200 	strd	r5, r2, [r4]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	9328      	str	r3, [sp, #160]	; 0xa0
 800bb10:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800bb12:	3301      	adds	r3, #1
 800bb14:	2b07      	cmp	r3, #7
 800bb16:	9327      	str	r3, [sp, #156]	; 0x9c
 800bb18:	dc36      	bgt.n	800bb88 <_svfprintf_r+0x1104>
 800bb1a:	3408      	adds	r4, #8
 800bb1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb1e:	781f      	ldrb	r7, [r3, #0]
 800bb20:	9b07      	ldr	r3, [sp, #28]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	bfa8      	it	ge
 800bb26:	1aff      	subge	r7, r7, r3
 800bb28:	2f00      	cmp	r7, #0
 800bb2a:	dd18      	ble.n	800bb5e <_svfprintf_r+0x10da>
 800bb2c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800bb30:	482f      	ldr	r0, [pc, #188]	; (800bbf0 <_svfprintf_r+0x116c>)
 800bb32:	2f10      	cmp	r7, #16
 800bb34:	f103 0301 	add.w	r3, r3, #1
 800bb38:	f104 0108 	add.w	r1, r4, #8
 800bb3c:	6020      	str	r0, [r4, #0]
 800bb3e:	dc2d      	bgt.n	800bb9c <_svfprintf_r+0x1118>
 800bb40:	443a      	add	r2, r7
 800bb42:	2b07      	cmp	r3, #7
 800bb44:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800bb48:	6067      	str	r7, [r4, #4]
 800bb4a:	dd3a      	ble.n	800bbc2 <_svfprintf_r+0x113e>
 800bb4c:	4659      	mov	r1, fp
 800bb4e:	4648      	mov	r0, r9
 800bb50:	aa26      	add	r2, sp, #152	; 0x98
 800bb52:	f001 fcbe 	bl	800d4d2 <__ssprint_r>
 800bb56:	2800      	cmp	r0, #0
 800bb58:	f040 8104 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800bb5c:	ac29      	add	r4, sp, #164	; 0xa4
 800bb5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	441d      	add	r5, r3
 800bb64:	e735      	b.n	800b9d2 <_svfprintf_r+0xf4e>
 800bb66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	930d      	str	r3, [sp, #52]	; 0x34
 800bb6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	930c      	str	r3, [sp, #48]	; 0x30
 800bb72:	e7af      	b.n	800bad4 <_svfprintf_r+0x1050>
 800bb74:	4659      	mov	r1, fp
 800bb76:	4648      	mov	r0, r9
 800bb78:	aa26      	add	r2, sp, #152	; 0x98
 800bb7a:	f001 fcaa 	bl	800d4d2 <__ssprint_r>
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	f040 80f0 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800bb84:	ac29      	add	r4, sp, #164	; 0xa4
 800bb86:	e7b3      	b.n	800baf0 <_svfprintf_r+0x106c>
 800bb88:	4659      	mov	r1, fp
 800bb8a:	4648      	mov	r0, r9
 800bb8c:	aa26      	add	r2, sp, #152	; 0x98
 800bb8e:	f001 fca0 	bl	800d4d2 <__ssprint_r>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	f040 80e6 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800bb98:	ac29      	add	r4, sp, #164	; 0xa4
 800bb9a:	e7bf      	b.n	800bb1c <_svfprintf_r+0x1098>
 800bb9c:	2010      	movs	r0, #16
 800bb9e:	2b07      	cmp	r3, #7
 800bba0:	4402      	add	r2, r0
 800bba2:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800bba6:	6060      	str	r0, [r4, #4]
 800bba8:	dd08      	ble.n	800bbbc <_svfprintf_r+0x1138>
 800bbaa:	4659      	mov	r1, fp
 800bbac:	4648      	mov	r0, r9
 800bbae:	aa26      	add	r2, sp, #152	; 0x98
 800bbb0:	f001 fc8f 	bl	800d4d2 <__ssprint_r>
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	f040 80d5 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800bbba:	a929      	add	r1, sp, #164	; 0xa4
 800bbbc:	460c      	mov	r4, r1
 800bbbe:	3f10      	subs	r7, #16
 800bbc0:	e7b4      	b.n	800bb2c <_svfprintf_r+0x10a8>
 800bbc2:	460c      	mov	r4, r1
 800bbc4:	e7cb      	b.n	800bb5e <_svfprintf_r+0x10da>
 800bbc6:	4659      	mov	r1, fp
 800bbc8:	4648      	mov	r0, r9
 800bbca:	aa26      	add	r2, sp, #152	; 0x98
 800bbcc:	f001 fc81 	bl	800d4d2 <__ssprint_r>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	f040 80c7 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800bbd6:	ac29      	add	r4, sp, #164	; 0xa4
 800bbd8:	e71b      	b.n	800ba12 <_svfprintf_r+0xf8e>
 800bbda:	4659      	mov	r1, fp
 800bbdc:	4648      	mov	r0, r9
 800bbde:	aa26      	add	r2, sp, #152	; 0x98
 800bbe0:	f001 fc77 	bl	800d4d2 <__ssprint_r>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	f040 80bd 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800bbea:	ac29      	add	r4, sp, #164	; 0xa4
 800bbec:	e728      	b.n	800ba40 <_svfprintf_r+0xfbc>
 800bbee:	bf00      	nop
 800bbf0:	0800eff0 	.word	0x0800eff0
 800bbf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbf6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800bbf8:	2a01      	cmp	r2, #1
 800bbfa:	f107 0701 	add.w	r7, r7, #1
 800bbfe:	f103 0301 	add.w	r3, r3, #1
 800bc02:	f104 0508 	add.w	r5, r4, #8
 800bc06:	dc02      	bgt.n	800bc0e <_svfprintf_r+0x118a>
 800bc08:	f018 0f01 	tst.w	r8, #1
 800bc0c:	d07e      	beq.n	800bd0c <_svfprintf_r+0x1288>
 800bc0e:	2201      	movs	r2, #1
 800bc10:	2b07      	cmp	r3, #7
 800bc12:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 800bc16:	f8c4 a000 	str.w	sl, [r4]
 800bc1a:	6062      	str	r2, [r4, #4]
 800bc1c:	dd08      	ble.n	800bc30 <_svfprintf_r+0x11ac>
 800bc1e:	4659      	mov	r1, fp
 800bc20:	4648      	mov	r0, r9
 800bc22:	aa26      	add	r2, sp, #152	; 0x98
 800bc24:	f001 fc55 	bl	800d4d2 <__ssprint_r>
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	f040 809b 	bne.w	800bd64 <_svfprintf_r+0x12e0>
 800bc2e:	ad29      	add	r5, sp, #164	; 0xa4
 800bc30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bc34:	602b      	str	r3, [r5, #0]
 800bc36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc38:	606b      	str	r3, [r5, #4]
 800bc3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bc3c:	4413      	add	r3, r2
 800bc3e:	9328      	str	r3, [sp, #160]	; 0xa0
 800bc40:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800bc42:	3301      	adds	r3, #1
 800bc44:	2b07      	cmp	r3, #7
 800bc46:	9327      	str	r3, [sp, #156]	; 0x9c
 800bc48:	dc32      	bgt.n	800bcb0 <_svfprintf_r+0x122c>
 800bc4a:	3508      	adds	r5, #8
 800bc4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc4e:	2200      	movs	r2, #0
 800bc50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc54:	1e5c      	subs	r4, r3, #1
 800bc56:	2300      	movs	r3, #0
 800bc58:	f7f4 fea6 	bl	80009a8 <__aeabi_dcmpeq>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	d130      	bne.n	800bcc2 <_svfprintf_r+0x123e>
 800bc60:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800bc62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bc64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc66:	3101      	adds	r1, #1
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	f10a 0001 	add.w	r0, sl, #1
 800bc6e:	4413      	add	r3, r2
 800bc70:	2907      	cmp	r1, #7
 800bc72:	e9c5 0400 	strd	r0, r4, [r5]
 800bc76:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
 800bc7a:	dd50      	ble.n	800bd1e <_svfprintf_r+0x129a>
 800bc7c:	4659      	mov	r1, fp
 800bc7e:	4648      	mov	r0, r9
 800bc80:	aa26      	add	r2, sp, #152	; 0x98
 800bc82:	f001 fc26 	bl	800d4d2 <__ssprint_r>
 800bc86:	2800      	cmp	r0, #0
 800bc88:	d16c      	bne.n	800bd64 <_svfprintf_r+0x12e0>
 800bc8a:	ad29      	add	r5, sp, #164	; 0xa4
 800bc8c:	ab22      	add	r3, sp, #136	; 0x88
 800bc8e:	602b      	str	r3, [r5, #0]
 800bc90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bc92:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bc94:	606b      	str	r3, [r5, #4]
 800bc96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bc98:	4413      	add	r3, r2
 800bc9a:	9328      	str	r3, [sp, #160]	; 0xa0
 800bc9c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800bc9e:	3301      	adds	r3, #1
 800bca0:	2b07      	cmp	r3, #7
 800bca2:	9327      	str	r3, [sp, #156]	; 0x9c
 800bca4:	f73f adb7 	bgt.w	800b816 <_svfprintf_r+0xd92>
 800bca8:	f105 0408 	add.w	r4, r5, #8
 800bcac:	f7ff babe 	b.w	800b22c <_svfprintf_r+0x7a8>
 800bcb0:	4659      	mov	r1, fp
 800bcb2:	4648      	mov	r0, r9
 800bcb4:	aa26      	add	r2, sp, #152	; 0x98
 800bcb6:	f001 fc0c 	bl	800d4d2 <__ssprint_r>
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	d152      	bne.n	800bd64 <_svfprintf_r+0x12e0>
 800bcbe:	ad29      	add	r5, sp, #164	; 0xa4
 800bcc0:	e7c4      	b.n	800bc4c <_svfprintf_r+0x11c8>
 800bcc2:	2c00      	cmp	r4, #0
 800bcc4:	dde2      	ble.n	800bc8c <_svfprintf_r+0x1208>
 800bcc6:	2710      	movs	r7, #16
 800bcc8:	4e56      	ldr	r6, [pc, #344]	; (800be24 <_svfprintf_r+0x13a0>)
 800bcca:	2c10      	cmp	r4, #16
 800bccc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800bcd0:	f105 0108 	add.w	r1, r5, #8
 800bcd4:	f103 0301 	add.w	r3, r3, #1
 800bcd8:	602e      	str	r6, [r5, #0]
 800bcda:	dc07      	bgt.n	800bcec <_svfprintf_r+0x1268>
 800bcdc:	606c      	str	r4, [r5, #4]
 800bcde:	2b07      	cmp	r3, #7
 800bce0:	4414      	add	r4, r2
 800bce2:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 800bce6:	dcc9      	bgt.n	800bc7c <_svfprintf_r+0x11f8>
 800bce8:	460d      	mov	r5, r1
 800bcea:	e7cf      	b.n	800bc8c <_svfprintf_r+0x1208>
 800bcec:	3210      	adds	r2, #16
 800bcee:	2b07      	cmp	r3, #7
 800bcf0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800bcf4:	606f      	str	r7, [r5, #4]
 800bcf6:	dd06      	ble.n	800bd06 <_svfprintf_r+0x1282>
 800bcf8:	4659      	mov	r1, fp
 800bcfa:	4648      	mov	r0, r9
 800bcfc:	aa26      	add	r2, sp, #152	; 0x98
 800bcfe:	f001 fbe8 	bl	800d4d2 <__ssprint_r>
 800bd02:	bb78      	cbnz	r0, 800bd64 <_svfprintf_r+0x12e0>
 800bd04:	a929      	add	r1, sp, #164	; 0xa4
 800bd06:	460d      	mov	r5, r1
 800bd08:	3c10      	subs	r4, #16
 800bd0a:	e7de      	b.n	800bcca <_svfprintf_r+0x1246>
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	2b07      	cmp	r3, #7
 800bd10:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 800bd14:	f8c4 a000 	str.w	sl, [r4]
 800bd18:	6062      	str	r2, [r4, #4]
 800bd1a:	ddb7      	ble.n	800bc8c <_svfprintf_r+0x1208>
 800bd1c:	e7ae      	b.n	800bc7c <_svfprintf_r+0x11f8>
 800bd1e:	3508      	adds	r5, #8
 800bd20:	e7b4      	b.n	800bc8c <_svfprintf_r+0x1208>
 800bd22:	460c      	mov	r4, r1
 800bd24:	f7ff ba82 	b.w	800b22c <_svfprintf_r+0x7a8>
 800bd28:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 800bd2c:	1a9d      	subs	r5, r3, r2
 800bd2e:	2d00      	cmp	r5, #0
 800bd30:	f77f aa80 	ble.w	800b234 <_svfprintf_r+0x7b0>
 800bd34:	2710      	movs	r7, #16
 800bd36:	4e3c      	ldr	r6, [pc, #240]	; (800be28 <_svfprintf_r+0x13a4>)
 800bd38:	2d10      	cmp	r5, #16
 800bd3a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800bd3e:	6026      	str	r6, [r4, #0]
 800bd40:	f103 0301 	add.w	r3, r3, #1
 800bd44:	dc18      	bgt.n	800bd78 <_svfprintf_r+0x12f4>
 800bd46:	6065      	str	r5, [r4, #4]
 800bd48:	2b07      	cmp	r3, #7
 800bd4a:	4415      	add	r5, r2
 800bd4c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800bd50:	f77f aa70 	ble.w	800b234 <_svfprintf_r+0x7b0>
 800bd54:	4659      	mov	r1, fp
 800bd56:	4648      	mov	r0, r9
 800bd58:	aa26      	add	r2, sp, #152	; 0x98
 800bd5a:	f001 fbba 	bl	800d4d2 <__ssprint_r>
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	f43f aa68 	beq.w	800b234 <_svfprintf_r+0x7b0>
 800bd64:	9b08      	ldr	r3, [sp, #32]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	f43f a88d 	beq.w	800ae86 <_svfprintf_r+0x402>
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	4648      	mov	r0, r9
 800bd70:	f000 ff5e 	bl	800cc30 <_free_r>
 800bd74:	f7ff b887 	b.w	800ae86 <_svfprintf_r+0x402>
 800bd78:	3210      	adds	r2, #16
 800bd7a:	2b07      	cmp	r3, #7
 800bd7c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800bd80:	6067      	str	r7, [r4, #4]
 800bd82:	dc02      	bgt.n	800bd8a <_svfprintf_r+0x1306>
 800bd84:	3408      	adds	r4, #8
 800bd86:	3d10      	subs	r5, #16
 800bd88:	e7d6      	b.n	800bd38 <_svfprintf_r+0x12b4>
 800bd8a:	4659      	mov	r1, fp
 800bd8c:	4648      	mov	r0, r9
 800bd8e:	aa26      	add	r2, sp, #152	; 0x98
 800bd90:	f001 fb9f 	bl	800d4d2 <__ssprint_r>
 800bd94:	2800      	cmp	r0, #0
 800bd96:	d1e5      	bne.n	800bd64 <_svfprintf_r+0x12e0>
 800bd98:	ac29      	add	r4, sp, #164	; 0xa4
 800bd9a:	e7f4      	b.n	800bd86 <_svfprintf_r+0x1302>
 800bd9c:	4648      	mov	r0, r9
 800bd9e:	9908      	ldr	r1, [sp, #32]
 800bda0:	f000 ff46 	bl	800cc30 <_free_r>
 800bda4:	f7ff ba5e 	b.w	800b264 <_svfprintf_r+0x7e0>
 800bda8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f43f a86b 	beq.w	800ae86 <_svfprintf_r+0x402>
 800bdb0:	4659      	mov	r1, fp
 800bdb2:	4648      	mov	r0, r9
 800bdb4:	aa26      	add	r2, sp, #152	; 0x98
 800bdb6:	f001 fb8c 	bl	800d4d2 <__ssprint_r>
 800bdba:	f7ff b864 	b.w	800ae86 <_svfprintf_r+0x402>
 800bdbe:	ea56 0207 	orrs.w	r2, r6, r7
 800bdc2:	f8cd 8020 	str.w	r8, [sp, #32]
 800bdc6:	f43f ab70 	beq.w	800b4aa <_svfprintf_r+0xa26>
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	f43f ac0d 	beq.w	800b5ea <_svfprintf_r+0xb66>
 800bdd0:	2b02      	cmp	r3, #2
 800bdd2:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800bdd6:	f43f ac55 	beq.w	800b684 <_svfprintf_r+0xc00>
 800bdda:	f006 0307 	and.w	r3, r6, #7
 800bdde:	08f6      	lsrs	r6, r6, #3
 800bde0:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800bde4:	08ff      	lsrs	r7, r7, #3
 800bde6:	3330      	adds	r3, #48	; 0x30
 800bde8:	ea56 0107 	orrs.w	r1, r6, r7
 800bdec:	4652      	mov	r2, sl
 800bdee:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 800bdf2:	d1f2      	bne.n	800bdda <_svfprintf_r+0x1356>
 800bdf4:	9908      	ldr	r1, [sp, #32]
 800bdf6:	07c9      	lsls	r1, r1, #31
 800bdf8:	d506      	bpl.n	800be08 <_svfprintf_r+0x1384>
 800bdfa:	2b30      	cmp	r3, #48	; 0x30
 800bdfc:	d004      	beq.n	800be08 <_svfprintf_r+0x1384>
 800bdfe:	2330      	movs	r3, #48	; 0x30
 800be00:	f80a 3c01 	strb.w	r3, [sl, #-1]
 800be04:	f1a2 0a02 	sub.w	sl, r2, #2
 800be08:	ab52      	add	r3, sp, #328	; 0x148
 800be0a:	eba3 030a 	sub.w	r3, r3, sl
 800be0e:	9f07      	ldr	r7, [sp, #28]
 800be10:	9307      	str	r3, [sp, #28]
 800be12:	2300      	movs	r3, #0
 800be14:	461e      	mov	r6, r3
 800be16:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be1a:	9308      	str	r3, [sp, #32]
 800be1c:	461d      	mov	r5, r3
 800be1e:	930c      	str	r3, [sp, #48]	; 0x30
 800be20:	f7ff b946 	b.w	800b0b0 <_svfprintf_r+0x62c>
 800be24:	0800eff0 	.word	0x0800eff0
 800be28:	0800efe0 	.word	0x0800efe0

0800be2c <sysconf>:
 800be2c:	2808      	cmp	r0, #8
 800be2e:	b508      	push	{r3, lr}
 800be30:	d006      	beq.n	800be40 <sysconf+0x14>
 800be32:	f7fe fa69 	bl	800a308 <__errno>
 800be36:	2316      	movs	r3, #22
 800be38:	6003      	str	r3, [r0, #0]
 800be3a:	f04f 30ff 	mov.w	r0, #4294967295
 800be3e:	bd08      	pop	{r3, pc}
 800be40:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800be44:	e7fb      	b.n	800be3e <sysconf+0x12>
	...

0800be48 <__register_exitproc>:
 800be48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be4c:	f8df a074 	ldr.w	sl, [pc, #116]	; 800bec4 <__register_exitproc+0x7c>
 800be50:	4606      	mov	r6, r0
 800be52:	f8da 0000 	ldr.w	r0, [sl]
 800be56:	4698      	mov	r8, r3
 800be58:	460f      	mov	r7, r1
 800be5a:	4691      	mov	r9, r2
 800be5c:	f000 ffae 	bl	800cdbc <__retarget_lock_acquire_recursive>
 800be60:	4b19      	ldr	r3, [pc, #100]	; (800bec8 <__register_exitproc+0x80>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800be68:	b91c      	cbnz	r4, 800be72 <__register_exitproc+0x2a>
 800be6a:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800be6e:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800be72:	6865      	ldr	r5, [r4, #4]
 800be74:	f8da 0000 	ldr.w	r0, [sl]
 800be78:	2d1f      	cmp	r5, #31
 800be7a:	dd05      	ble.n	800be88 <__register_exitproc+0x40>
 800be7c:	f000 ff9f 	bl	800cdbe <__retarget_lock_release_recursive>
 800be80:	f04f 30ff 	mov.w	r0, #4294967295
 800be84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be88:	b19e      	cbz	r6, 800beb2 <__register_exitproc+0x6a>
 800be8a:	2201      	movs	r2, #1
 800be8c:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800be90:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800be94:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800be98:	40aa      	lsls	r2, r5
 800be9a:	4313      	orrs	r3, r2
 800be9c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800bea0:	2e02      	cmp	r6, #2
 800bea2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800bea6:	bf02      	ittt	eq
 800bea8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800beac:	4313      	orreq	r3, r2
 800beae:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800beb2:	1c6b      	adds	r3, r5, #1
 800beb4:	3502      	adds	r5, #2
 800beb6:	6063      	str	r3, [r4, #4]
 800beb8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800bebc:	f000 ff7f 	bl	800cdbe <__retarget_lock_release_recursive>
 800bec0:	2000      	movs	r0, #0
 800bec2:	e7df      	b.n	800be84 <__register_exitproc+0x3c>
 800bec4:	20000848 	.word	0x20000848
 800bec8:	0800efa8 	.word	0x0800efa8

0800becc <register_fini>:
 800becc:	4b02      	ldr	r3, [pc, #8]	; (800bed8 <register_fini+0xc>)
 800bece:	b113      	cbz	r3, 800bed6 <register_fini+0xa>
 800bed0:	4802      	ldr	r0, [pc, #8]	; (800bedc <register_fini+0x10>)
 800bed2:	f7fe ba0e 	b.w	800a2f2 <atexit>
 800bed6:	4770      	bx	lr
 800bed8:	00000000 	.word	0x00000000
 800bedc:	0800cb61 	.word	0x0800cb61

0800bee0 <quorem>:
 800bee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee4:	6903      	ldr	r3, [r0, #16]
 800bee6:	690c      	ldr	r4, [r1, #16]
 800bee8:	4607      	mov	r7, r0
 800beea:	42a3      	cmp	r3, r4
 800beec:	f2c0 8082 	blt.w	800bff4 <quorem+0x114>
 800bef0:	3c01      	subs	r4, #1
 800bef2:	f100 0514 	add.w	r5, r0, #20
 800bef6:	f101 0814 	add.w	r8, r1, #20
 800befa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800befe:	9301      	str	r3, [sp, #4]
 800bf00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bf04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bf14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf18:	d331      	bcc.n	800bf7e <quorem+0x9e>
 800bf1a:	f04f 0e00 	mov.w	lr, #0
 800bf1e:	4640      	mov	r0, r8
 800bf20:	46ac      	mov	ip, r5
 800bf22:	46f2      	mov	sl, lr
 800bf24:	f850 2b04 	ldr.w	r2, [r0], #4
 800bf28:	b293      	uxth	r3, r2
 800bf2a:	fb06 e303 	mla	r3, r6, r3, lr
 800bf2e:	0c12      	lsrs	r2, r2, #16
 800bf30:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	fb06 e202 	mla	r2, r6, r2, lr
 800bf3a:	ebaa 0303 	sub.w	r3, sl, r3
 800bf3e:	f8dc a000 	ldr.w	sl, [ip]
 800bf42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bf46:	fa1f fa8a 	uxth.w	sl, sl
 800bf4a:	4453      	add	r3, sl
 800bf4c:	f8dc a000 	ldr.w	sl, [ip]
 800bf50:	b292      	uxth	r2, r2
 800bf52:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bf56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf60:	4581      	cmp	r9, r0
 800bf62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bf66:	f84c 3b04 	str.w	r3, [ip], #4
 800bf6a:	d2db      	bcs.n	800bf24 <quorem+0x44>
 800bf6c:	f855 300b 	ldr.w	r3, [r5, fp]
 800bf70:	b92b      	cbnz	r3, 800bf7e <quorem+0x9e>
 800bf72:	9b01      	ldr	r3, [sp, #4]
 800bf74:	3b04      	subs	r3, #4
 800bf76:	429d      	cmp	r5, r3
 800bf78:	461a      	mov	r2, r3
 800bf7a:	d32f      	bcc.n	800bfdc <quorem+0xfc>
 800bf7c:	613c      	str	r4, [r7, #16]
 800bf7e:	4638      	mov	r0, r7
 800bf80:	f001 f95c 	bl	800d23c <__mcmp>
 800bf84:	2800      	cmp	r0, #0
 800bf86:	db25      	blt.n	800bfd4 <quorem+0xf4>
 800bf88:	4628      	mov	r0, r5
 800bf8a:	f04f 0c00 	mov.w	ip, #0
 800bf8e:	3601      	adds	r6, #1
 800bf90:	f858 1b04 	ldr.w	r1, [r8], #4
 800bf94:	f8d0 e000 	ldr.w	lr, [r0]
 800bf98:	b28b      	uxth	r3, r1
 800bf9a:	ebac 0303 	sub.w	r3, ip, r3
 800bf9e:	fa1f f28e 	uxth.w	r2, lr
 800bfa2:	4413      	add	r3, r2
 800bfa4:	0c0a      	lsrs	r2, r1, #16
 800bfa6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bfaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfb4:	45c1      	cmp	r9, r8
 800bfb6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bfba:	f840 3b04 	str.w	r3, [r0], #4
 800bfbe:	d2e7      	bcs.n	800bf90 <quorem+0xb0>
 800bfc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfc8:	b922      	cbnz	r2, 800bfd4 <quorem+0xf4>
 800bfca:	3b04      	subs	r3, #4
 800bfcc:	429d      	cmp	r5, r3
 800bfce:	461a      	mov	r2, r3
 800bfd0:	d30a      	bcc.n	800bfe8 <quorem+0x108>
 800bfd2:	613c      	str	r4, [r7, #16]
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	b003      	add	sp, #12
 800bfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfdc:	6812      	ldr	r2, [r2, #0]
 800bfde:	3b04      	subs	r3, #4
 800bfe0:	2a00      	cmp	r2, #0
 800bfe2:	d1cb      	bne.n	800bf7c <quorem+0x9c>
 800bfe4:	3c01      	subs	r4, #1
 800bfe6:	e7c6      	b.n	800bf76 <quorem+0x96>
 800bfe8:	6812      	ldr	r2, [r2, #0]
 800bfea:	3b04      	subs	r3, #4
 800bfec:	2a00      	cmp	r2, #0
 800bfee:	d1f0      	bne.n	800bfd2 <quorem+0xf2>
 800bff0:	3c01      	subs	r4, #1
 800bff2:	e7eb      	b.n	800bfcc <quorem+0xec>
 800bff4:	2000      	movs	r0, #0
 800bff6:	e7ee      	b.n	800bfd6 <quorem+0xf6>

0800bff8 <_dtoa_r>:
 800bff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bffc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800bffe:	b097      	sub	sp, #92	; 0x5c
 800c000:	4681      	mov	r9, r0
 800c002:	4614      	mov	r4, r2
 800c004:	461d      	mov	r5, r3
 800c006:	4692      	mov	sl, r2
 800c008:	469b      	mov	fp, r3
 800c00a:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800c00c:	b149      	cbz	r1, 800c022 <_dtoa_r+0x2a>
 800c00e:	2301      	movs	r3, #1
 800c010:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c012:	4093      	lsls	r3, r2
 800c014:	608b      	str	r3, [r1, #8]
 800c016:	604a      	str	r2, [r1, #4]
 800c018:	f000 ff05 	bl	800ce26 <_Bfree>
 800c01c:	2300      	movs	r3, #0
 800c01e:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800c022:	1e2b      	subs	r3, r5, #0
 800c024:	bfad      	iteet	ge
 800c026:	2300      	movge	r3, #0
 800c028:	2201      	movlt	r2, #1
 800c02a:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c02e:	6033      	strge	r3, [r6, #0]
 800c030:	4b9f      	ldr	r3, [pc, #636]	; (800c2b0 <_dtoa_r+0x2b8>)
 800c032:	bfb8      	it	lt
 800c034:	6032      	strlt	r2, [r6, #0]
 800c036:	ea33 030b 	bics.w	r3, r3, fp
 800c03a:	d119      	bne.n	800c070 <_dtoa_r+0x78>
 800c03c:	f242 730f 	movw	r3, #9999	; 0x270f
 800c040:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c042:	6013      	str	r3, [r2, #0]
 800c044:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c048:	4323      	orrs	r3, r4
 800c04a:	f000 8574 	beq.w	800cb36 <_dtoa_r+0xb3e>
 800c04e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c050:	b90b      	cbnz	r3, 800c056 <_dtoa_r+0x5e>
 800c052:	4b98      	ldr	r3, [pc, #608]	; (800c2b4 <_dtoa_r+0x2bc>)
 800c054:	e020      	b.n	800c098 <_dtoa_r+0xa0>
 800c056:	4b97      	ldr	r3, [pc, #604]	; (800c2b4 <_dtoa_r+0x2bc>)
 800c058:	9304      	str	r3, [sp, #16]
 800c05a:	3303      	adds	r3, #3
 800c05c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c05e:	6013      	str	r3, [r2, #0]
 800c060:	9804      	ldr	r0, [sp, #16]
 800c062:	b017      	add	sp, #92	; 0x5c
 800c064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c068:	4b93      	ldr	r3, [pc, #588]	; (800c2b8 <_dtoa_r+0x2c0>)
 800c06a:	9304      	str	r3, [sp, #16]
 800c06c:	3308      	adds	r3, #8
 800c06e:	e7f5      	b.n	800c05c <_dtoa_r+0x64>
 800c070:	2200      	movs	r2, #0
 800c072:	2300      	movs	r3, #0
 800c074:	4650      	mov	r0, sl
 800c076:	4659      	mov	r1, fp
 800c078:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 800c07c:	f7f4 fc94 	bl	80009a8 <__aeabi_dcmpeq>
 800c080:	4607      	mov	r7, r0
 800c082:	b158      	cbz	r0, 800c09c <_dtoa_r+0xa4>
 800c084:	2301      	movs	r3, #1
 800c086:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c088:	6013      	str	r3, [r2, #0]
 800c08a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	f000 854f 	beq.w	800cb30 <_dtoa_r+0xb38>
 800c092:	488a      	ldr	r0, [pc, #552]	; (800c2bc <_dtoa_r+0x2c4>)
 800c094:	6018      	str	r0, [r3, #0]
 800c096:	1e43      	subs	r3, r0, #1
 800c098:	9304      	str	r3, [sp, #16]
 800c09a:	e7e1      	b.n	800c060 <_dtoa_r+0x68>
 800c09c:	ab14      	add	r3, sp, #80	; 0x50
 800c09e:	9301      	str	r3, [sp, #4]
 800c0a0:	ab15      	add	r3, sp, #84	; 0x54
 800c0a2:	9300      	str	r3, [sp, #0]
 800c0a4:	4648      	mov	r0, r9
 800c0a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c0aa:	f001 f96f 	bl	800d38c <__d2b>
 800c0ae:	f3cb 560a 	ubfx	r6, fp, #20, #11
 800c0b2:	9003      	str	r0, [sp, #12]
 800c0b4:	2e00      	cmp	r6, #0
 800c0b6:	d07c      	beq.n	800c1b2 <_dtoa_r+0x1ba>
 800c0b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c0bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0be:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800c0c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800c0ca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c0ce:	9713      	str	r7, [sp, #76]	; 0x4c
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	4b7b      	ldr	r3, [pc, #492]	; (800c2c0 <_dtoa_r+0x2c8>)
 800c0d4:	f7f4 f848 	bl	8000168 <__aeabi_dsub>
 800c0d8:	a36f      	add	r3, pc, #444	; (adr r3, 800c298 <_dtoa_r+0x2a0>)
 800c0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0de:	f7f4 f9fb 	bl	80004d8 <__aeabi_dmul>
 800c0e2:	a36f      	add	r3, pc, #444	; (adr r3, 800c2a0 <_dtoa_r+0x2a8>)
 800c0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e8:	f7f4 f840 	bl	800016c <__adddf3>
 800c0ec:	4604      	mov	r4, r0
 800c0ee:	4630      	mov	r0, r6
 800c0f0:	460d      	mov	r5, r1
 800c0f2:	f7f4 f987 	bl	8000404 <__aeabi_i2d>
 800c0f6:	a36c      	add	r3, pc, #432	; (adr r3, 800c2a8 <_dtoa_r+0x2b0>)
 800c0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fc:	f7f4 f9ec 	bl	80004d8 <__aeabi_dmul>
 800c100:	4602      	mov	r2, r0
 800c102:	460b      	mov	r3, r1
 800c104:	4620      	mov	r0, r4
 800c106:	4629      	mov	r1, r5
 800c108:	f7f4 f830 	bl	800016c <__adddf3>
 800c10c:	4604      	mov	r4, r0
 800c10e:	460d      	mov	r5, r1
 800c110:	f7f4 fc92 	bl	8000a38 <__aeabi_d2iz>
 800c114:	2200      	movs	r2, #0
 800c116:	4680      	mov	r8, r0
 800c118:	2300      	movs	r3, #0
 800c11a:	4620      	mov	r0, r4
 800c11c:	4629      	mov	r1, r5
 800c11e:	f7f4 fc4d 	bl	80009bc <__aeabi_dcmplt>
 800c122:	b148      	cbz	r0, 800c138 <_dtoa_r+0x140>
 800c124:	4640      	mov	r0, r8
 800c126:	f7f4 f96d 	bl	8000404 <__aeabi_i2d>
 800c12a:	4622      	mov	r2, r4
 800c12c:	462b      	mov	r3, r5
 800c12e:	f7f4 fc3b 	bl	80009a8 <__aeabi_dcmpeq>
 800c132:	b908      	cbnz	r0, 800c138 <_dtoa_r+0x140>
 800c134:	f108 38ff 	add.w	r8, r8, #4294967295
 800c138:	f1b8 0f16 	cmp.w	r8, #22
 800c13c:	d856      	bhi.n	800c1ec <_dtoa_r+0x1f4>
 800c13e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c142:	4b60      	ldr	r3, [pc, #384]	; (800c2c4 <_dtoa_r+0x2cc>)
 800c144:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14c:	f7f4 fc36 	bl	80009bc <__aeabi_dcmplt>
 800c150:	2800      	cmp	r0, #0
 800c152:	d04d      	beq.n	800c1f0 <_dtoa_r+0x1f8>
 800c154:	2300      	movs	r3, #0
 800c156:	f108 38ff 	add.w	r8, r8, #4294967295
 800c15a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c15c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c15e:	1b9e      	subs	r6, r3, r6
 800c160:	1e73      	subs	r3, r6, #1
 800c162:	9309      	str	r3, [sp, #36]	; 0x24
 800c164:	bf49      	itett	mi
 800c166:	f1c6 0301 	rsbmi	r3, r6, #1
 800c16a:	2300      	movpl	r3, #0
 800c16c:	9306      	strmi	r3, [sp, #24]
 800c16e:	2300      	movmi	r3, #0
 800c170:	bf54      	ite	pl
 800c172:	9306      	strpl	r3, [sp, #24]
 800c174:	9309      	strmi	r3, [sp, #36]	; 0x24
 800c176:	f1b8 0f00 	cmp.w	r8, #0
 800c17a:	db3b      	blt.n	800c1f4 <_dtoa_r+0x1fc>
 800c17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c17e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c182:	4443      	add	r3, r8
 800c184:	9309      	str	r3, [sp, #36]	; 0x24
 800c186:	2300      	movs	r3, #0
 800c188:	930a      	str	r3, [sp, #40]	; 0x28
 800c18a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c18c:	2b09      	cmp	r3, #9
 800c18e:	d86b      	bhi.n	800c268 <_dtoa_r+0x270>
 800c190:	2b05      	cmp	r3, #5
 800c192:	bfc4      	itt	gt
 800c194:	3b04      	subgt	r3, #4
 800c196:	9320      	strgt	r3, [sp, #128]	; 0x80
 800c198:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c19a:	bfc8      	it	gt
 800c19c:	2400      	movgt	r4, #0
 800c19e:	f1a3 0302 	sub.w	r3, r3, #2
 800c1a2:	bfd8      	it	le
 800c1a4:	2401      	movle	r4, #1
 800c1a6:	2b03      	cmp	r3, #3
 800c1a8:	d869      	bhi.n	800c27e <_dtoa_r+0x286>
 800c1aa:	e8df f003 	tbb	[pc, r3]
 800c1ae:	3a2d      	.short	0x3a2d
 800c1b0:	5b38      	.short	0x5b38
 800c1b2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
 800c1b6:	441e      	add	r6, r3
 800c1b8:	f206 4332 	addw	r3, r6, #1074	; 0x432
 800c1bc:	2b20      	cmp	r3, #32
 800c1be:	bfc3      	ittte	gt
 800c1c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c1c4:	f206 4012 	addwgt	r0, r6, #1042	; 0x412
 800c1c8:	fa0b f303 	lslgt.w	r3, fp, r3
 800c1cc:	f1c3 0320 	rsble	r3, r3, #32
 800c1d0:	bfc6      	itte	gt
 800c1d2:	fa24 f000 	lsrgt.w	r0, r4, r0
 800c1d6:	4318      	orrgt	r0, r3
 800c1d8:	fa04 f003 	lslle.w	r0, r4, r3
 800c1dc:	f7f4 f902 	bl	80003e4 <__aeabi_ui2d>
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c1e6:	3e01      	subs	r6, #1
 800c1e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800c1ea:	e771      	b.n	800c0d0 <_dtoa_r+0xd8>
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	e7b4      	b.n	800c15a <_dtoa_r+0x162>
 800c1f0:	900f      	str	r0, [sp, #60]	; 0x3c
 800c1f2:	e7b3      	b.n	800c15c <_dtoa_r+0x164>
 800c1f4:	9b06      	ldr	r3, [sp, #24]
 800c1f6:	eba3 0308 	sub.w	r3, r3, r8
 800c1fa:	9306      	str	r3, [sp, #24]
 800c1fc:	f1c8 0300 	rsb	r3, r8, #0
 800c200:	930a      	str	r3, [sp, #40]	; 0x28
 800c202:	2300      	movs	r3, #0
 800c204:	930e      	str	r3, [sp, #56]	; 0x38
 800c206:	e7c0      	b.n	800c18a <_dtoa_r+0x192>
 800c208:	2300      	movs	r3, #0
 800c20a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c20c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c20e:	2b00      	cmp	r3, #0
 800c210:	dc38      	bgt.n	800c284 <_dtoa_r+0x28c>
 800c212:	2301      	movs	r3, #1
 800c214:	461a      	mov	r2, r3
 800c216:	9308      	str	r3, [sp, #32]
 800c218:	9305      	str	r3, [sp, #20]
 800c21a:	9221      	str	r2, [sp, #132]	; 0x84
 800c21c:	e00b      	b.n	800c236 <_dtoa_r+0x23e>
 800c21e:	2301      	movs	r3, #1
 800c220:	e7f3      	b.n	800c20a <_dtoa_r+0x212>
 800c222:	2300      	movs	r3, #0
 800c224:	930b      	str	r3, [sp, #44]	; 0x2c
 800c226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c228:	4443      	add	r3, r8
 800c22a:	9308      	str	r3, [sp, #32]
 800c22c:	3301      	adds	r3, #1
 800c22e:	2b01      	cmp	r3, #1
 800c230:	9305      	str	r3, [sp, #20]
 800c232:	bfb8      	it	lt
 800c234:	2301      	movlt	r3, #1
 800c236:	2200      	movs	r2, #0
 800c238:	f8c9 2044 	str.w	r2, [r9, #68]	; 0x44
 800c23c:	2204      	movs	r2, #4
 800c23e:	f102 0014 	add.w	r0, r2, #20
 800c242:	4298      	cmp	r0, r3
 800c244:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 800c248:	d920      	bls.n	800c28c <_dtoa_r+0x294>
 800c24a:	4648      	mov	r0, r9
 800c24c:	f000 fdc6 	bl	800cddc <_Balloc>
 800c250:	9004      	str	r0, [sp, #16]
 800c252:	2800      	cmp	r0, #0
 800c254:	d13c      	bne.n	800c2d0 <_dtoa_r+0x2d8>
 800c256:	4602      	mov	r2, r0
 800c258:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c25c:	4b1a      	ldr	r3, [pc, #104]	; (800c2c8 <_dtoa_r+0x2d0>)
 800c25e:	481b      	ldr	r0, [pc, #108]	; (800c2cc <_dtoa_r+0x2d4>)
 800c260:	f001 f9b2 	bl	800d5c8 <__assert_func>
 800c264:	2301      	movs	r3, #1
 800c266:	e7dd      	b.n	800c224 <_dtoa_r+0x22c>
 800c268:	2401      	movs	r4, #1
 800c26a:	2300      	movs	r3, #0
 800c26c:	940b      	str	r4, [sp, #44]	; 0x2c
 800c26e:	9320      	str	r3, [sp, #128]	; 0x80
 800c270:	f04f 33ff 	mov.w	r3, #4294967295
 800c274:	2200      	movs	r2, #0
 800c276:	9308      	str	r3, [sp, #32]
 800c278:	9305      	str	r3, [sp, #20]
 800c27a:	2312      	movs	r3, #18
 800c27c:	e7cd      	b.n	800c21a <_dtoa_r+0x222>
 800c27e:	2301      	movs	r3, #1
 800c280:	930b      	str	r3, [sp, #44]	; 0x2c
 800c282:	e7f5      	b.n	800c270 <_dtoa_r+0x278>
 800c284:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c286:	9308      	str	r3, [sp, #32]
 800c288:	9305      	str	r3, [sp, #20]
 800c28a:	e7d4      	b.n	800c236 <_dtoa_r+0x23e>
 800c28c:	3101      	adds	r1, #1
 800c28e:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800c292:	0052      	lsls	r2, r2, #1
 800c294:	e7d3      	b.n	800c23e <_dtoa_r+0x246>
 800c296:	bf00      	nop
 800c298:	636f4361 	.word	0x636f4361
 800c29c:	3fd287a7 	.word	0x3fd287a7
 800c2a0:	8b60c8b3 	.word	0x8b60c8b3
 800c2a4:	3fc68a28 	.word	0x3fc68a28
 800c2a8:	509f79fb 	.word	0x509f79fb
 800c2ac:	3fd34413 	.word	0x3fd34413
 800c2b0:	7ff00000 	.word	0x7ff00000
 800c2b4:	0800f101 	.word	0x0800f101
 800c2b8:	0800f105 	.word	0x0800f105
 800c2bc:	0800efdf 	.word	0x0800efdf
 800c2c0:	3ff80000 	.word	0x3ff80000
 800c2c4:	0800f200 	.word	0x0800f200
 800c2c8:	0800f10e 	.word	0x0800f10e
 800c2cc:	0800f11f 	.word	0x0800f11f
 800c2d0:	9b04      	ldr	r3, [sp, #16]
 800c2d2:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800c2d6:	9b05      	ldr	r3, [sp, #20]
 800c2d8:	2b0e      	cmp	r3, #14
 800c2da:	f200 80a1 	bhi.w	800c420 <_dtoa_r+0x428>
 800c2de:	2c00      	cmp	r4, #0
 800c2e0:	f000 809e 	beq.w	800c420 <_dtoa_r+0x428>
 800c2e4:	f1b8 0f00 	cmp.w	r8, #0
 800c2e8:	dd34      	ble.n	800c354 <_dtoa_r+0x35c>
 800c2ea:	4a96      	ldr	r2, [pc, #600]	; (800c544 <_dtoa_r+0x54c>)
 800c2ec:	f008 030f 	and.w	r3, r8, #15
 800c2f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c2f4:	f418 7f80 	tst.w	r8, #256	; 0x100
 800c2f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c2fc:	ea4f 1528 	mov.w	r5, r8, asr #4
 800c300:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c304:	d016      	beq.n	800c334 <_dtoa_r+0x33c>
 800c306:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c30a:	4b8f      	ldr	r3, [pc, #572]	; (800c548 <_dtoa_r+0x550>)
 800c30c:	2603      	movs	r6, #3
 800c30e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c312:	f7f4 fa0b 	bl	800072c <__aeabi_ddiv>
 800c316:	4682      	mov	sl, r0
 800c318:	468b      	mov	fp, r1
 800c31a:	f005 050f 	and.w	r5, r5, #15
 800c31e:	4c8a      	ldr	r4, [pc, #552]	; (800c548 <_dtoa_r+0x550>)
 800c320:	b955      	cbnz	r5, 800c338 <_dtoa_r+0x340>
 800c322:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c326:	4650      	mov	r0, sl
 800c328:	4659      	mov	r1, fp
 800c32a:	f7f4 f9ff 	bl	800072c <__aeabi_ddiv>
 800c32e:	4682      	mov	sl, r0
 800c330:	468b      	mov	fp, r1
 800c332:	e028      	b.n	800c386 <_dtoa_r+0x38e>
 800c334:	2602      	movs	r6, #2
 800c336:	e7f2      	b.n	800c31e <_dtoa_r+0x326>
 800c338:	07e9      	lsls	r1, r5, #31
 800c33a:	d508      	bpl.n	800c34e <_dtoa_r+0x356>
 800c33c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c340:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c344:	f7f4 f8c8 	bl	80004d8 <__aeabi_dmul>
 800c348:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c34c:	3601      	adds	r6, #1
 800c34e:	106d      	asrs	r5, r5, #1
 800c350:	3408      	adds	r4, #8
 800c352:	e7e5      	b.n	800c320 <_dtoa_r+0x328>
 800c354:	f000 809e 	beq.w	800c494 <_dtoa_r+0x49c>
 800c358:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c35c:	f1c8 0400 	rsb	r4, r8, #0
 800c360:	4b78      	ldr	r3, [pc, #480]	; (800c544 <_dtoa_r+0x54c>)
 800c362:	f004 020f 	and.w	r2, r4, #15
 800c366:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36e:	f7f4 f8b3 	bl	80004d8 <__aeabi_dmul>
 800c372:	2602      	movs	r6, #2
 800c374:	4682      	mov	sl, r0
 800c376:	468b      	mov	fp, r1
 800c378:	2300      	movs	r3, #0
 800c37a:	4d73      	ldr	r5, [pc, #460]	; (800c548 <_dtoa_r+0x550>)
 800c37c:	1124      	asrs	r4, r4, #4
 800c37e:	2c00      	cmp	r4, #0
 800c380:	d17d      	bne.n	800c47e <_dtoa_r+0x486>
 800c382:	2b00      	cmp	r3, #0
 800c384:	d1d3      	bne.n	800c32e <_dtoa_r+0x336>
 800c386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f000 8085 	beq.w	800c498 <_dtoa_r+0x4a0>
 800c38e:	2200      	movs	r2, #0
 800c390:	4650      	mov	r0, sl
 800c392:	4659      	mov	r1, fp
 800c394:	4b6d      	ldr	r3, [pc, #436]	; (800c54c <_dtoa_r+0x554>)
 800c396:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 800c39a:	f7f4 fb0f 	bl	80009bc <__aeabi_dcmplt>
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d07a      	beq.n	800c498 <_dtoa_r+0x4a0>
 800c3a2:	9b05      	ldr	r3, [sp, #20]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d077      	beq.n	800c498 <_dtoa_r+0x4a0>
 800c3a8:	9b08      	ldr	r3, [sp, #32]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	dd36      	ble.n	800c41c <_dtoa_r+0x424>
 800c3ae:	4650      	mov	r0, sl
 800c3b0:	4659      	mov	r1, fp
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	4b66      	ldr	r3, [pc, #408]	; (800c550 <_dtoa_r+0x558>)
 800c3b6:	f7f4 f88f 	bl	80004d8 <__aeabi_dmul>
 800c3ba:	4682      	mov	sl, r0
 800c3bc:	468b      	mov	fp, r1
 800c3be:	9c08      	ldr	r4, [sp, #32]
 800c3c0:	f108 35ff 	add.w	r5, r8, #4294967295
 800c3c4:	3601      	adds	r6, #1
 800c3c6:	4630      	mov	r0, r6
 800c3c8:	f7f4 f81c 	bl	8000404 <__aeabi_i2d>
 800c3cc:	4652      	mov	r2, sl
 800c3ce:	465b      	mov	r3, fp
 800c3d0:	f7f4 f882 	bl	80004d8 <__aeabi_dmul>
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	4b5f      	ldr	r3, [pc, #380]	; (800c554 <_dtoa_r+0x55c>)
 800c3d8:	f7f3 fec8 	bl	800016c <__adddf3>
 800c3dc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c3e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c3e4:	9611      	str	r6, [sp, #68]	; 0x44
 800c3e6:	2c00      	cmp	r4, #0
 800c3e8:	d159      	bne.n	800c49e <_dtoa_r+0x4a6>
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	4650      	mov	r0, sl
 800c3ee:	4659      	mov	r1, fp
 800c3f0:	4b59      	ldr	r3, [pc, #356]	; (800c558 <_dtoa_r+0x560>)
 800c3f2:	f7f3 feb9 	bl	8000168 <__aeabi_dsub>
 800c3f6:	4633      	mov	r3, r6
 800c3f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c3fa:	4682      	mov	sl, r0
 800c3fc:	468b      	mov	fp, r1
 800c3fe:	f7f4 fafb 	bl	80009f8 <__aeabi_dcmpgt>
 800c402:	2800      	cmp	r0, #0
 800c404:	f040 828b 	bne.w	800c91e <_dtoa_r+0x926>
 800c408:	4650      	mov	r0, sl
 800c40a:	4659      	mov	r1, fp
 800c40c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c40e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c412:	f7f4 fad3 	bl	80009bc <__aeabi_dcmplt>
 800c416:	2800      	cmp	r0, #0
 800c418:	f040 827f 	bne.w	800c91a <_dtoa_r+0x922>
 800c41c:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 800c420:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c422:	2b00      	cmp	r3, #0
 800c424:	f2c0 814d 	blt.w	800c6c2 <_dtoa_r+0x6ca>
 800c428:	f1b8 0f0e 	cmp.w	r8, #14
 800c42c:	f300 8149 	bgt.w	800c6c2 <_dtoa_r+0x6ca>
 800c430:	4b44      	ldr	r3, [pc, #272]	; (800c544 <_dtoa_r+0x54c>)
 800c432:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c436:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c43a:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c43e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c440:	2b00      	cmp	r3, #0
 800c442:	f280 80d6 	bge.w	800c5f2 <_dtoa_r+0x5fa>
 800c446:	9b05      	ldr	r3, [sp, #20]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	f300 80d2 	bgt.w	800c5f2 <_dtoa_r+0x5fa>
 800c44e:	f040 8263 	bne.w	800c918 <_dtoa_r+0x920>
 800c452:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c456:	2200      	movs	r2, #0
 800c458:	4b3f      	ldr	r3, [pc, #252]	; (800c558 <_dtoa_r+0x560>)
 800c45a:	f7f4 f83d 	bl	80004d8 <__aeabi_dmul>
 800c45e:	4652      	mov	r2, sl
 800c460:	465b      	mov	r3, fp
 800c462:	f7f4 fabf 	bl	80009e4 <__aeabi_dcmpge>
 800c466:	9c05      	ldr	r4, [sp, #20]
 800c468:	4625      	mov	r5, r4
 800c46a:	2800      	cmp	r0, #0
 800c46c:	f040 823c 	bne.w	800c8e8 <_dtoa_r+0x8f0>
 800c470:	2331      	movs	r3, #49	; 0x31
 800c472:	9e04      	ldr	r6, [sp, #16]
 800c474:	f108 0801 	add.w	r8, r8, #1
 800c478:	f806 3b01 	strb.w	r3, [r6], #1
 800c47c:	e238      	b.n	800c8f0 <_dtoa_r+0x8f8>
 800c47e:	07e2      	lsls	r2, r4, #31
 800c480:	d505      	bpl.n	800c48e <_dtoa_r+0x496>
 800c482:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c486:	f7f4 f827 	bl	80004d8 <__aeabi_dmul>
 800c48a:	2301      	movs	r3, #1
 800c48c:	3601      	adds	r6, #1
 800c48e:	1064      	asrs	r4, r4, #1
 800c490:	3508      	adds	r5, #8
 800c492:	e774      	b.n	800c37e <_dtoa_r+0x386>
 800c494:	2602      	movs	r6, #2
 800c496:	e776      	b.n	800c386 <_dtoa_r+0x38e>
 800c498:	4645      	mov	r5, r8
 800c49a:	9c05      	ldr	r4, [sp, #20]
 800c49c:	e793      	b.n	800c3c6 <_dtoa_r+0x3ce>
 800c49e:	9904      	ldr	r1, [sp, #16]
 800c4a0:	4b28      	ldr	r3, [pc, #160]	; (800c544 <_dtoa_r+0x54c>)
 800c4a2:	4421      	add	r1, r4
 800c4a4:	9112      	str	r1, [sp, #72]	; 0x48
 800c4a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c4a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c4ac:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c4b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c4b4:	2900      	cmp	r1, #0
 800c4b6:	d053      	beq.n	800c560 <_dtoa_r+0x568>
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	4928      	ldr	r1, [pc, #160]	; (800c55c <_dtoa_r+0x564>)
 800c4bc:	f7f4 f936 	bl	800072c <__aeabi_ddiv>
 800c4c0:	4632      	mov	r2, r6
 800c4c2:	463b      	mov	r3, r7
 800c4c4:	f7f3 fe50 	bl	8000168 <__aeabi_dsub>
 800c4c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c4cc:	9e04      	ldr	r6, [sp, #16]
 800c4ce:	4659      	mov	r1, fp
 800c4d0:	4650      	mov	r0, sl
 800c4d2:	f7f4 fab1 	bl	8000a38 <__aeabi_d2iz>
 800c4d6:	4604      	mov	r4, r0
 800c4d8:	f7f3 ff94 	bl	8000404 <__aeabi_i2d>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	460b      	mov	r3, r1
 800c4e0:	4650      	mov	r0, sl
 800c4e2:	4659      	mov	r1, fp
 800c4e4:	f7f3 fe40 	bl	8000168 <__aeabi_dsub>
 800c4e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c4ec:	3430      	adds	r4, #48	; 0x30
 800c4ee:	f806 4b01 	strb.w	r4, [r6], #1
 800c4f2:	4682      	mov	sl, r0
 800c4f4:	468b      	mov	fp, r1
 800c4f6:	f7f4 fa61 	bl	80009bc <__aeabi_dcmplt>
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	d171      	bne.n	800c5e2 <_dtoa_r+0x5ea>
 800c4fe:	4652      	mov	r2, sl
 800c500:	465b      	mov	r3, fp
 800c502:	2000      	movs	r0, #0
 800c504:	4911      	ldr	r1, [pc, #68]	; (800c54c <_dtoa_r+0x554>)
 800c506:	f7f3 fe2f 	bl	8000168 <__aeabi_dsub>
 800c50a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c50e:	f7f4 fa55 	bl	80009bc <__aeabi_dcmplt>
 800c512:	2800      	cmp	r0, #0
 800c514:	f040 80b7 	bne.w	800c686 <_dtoa_r+0x68e>
 800c518:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c51a:	429e      	cmp	r6, r3
 800c51c:	f43f af7e 	beq.w	800c41c <_dtoa_r+0x424>
 800c520:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c524:	2200      	movs	r2, #0
 800c526:	4b0a      	ldr	r3, [pc, #40]	; (800c550 <_dtoa_r+0x558>)
 800c528:	f7f3 ffd6 	bl	80004d8 <__aeabi_dmul>
 800c52c:	2200      	movs	r2, #0
 800c52e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c532:	4b07      	ldr	r3, [pc, #28]	; (800c550 <_dtoa_r+0x558>)
 800c534:	4650      	mov	r0, sl
 800c536:	4659      	mov	r1, fp
 800c538:	f7f3 ffce 	bl	80004d8 <__aeabi_dmul>
 800c53c:	4682      	mov	sl, r0
 800c53e:	468b      	mov	fp, r1
 800c540:	e7c5      	b.n	800c4ce <_dtoa_r+0x4d6>
 800c542:	bf00      	nop
 800c544:	0800f200 	.word	0x0800f200
 800c548:	0800f1d8 	.word	0x0800f1d8
 800c54c:	3ff00000 	.word	0x3ff00000
 800c550:	40240000 	.word	0x40240000
 800c554:	401c0000 	.word	0x401c0000
 800c558:	40140000 	.word	0x40140000
 800c55c:	3fe00000 	.word	0x3fe00000
 800c560:	4630      	mov	r0, r6
 800c562:	4639      	mov	r1, r7
 800c564:	f7f3 ffb8 	bl	80004d8 <__aeabi_dmul>
 800c568:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c56c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800c56e:	9e04      	ldr	r6, [sp, #16]
 800c570:	4659      	mov	r1, fp
 800c572:	4650      	mov	r0, sl
 800c574:	f7f4 fa60 	bl	8000a38 <__aeabi_d2iz>
 800c578:	4604      	mov	r4, r0
 800c57a:	f7f3 ff43 	bl	8000404 <__aeabi_i2d>
 800c57e:	4602      	mov	r2, r0
 800c580:	460b      	mov	r3, r1
 800c582:	4650      	mov	r0, sl
 800c584:	4659      	mov	r1, fp
 800c586:	f7f3 fdef 	bl	8000168 <__aeabi_dsub>
 800c58a:	3430      	adds	r4, #48	; 0x30
 800c58c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c58e:	f806 4b01 	strb.w	r4, [r6], #1
 800c592:	429e      	cmp	r6, r3
 800c594:	4682      	mov	sl, r0
 800c596:	468b      	mov	fp, r1
 800c598:	f04f 0200 	mov.w	r2, #0
 800c59c:	d123      	bne.n	800c5e6 <_dtoa_r+0x5ee>
 800c59e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c5a2:	4baf      	ldr	r3, [pc, #700]	; (800c860 <_dtoa_r+0x868>)
 800c5a4:	f7f3 fde2 	bl	800016c <__adddf3>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	4650      	mov	r0, sl
 800c5ae:	4659      	mov	r1, fp
 800c5b0:	f7f4 fa22 	bl	80009f8 <__aeabi_dcmpgt>
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	d166      	bne.n	800c686 <_dtoa_r+0x68e>
 800c5b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c5bc:	2000      	movs	r0, #0
 800c5be:	49a8      	ldr	r1, [pc, #672]	; (800c860 <_dtoa_r+0x868>)
 800c5c0:	f7f3 fdd2 	bl	8000168 <__aeabi_dsub>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	4650      	mov	r0, sl
 800c5ca:	4659      	mov	r1, fp
 800c5cc:	f7f4 f9f6 	bl	80009bc <__aeabi_dcmplt>
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	f43f af23 	beq.w	800c41c <_dtoa_r+0x424>
 800c5d6:	463e      	mov	r6, r7
 800c5d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c5dc:	3f01      	subs	r7, #1
 800c5de:	2b30      	cmp	r3, #48	; 0x30
 800c5e0:	d0f9      	beq.n	800c5d6 <_dtoa_r+0x5de>
 800c5e2:	46a8      	mov	r8, r5
 800c5e4:	e03e      	b.n	800c664 <_dtoa_r+0x66c>
 800c5e6:	4b9f      	ldr	r3, [pc, #636]	; (800c864 <_dtoa_r+0x86c>)
 800c5e8:	f7f3 ff76 	bl	80004d8 <__aeabi_dmul>
 800c5ec:	4682      	mov	sl, r0
 800c5ee:	468b      	mov	fp, r1
 800c5f0:	e7be      	b.n	800c570 <_dtoa_r+0x578>
 800c5f2:	4654      	mov	r4, sl
 800c5f4:	f04f 0a00 	mov.w	sl, #0
 800c5f8:	465d      	mov	r5, fp
 800c5fa:	9e04      	ldr	r6, [sp, #16]
 800c5fc:	f8df b264 	ldr.w	fp, [pc, #612]	; 800c864 <_dtoa_r+0x86c>
 800c600:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c604:	4620      	mov	r0, r4
 800c606:	4629      	mov	r1, r5
 800c608:	f7f4 f890 	bl	800072c <__aeabi_ddiv>
 800c60c:	f7f4 fa14 	bl	8000a38 <__aeabi_d2iz>
 800c610:	4607      	mov	r7, r0
 800c612:	f7f3 fef7 	bl	8000404 <__aeabi_i2d>
 800c616:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c61a:	f7f3 ff5d 	bl	80004d8 <__aeabi_dmul>
 800c61e:	4602      	mov	r2, r0
 800c620:	460b      	mov	r3, r1
 800c622:	4620      	mov	r0, r4
 800c624:	4629      	mov	r1, r5
 800c626:	f7f3 fd9f 	bl	8000168 <__aeabi_dsub>
 800c62a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800c62e:	f806 4b01 	strb.w	r4, [r6], #1
 800c632:	9c04      	ldr	r4, [sp, #16]
 800c634:	9d05      	ldr	r5, [sp, #20]
 800c636:	1b34      	subs	r4, r6, r4
 800c638:	42a5      	cmp	r5, r4
 800c63a:	4602      	mov	r2, r0
 800c63c:	460b      	mov	r3, r1
 800c63e:	d133      	bne.n	800c6a8 <_dtoa_r+0x6b0>
 800c640:	f7f3 fd94 	bl	800016c <__adddf3>
 800c644:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c648:	4604      	mov	r4, r0
 800c64a:	460d      	mov	r5, r1
 800c64c:	f7f4 f9d4 	bl	80009f8 <__aeabi_dcmpgt>
 800c650:	b9c0      	cbnz	r0, 800c684 <_dtoa_r+0x68c>
 800c652:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c656:	4620      	mov	r0, r4
 800c658:	4629      	mov	r1, r5
 800c65a:	f7f4 f9a5 	bl	80009a8 <__aeabi_dcmpeq>
 800c65e:	b108      	cbz	r0, 800c664 <_dtoa_r+0x66c>
 800c660:	07fb      	lsls	r3, r7, #31
 800c662:	d40f      	bmi.n	800c684 <_dtoa_r+0x68c>
 800c664:	4648      	mov	r0, r9
 800c666:	9903      	ldr	r1, [sp, #12]
 800c668:	f000 fbdd 	bl	800ce26 <_Bfree>
 800c66c:	2300      	movs	r3, #0
 800c66e:	7033      	strb	r3, [r6, #0]
 800c670:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c672:	f108 0001 	add.w	r0, r8, #1
 800c676:	6018      	str	r0, [r3, #0]
 800c678:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f43f acf0 	beq.w	800c060 <_dtoa_r+0x68>
 800c680:	601e      	str	r6, [r3, #0]
 800c682:	e4ed      	b.n	800c060 <_dtoa_r+0x68>
 800c684:	4645      	mov	r5, r8
 800c686:	4633      	mov	r3, r6
 800c688:	461e      	mov	r6, r3
 800c68a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c68e:	2a39      	cmp	r2, #57	; 0x39
 800c690:	d106      	bne.n	800c6a0 <_dtoa_r+0x6a8>
 800c692:	9a04      	ldr	r2, [sp, #16]
 800c694:	429a      	cmp	r2, r3
 800c696:	d1f7      	bne.n	800c688 <_dtoa_r+0x690>
 800c698:	2230      	movs	r2, #48	; 0x30
 800c69a:	9904      	ldr	r1, [sp, #16]
 800c69c:	3501      	adds	r5, #1
 800c69e:	700a      	strb	r2, [r1, #0]
 800c6a0:	781a      	ldrb	r2, [r3, #0]
 800c6a2:	3201      	adds	r2, #1
 800c6a4:	701a      	strb	r2, [r3, #0]
 800c6a6:	e79c      	b.n	800c5e2 <_dtoa_r+0x5ea>
 800c6a8:	4652      	mov	r2, sl
 800c6aa:	465b      	mov	r3, fp
 800c6ac:	f7f3 ff14 	bl	80004d8 <__aeabi_dmul>
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	4604      	mov	r4, r0
 800c6b6:	460d      	mov	r5, r1
 800c6b8:	f7f4 f976 	bl	80009a8 <__aeabi_dcmpeq>
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	d09f      	beq.n	800c600 <_dtoa_r+0x608>
 800c6c0:	e7d0      	b.n	800c664 <_dtoa_r+0x66c>
 800c6c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c6c4:	2a00      	cmp	r2, #0
 800c6c6:	f000 80cf 	beq.w	800c868 <_dtoa_r+0x870>
 800c6ca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c6cc:	2a01      	cmp	r2, #1
 800c6ce:	f300 80ad 	bgt.w	800c82c <_dtoa_r+0x834>
 800c6d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c6d4:	2a00      	cmp	r2, #0
 800c6d6:	f000 80a5 	beq.w	800c824 <_dtoa_r+0x82c>
 800c6da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c6de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c6e0:	9e06      	ldr	r6, [sp, #24]
 800c6e2:	9a06      	ldr	r2, [sp, #24]
 800c6e4:	2101      	movs	r1, #1
 800c6e6:	441a      	add	r2, r3
 800c6e8:	9206      	str	r2, [sp, #24]
 800c6ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6ec:	4648      	mov	r0, r9
 800c6ee:	441a      	add	r2, r3
 800c6f0:	9209      	str	r2, [sp, #36]	; 0x24
 800c6f2:	f000 fc35 	bl	800cf60 <__i2b>
 800c6f6:	4605      	mov	r5, r0
 800c6f8:	2e00      	cmp	r6, #0
 800c6fa:	dd0c      	ble.n	800c716 <_dtoa_r+0x71e>
 800c6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	dd09      	ble.n	800c716 <_dtoa_r+0x71e>
 800c702:	42b3      	cmp	r3, r6
 800c704:	bfa8      	it	ge
 800c706:	4633      	movge	r3, r6
 800c708:	9a06      	ldr	r2, [sp, #24]
 800c70a:	1af6      	subs	r6, r6, r3
 800c70c:	1ad2      	subs	r2, r2, r3
 800c70e:	9206      	str	r2, [sp, #24]
 800c710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c712:	1ad3      	subs	r3, r2, r3
 800c714:	9309      	str	r3, [sp, #36]	; 0x24
 800c716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c718:	b1f3      	cbz	r3, 800c758 <_dtoa_r+0x760>
 800c71a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f000 80a7 	beq.w	800c870 <_dtoa_r+0x878>
 800c722:	2c00      	cmp	r4, #0
 800c724:	dd10      	ble.n	800c748 <_dtoa_r+0x750>
 800c726:	4629      	mov	r1, r5
 800c728:	4622      	mov	r2, r4
 800c72a:	4648      	mov	r0, r9
 800c72c:	f000 fcd6 	bl	800d0dc <__pow5mult>
 800c730:	9a03      	ldr	r2, [sp, #12]
 800c732:	4601      	mov	r1, r0
 800c734:	4605      	mov	r5, r0
 800c736:	4648      	mov	r0, r9
 800c738:	f000 fc28 	bl	800cf8c <__multiply>
 800c73c:	4607      	mov	r7, r0
 800c73e:	9903      	ldr	r1, [sp, #12]
 800c740:	4648      	mov	r0, r9
 800c742:	f000 fb70 	bl	800ce26 <_Bfree>
 800c746:	9703      	str	r7, [sp, #12]
 800c748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c74a:	1b1a      	subs	r2, r3, r4
 800c74c:	d004      	beq.n	800c758 <_dtoa_r+0x760>
 800c74e:	4648      	mov	r0, r9
 800c750:	9903      	ldr	r1, [sp, #12]
 800c752:	f000 fcc3 	bl	800d0dc <__pow5mult>
 800c756:	9003      	str	r0, [sp, #12]
 800c758:	2101      	movs	r1, #1
 800c75a:	4648      	mov	r0, r9
 800c75c:	f000 fc00 	bl	800cf60 <__i2b>
 800c760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c762:	4604      	mov	r4, r0
 800c764:	2b00      	cmp	r3, #0
 800c766:	f340 8085 	ble.w	800c874 <_dtoa_r+0x87c>
 800c76a:	461a      	mov	r2, r3
 800c76c:	4601      	mov	r1, r0
 800c76e:	4648      	mov	r0, r9
 800c770:	f000 fcb4 	bl	800d0dc <__pow5mult>
 800c774:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c776:	4604      	mov	r4, r0
 800c778:	2b01      	cmp	r3, #1
 800c77a:	dd7e      	ble.n	800c87a <_dtoa_r+0x882>
 800c77c:	2700      	movs	r7, #0
 800c77e:	6923      	ldr	r3, [r4, #16]
 800c780:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c784:	6918      	ldr	r0, [r3, #16]
 800c786:	f000 fb9d 	bl	800cec4 <__hi0bits>
 800c78a:	f1c0 0020 	rsb	r0, r0, #32
 800c78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c790:	4418      	add	r0, r3
 800c792:	f010 001f 	ands.w	r0, r0, #31
 800c796:	f000 808e 	beq.w	800c8b6 <_dtoa_r+0x8be>
 800c79a:	f1c0 0320 	rsb	r3, r0, #32
 800c79e:	2b04      	cmp	r3, #4
 800c7a0:	f340 8087 	ble.w	800c8b2 <_dtoa_r+0x8ba>
 800c7a4:	f1c0 001c 	rsb	r0, r0, #28
 800c7a8:	9b06      	ldr	r3, [sp, #24]
 800c7aa:	4406      	add	r6, r0
 800c7ac:	4403      	add	r3, r0
 800c7ae:	9306      	str	r3, [sp, #24]
 800c7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7b2:	4403      	add	r3, r0
 800c7b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7b6:	9b06      	ldr	r3, [sp, #24]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	dd05      	ble.n	800c7c8 <_dtoa_r+0x7d0>
 800c7bc:	461a      	mov	r2, r3
 800c7be:	4648      	mov	r0, r9
 800c7c0:	9903      	ldr	r1, [sp, #12]
 800c7c2:	f000 fccb 	bl	800d15c <__lshift>
 800c7c6:	9003      	str	r0, [sp, #12]
 800c7c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	dd05      	ble.n	800c7da <_dtoa_r+0x7e2>
 800c7ce:	4621      	mov	r1, r4
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	4648      	mov	r0, r9
 800c7d4:	f000 fcc2 	bl	800d15c <__lshift>
 800c7d8:	4604      	mov	r4, r0
 800c7da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d06c      	beq.n	800c8ba <_dtoa_r+0x8c2>
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	9803      	ldr	r0, [sp, #12]
 800c7e4:	f000 fd2a 	bl	800d23c <__mcmp>
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	da66      	bge.n	800c8ba <_dtoa_r+0x8c2>
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	220a      	movs	r2, #10
 800c7f0:	4648      	mov	r0, r9
 800c7f2:	9903      	ldr	r1, [sp, #12]
 800c7f4:	f000 fb20 	bl	800ce38 <__multadd>
 800c7f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7fa:	f108 38ff 	add.w	r8, r8, #4294967295
 800c7fe:	9003      	str	r0, [sp, #12]
 800c800:	2b00      	cmp	r3, #0
 800c802:	f000 819f 	beq.w	800cb44 <_dtoa_r+0xb4c>
 800c806:	2300      	movs	r3, #0
 800c808:	4629      	mov	r1, r5
 800c80a:	220a      	movs	r2, #10
 800c80c:	4648      	mov	r0, r9
 800c80e:	f000 fb13 	bl	800ce38 <__multadd>
 800c812:	9b08      	ldr	r3, [sp, #32]
 800c814:	4605      	mov	r5, r0
 800c816:	2b00      	cmp	r3, #0
 800c818:	f300 808a 	bgt.w	800c930 <_dtoa_r+0x938>
 800c81c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c81e:	2b02      	cmp	r3, #2
 800c820:	dc53      	bgt.n	800c8ca <_dtoa_r+0x8d2>
 800c822:	e085      	b.n	800c930 <_dtoa_r+0x938>
 800c824:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c826:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c82a:	e758      	b.n	800c6de <_dtoa_r+0x6e6>
 800c82c:	9b05      	ldr	r3, [sp, #20]
 800c82e:	1e5c      	subs	r4, r3, #1
 800c830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c832:	42a3      	cmp	r3, r4
 800c834:	bfb7      	itett	lt
 800c836:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c838:	1b1c      	subge	r4, r3, r4
 800c83a:	1ae2      	sublt	r2, r4, r3
 800c83c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c83e:	bfbe      	ittt	lt
 800c840:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c842:	189b      	addlt	r3, r3, r2
 800c844:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c846:	9b05      	ldr	r3, [sp, #20]
 800c848:	bfb8      	it	lt
 800c84a:	2400      	movlt	r4, #0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	bfb7      	itett	lt
 800c850:	e9dd 2305 	ldrdlt	r2, r3, [sp, #20]
 800c854:	e9dd 3605 	ldrdge	r3, r6, [sp, #20]
 800c858:	1a9e      	sublt	r6, r3, r2
 800c85a:	2300      	movlt	r3, #0
 800c85c:	e741      	b.n	800c6e2 <_dtoa_r+0x6ea>
 800c85e:	bf00      	nop
 800c860:	3fe00000 	.word	0x3fe00000
 800c864:	40240000 	.word	0x40240000
 800c868:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c86a:	9e06      	ldr	r6, [sp, #24]
 800c86c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c86e:	e743      	b.n	800c6f8 <_dtoa_r+0x700>
 800c870:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c872:	e76c      	b.n	800c74e <_dtoa_r+0x756>
 800c874:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c876:	2b01      	cmp	r3, #1
 800c878:	dc17      	bgt.n	800c8aa <_dtoa_r+0x8b2>
 800c87a:	f1ba 0f00 	cmp.w	sl, #0
 800c87e:	d114      	bne.n	800c8aa <_dtoa_r+0x8b2>
 800c880:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c884:	b99b      	cbnz	r3, 800c8ae <_dtoa_r+0x8b6>
 800c886:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800c88a:	0d3f      	lsrs	r7, r7, #20
 800c88c:	053f      	lsls	r7, r7, #20
 800c88e:	b137      	cbz	r7, 800c89e <_dtoa_r+0x8a6>
 800c890:	2701      	movs	r7, #1
 800c892:	9b06      	ldr	r3, [sp, #24]
 800c894:	3301      	adds	r3, #1
 800c896:	9306      	str	r3, [sp, #24]
 800c898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c89a:	3301      	adds	r3, #1
 800c89c:	9309      	str	r3, [sp, #36]	; 0x24
 800c89e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	f47f af6c 	bne.w	800c77e <_dtoa_r+0x786>
 800c8a6:	2001      	movs	r0, #1
 800c8a8:	e771      	b.n	800c78e <_dtoa_r+0x796>
 800c8aa:	2700      	movs	r7, #0
 800c8ac:	e7f7      	b.n	800c89e <_dtoa_r+0x8a6>
 800c8ae:	4657      	mov	r7, sl
 800c8b0:	e7f5      	b.n	800c89e <_dtoa_r+0x8a6>
 800c8b2:	d080      	beq.n	800c7b6 <_dtoa_r+0x7be>
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	301c      	adds	r0, #28
 800c8b8:	e776      	b.n	800c7a8 <_dtoa_r+0x7b0>
 800c8ba:	9b05      	ldr	r3, [sp, #20]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	dc31      	bgt.n	800c924 <_dtoa_r+0x92c>
 800c8c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c8c2:	2b02      	cmp	r3, #2
 800c8c4:	dd2e      	ble.n	800c924 <_dtoa_r+0x92c>
 800c8c6:	9b05      	ldr	r3, [sp, #20]
 800c8c8:	9308      	str	r3, [sp, #32]
 800c8ca:	9b08      	ldr	r3, [sp, #32]
 800c8cc:	b963      	cbnz	r3, 800c8e8 <_dtoa_r+0x8f0>
 800c8ce:	4621      	mov	r1, r4
 800c8d0:	2205      	movs	r2, #5
 800c8d2:	4648      	mov	r0, r9
 800c8d4:	f000 fab0 	bl	800ce38 <__multadd>
 800c8d8:	4601      	mov	r1, r0
 800c8da:	4604      	mov	r4, r0
 800c8dc:	9803      	ldr	r0, [sp, #12]
 800c8de:	f000 fcad 	bl	800d23c <__mcmp>
 800c8e2:	2800      	cmp	r0, #0
 800c8e4:	f73f adc4 	bgt.w	800c470 <_dtoa_r+0x478>
 800c8e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8ea:	9e04      	ldr	r6, [sp, #16]
 800c8ec:	ea6f 0803 	mvn.w	r8, r3
 800c8f0:	2700      	movs	r7, #0
 800c8f2:	4621      	mov	r1, r4
 800c8f4:	4648      	mov	r0, r9
 800c8f6:	f000 fa96 	bl	800ce26 <_Bfree>
 800c8fa:	2d00      	cmp	r5, #0
 800c8fc:	f43f aeb2 	beq.w	800c664 <_dtoa_r+0x66c>
 800c900:	b12f      	cbz	r7, 800c90e <_dtoa_r+0x916>
 800c902:	42af      	cmp	r7, r5
 800c904:	d003      	beq.n	800c90e <_dtoa_r+0x916>
 800c906:	4639      	mov	r1, r7
 800c908:	4648      	mov	r0, r9
 800c90a:	f000 fa8c 	bl	800ce26 <_Bfree>
 800c90e:	4629      	mov	r1, r5
 800c910:	4648      	mov	r0, r9
 800c912:	f000 fa88 	bl	800ce26 <_Bfree>
 800c916:	e6a5      	b.n	800c664 <_dtoa_r+0x66c>
 800c918:	2400      	movs	r4, #0
 800c91a:	4625      	mov	r5, r4
 800c91c:	e7e4      	b.n	800c8e8 <_dtoa_r+0x8f0>
 800c91e:	46a8      	mov	r8, r5
 800c920:	4625      	mov	r5, r4
 800c922:	e5a5      	b.n	800c470 <_dtoa_r+0x478>
 800c924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c926:	2b00      	cmp	r3, #0
 800c928:	f000 80c4 	beq.w	800cab4 <_dtoa_r+0xabc>
 800c92c:	9b05      	ldr	r3, [sp, #20]
 800c92e:	9308      	str	r3, [sp, #32]
 800c930:	2e00      	cmp	r6, #0
 800c932:	dd05      	ble.n	800c940 <_dtoa_r+0x948>
 800c934:	4629      	mov	r1, r5
 800c936:	4632      	mov	r2, r6
 800c938:	4648      	mov	r0, r9
 800c93a:	f000 fc0f 	bl	800d15c <__lshift>
 800c93e:	4605      	mov	r5, r0
 800c940:	2f00      	cmp	r7, #0
 800c942:	d058      	beq.n	800c9f6 <_dtoa_r+0x9fe>
 800c944:	4648      	mov	r0, r9
 800c946:	6869      	ldr	r1, [r5, #4]
 800c948:	f000 fa48 	bl	800cddc <_Balloc>
 800c94c:	4606      	mov	r6, r0
 800c94e:	b920      	cbnz	r0, 800c95a <_dtoa_r+0x962>
 800c950:	4602      	mov	r2, r0
 800c952:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c956:	4b7f      	ldr	r3, [pc, #508]	; (800cb54 <_dtoa_r+0xb5c>)
 800c958:	e481      	b.n	800c25e <_dtoa_r+0x266>
 800c95a:	692a      	ldr	r2, [r5, #16]
 800c95c:	f105 010c 	add.w	r1, r5, #12
 800c960:	3202      	adds	r2, #2
 800c962:	0092      	lsls	r2, r2, #2
 800c964:	300c      	adds	r0, #12
 800c966:	f7fd ff55 	bl	800a814 <memcpy>
 800c96a:	2201      	movs	r2, #1
 800c96c:	4631      	mov	r1, r6
 800c96e:	4648      	mov	r0, r9
 800c970:	f000 fbf4 	bl	800d15c <__lshift>
 800c974:	462f      	mov	r7, r5
 800c976:	4605      	mov	r5, r0
 800c978:	9b04      	ldr	r3, [sp, #16]
 800c97a:	9a04      	ldr	r2, [sp, #16]
 800c97c:	3301      	adds	r3, #1
 800c97e:	9305      	str	r3, [sp, #20]
 800c980:	9b08      	ldr	r3, [sp, #32]
 800c982:	4413      	add	r3, r2
 800c984:	930a      	str	r3, [sp, #40]	; 0x28
 800c986:	f00a 0301 	and.w	r3, sl, #1
 800c98a:	9309      	str	r3, [sp, #36]	; 0x24
 800c98c:	9b05      	ldr	r3, [sp, #20]
 800c98e:	4621      	mov	r1, r4
 800c990:	9803      	ldr	r0, [sp, #12]
 800c992:	f103 3bff 	add.w	fp, r3, #4294967295
 800c996:	f7ff faa3 	bl	800bee0 <quorem>
 800c99a:	4639      	mov	r1, r7
 800c99c:	9006      	str	r0, [sp, #24]
 800c99e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c9a2:	9803      	ldr	r0, [sp, #12]
 800c9a4:	f000 fc4a 	bl	800d23c <__mcmp>
 800c9a8:	462a      	mov	r2, r5
 800c9aa:	9008      	str	r0, [sp, #32]
 800c9ac:	4621      	mov	r1, r4
 800c9ae:	4648      	mov	r0, r9
 800c9b0:	f000 fc60 	bl	800d274 <__mdiff>
 800c9b4:	68c2      	ldr	r2, [r0, #12]
 800c9b6:	4606      	mov	r6, r0
 800c9b8:	b9fa      	cbnz	r2, 800c9fa <_dtoa_r+0xa02>
 800c9ba:	4601      	mov	r1, r0
 800c9bc:	9803      	ldr	r0, [sp, #12]
 800c9be:	f000 fc3d 	bl	800d23c <__mcmp>
 800c9c2:	4602      	mov	r2, r0
 800c9c4:	4631      	mov	r1, r6
 800c9c6:	4648      	mov	r0, r9
 800c9c8:	920b      	str	r2, [sp, #44]	; 0x2c
 800c9ca:	f000 fa2c 	bl	800ce26 <_Bfree>
 800c9ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c9d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c9d2:	9e05      	ldr	r6, [sp, #20]
 800c9d4:	ea43 0102 	orr.w	r1, r3, r2
 800c9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9da:	430b      	orrs	r3, r1
 800c9dc:	d10f      	bne.n	800c9fe <_dtoa_r+0xa06>
 800c9de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c9e2:	d028      	beq.n	800ca36 <_dtoa_r+0xa3e>
 800c9e4:	9b08      	ldr	r3, [sp, #32]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	dd02      	ble.n	800c9f0 <_dtoa_r+0x9f8>
 800c9ea:	9b06      	ldr	r3, [sp, #24]
 800c9ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c9f0:	f88b a000 	strb.w	sl, [fp]
 800c9f4:	e77d      	b.n	800c8f2 <_dtoa_r+0x8fa>
 800c9f6:	4628      	mov	r0, r5
 800c9f8:	e7bc      	b.n	800c974 <_dtoa_r+0x97c>
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	e7e2      	b.n	800c9c4 <_dtoa_r+0x9cc>
 800c9fe:	9b08      	ldr	r3, [sp, #32]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	db04      	blt.n	800ca0e <_dtoa_r+0xa16>
 800ca04:	9920      	ldr	r1, [sp, #128]	; 0x80
 800ca06:	430b      	orrs	r3, r1
 800ca08:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca0a:	430b      	orrs	r3, r1
 800ca0c:	d120      	bne.n	800ca50 <_dtoa_r+0xa58>
 800ca0e:	2a00      	cmp	r2, #0
 800ca10:	ddee      	ble.n	800c9f0 <_dtoa_r+0x9f8>
 800ca12:	2201      	movs	r2, #1
 800ca14:	9903      	ldr	r1, [sp, #12]
 800ca16:	4648      	mov	r0, r9
 800ca18:	f000 fba0 	bl	800d15c <__lshift>
 800ca1c:	4621      	mov	r1, r4
 800ca1e:	9003      	str	r0, [sp, #12]
 800ca20:	f000 fc0c 	bl	800d23c <__mcmp>
 800ca24:	2800      	cmp	r0, #0
 800ca26:	dc03      	bgt.n	800ca30 <_dtoa_r+0xa38>
 800ca28:	d1e2      	bne.n	800c9f0 <_dtoa_r+0x9f8>
 800ca2a:	f01a 0f01 	tst.w	sl, #1
 800ca2e:	d0df      	beq.n	800c9f0 <_dtoa_r+0x9f8>
 800ca30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ca34:	d1d9      	bne.n	800c9ea <_dtoa_r+0x9f2>
 800ca36:	2339      	movs	r3, #57	; 0x39
 800ca38:	f88b 3000 	strb.w	r3, [fp]
 800ca3c:	4633      	mov	r3, r6
 800ca3e:	461e      	mov	r6, r3
 800ca40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ca44:	3b01      	subs	r3, #1
 800ca46:	2a39      	cmp	r2, #57	; 0x39
 800ca48:	d06a      	beq.n	800cb20 <_dtoa_r+0xb28>
 800ca4a:	3201      	adds	r2, #1
 800ca4c:	701a      	strb	r2, [r3, #0]
 800ca4e:	e750      	b.n	800c8f2 <_dtoa_r+0x8fa>
 800ca50:	2a00      	cmp	r2, #0
 800ca52:	dd07      	ble.n	800ca64 <_dtoa_r+0xa6c>
 800ca54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ca58:	d0ed      	beq.n	800ca36 <_dtoa_r+0xa3e>
 800ca5a:	f10a 0301 	add.w	r3, sl, #1
 800ca5e:	f88b 3000 	strb.w	r3, [fp]
 800ca62:	e746      	b.n	800c8f2 <_dtoa_r+0x8fa>
 800ca64:	9b05      	ldr	r3, [sp, #20]
 800ca66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca68:	f803 ac01 	strb.w	sl, [r3, #-1]
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d041      	beq.n	800caf4 <_dtoa_r+0xafc>
 800ca70:	2300      	movs	r3, #0
 800ca72:	220a      	movs	r2, #10
 800ca74:	9903      	ldr	r1, [sp, #12]
 800ca76:	4648      	mov	r0, r9
 800ca78:	f000 f9de 	bl	800ce38 <__multadd>
 800ca7c:	42af      	cmp	r7, r5
 800ca7e:	9003      	str	r0, [sp, #12]
 800ca80:	f04f 0300 	mov.w	r3, #0
 800ca84:	f04f 020a 	mov.w	r2, #10
 800ca88:	4639      	mov	r1, r7
 800ca8a:	4648      	mov	r0, r9
 800ca8c:	d107      	bne.n	800ca9e <_dtoa_r+0xaa6>
 800ca8e:	f000 f9d3 	bl	800ce38 <__multadd>
 800ca92:	4607      	mov	r7, r0
 800ca94:	4605      	mov	r5, r0
 800ca96:	9b05      	ldr	r3, [sp, #20]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	9305      	str	r3, [sp, #20]
 800ca9c:	e776      	b.n	800c98c <_dtoa_r+0x994>
 800ca9e:	f000 f9cb 	bl	800ce38 <__multadd>
 800caa2:	4629      	mov	r1, r5
 800caa4:	4607      	mov	r7, r0
 800caa6:	2300      	movs	r3, #0
 800caa8:	220a      	movs	r2, #10
 800caaa:	4648      	mov	r0, r9
 800caac:	f000 f9c4 	bl	800ce38 <__multadd>
 800cab0:	4605      	mov	r5, r0
 800cab2:	e7f0      	b.n	800ca96 <_dtoa_r+0xa9e>
 800cab4:	9b05      	ldr	r3, [sp, #20]
 800cab6:	9308      	str	r3, [sp, #32]
 800cab8:	9e04      	ldr	r6, [sp, #16]
 800caba:	4621      	mov	r1, r4
 800cabc:	9803      	ldr	r0, [sp, #12]
 800cabe:	f7ff fa0f 	bl	800bee0 <quorem>
 800cac2:	9b04      	ldr	r3, [sp, #16]
 800cac4:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cac8:	f806 ab01 	strb.w	sl, [r6], #1
 800cacc:	1af2      	subs	r2, r6, r3
 800cace:	9b08      	ldr	r3, [sp, #32]
 800cad0:	4293      	cmp	r3, r2
 800cad2:	dd07      	ble.n	800cae4 <_dtoa_r+0xaec>
 800cad4:	2300      	movs	r3, #0
 800cad6:	220a      	movs	r2, #10
 800cad8:	4648      	mov	r0, r9
 800cada:	9903      	ldr	r1, [sp, #12]
 800cadc:	f000 f9ac 	bl	800ce38 <__multadd>
 800cae0:	9003      	str	r0, [sp, #12]
 800cae2:	e7ea      	b.n	800caba <_dtoa_r+0xac2>
 800cae4:	9b08      	ldr	r3, [sp, #32]
 800cae6:	2700      	movs	r7, #0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	bfcc      	ite	gt
 800caec:	461e      	movgt	r6, r3
 800caee:	2601      	movle	r6, #1
 800caf0:	9b04      	ldr	r3, [sp, #16]
 800caf2:	441e      	add	r6, r3
 800caf4:	2201      	movs	r2, #1
 800caf6:	9903      	ldr	r1, [sp, #12]
 800caf8:	4648      	mov	r0, r9
 800cafa:	f000 fb2f 	bl	800d15c <__lshift>
 800cafe:	4621      	mov	r1, r4
 800cb00:	9003      	str	r0, [sp, #12]
 800cb02:	f000 fb9b 	bl	800d23c <__mcmp>
 800cb06:	2800      	cmp	r0, #0
 800cb08:	dc98      	bgt.n	800ca3c <_dtoa_r+0xa44>
 800cb0a:	d102      	bne.n	800cb12 <_dtoa_r+0xb1a>
 800cb0c:	f01a 0f01 	tst.w	sl, #1
 800cb10:	d194      	bne.n	800ca3c <_dtoa_r+0xa44>
 800cb12:	4633      	mov	r3, r6
 800cb14:	461e      	mov	r6, r3
 800cb16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb1a:	2a30      	cmp	r2, #48	; 0x30
 800cb1c:	d0fa      	beq.n	800cb14 <_dtoa_r+0xb1c>
 800cb1e:	e6e8      	b.n	800c8f2 <_dtoa_r+0x8fa>
 800cb20:	9a04      	ldr	r2, [sp, #16]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d18b      	bne.n	800ca3e <_dtoa_r+0xa46>
 800cb26:	2331      	movs	r3, #49	; 0x31
 800cb28:	f108 0801 	add.w	r8, r8, #1
 800cb2c:	7013      	strb	r3, [r2, #0]
 800cb2e:	e6e0      	b.n	800c8f2 <_dtoa_r+0x8fa>
 800cb30:	4b09      	ldr	r3, [pc, #36]	; (800cb58 <_dtoa_r+0xb60>)
 800cb32:	f7ff bab1 	b.w	800c098 <_dtoa_r+0xa0>
 800cb36:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f47f aa95 	bne.w	800c068 <_dtoa_r+0x70>
 800cb3e:	4b07      	ldr	r3, [pc, #28]	; (800cb5c <_dtoa_r+0xb64>)
 800cb40:	f7ff baaa 	b.w	800c098 <_dtoa_r+0xa0>
 800cb44:	9b08      	ldr	r3, [sp, #32]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	dcb6      	bgt.n	800cab8 <_dtoa_r+0xac0>
 800cb4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cb4c:	2b02      	cmp	r3, #2
 800cb4e:	f73f aebc 	bgt.w	800c8ca <_dtoa_r+0x8d2>
 800cb52:	e7b1      	b.n	800cab8 <_dtoa_r+0xac0>
 800cb54:	0800f10e 	.word	0x0800f10e
 800cb58:	0800efde 	.word	0x0800efde
 800cb5c:	0800f105 	.word	0x0800f105

0800cb60 <__libc_fini_array>:
 800cb60:	b538      	push	{r3, r4, r5, lr}
 800cb62:	4d07      	ldr	r5, [pc, #28]	; (800cb80 <__libc_fini_array+0x20>)
 800cb64:	4c07      	ldr	r4, [pc, #28]	; (800cb84 <__libc_fini_array+0x24>)
 800cb66:	1b64      	subs	r4, r4, r5
 800cb68:	10a4      	asrs	r4, r4, #2
 800cb6a:	b91c      	cbnz	r4, 800cb74 <__libc_fini_array+0x14>
 800cb6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb70:	f002 b97a 	b.w	800ee68 <_fini>
 800cb74:	3c01      	subs	r4, #1
 800cb76:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800cb7a:	4798      	blx	r3
 800cb7c:	e7f5      	b.n	800cb6a <__libc_fini_array+0xa>
 800cb7e:	bf00      	nop
 800cb80:	0800f350 	.word	0x0800f350
 800cb84:	0800f358 	.word	0x0800f358

0800cb88 <_malloc_trim_r>:
 800cb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb8c:	4606      	mov	r6, r0
 800cb8e:	2008      	movs	r0, #8
 800cb90:	460c      	mov	r4, r1
 800cb92:	f7ff f94b 	bl	800be2c <sysconf>
 800cb96:	4680      	mov	r8, r0
 800cb98:	4f22      	ldr	r7, [pc, #136]	; (800cc24 <_malloc_trim_r+0x9c>)
 800cb9a:	4630      	mov	r0, r6
 800cb9c:	f7fd fe6a 	bl	800a874 <__malloc_lock>
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	685d      	ldr	r5, [r3, #4]
 800cba4:	f025 0503 	bic.w	r5, r5, #3
 800cba8:	1b2c      	subs	r4, r5, r4
 800cbaa:	3c11      	subs	r4, #17
 800cbac:	4444      	add	r4, r8
 800cbae:	fbb4 f4f8 	udiv	r4, r4, r8
 800cbb2:	3c01      	subs	r4, #1
 800cbb4:	fb08 f404 	mul.w	r4, r8, r4
 800cbb8:	45a0      	cmp	r8, r4
 800cbba:	dd05      	ble.n	800cbc8 <_malloc_trim_r+0x40>
 800cbbc:	4630      	mov	r0, r6
 800cbbe:	f7fd fe5f 	bl	800a880 <__malloc_unlock>
 800cbc2:	2000      	movs	r0, #0
 800cbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbc8:	2100      	movs	r1, #0
 800cbca:	4630      	mov	r0, r6
 800cbcc:	f7fd fe5e 	bl	800a88c <_sbrk_r>
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	442b      	add	r3, r5
 800cbd4:	4298      	cmp	r0, r3
 800cbd6:	d1f1      	bne.n	800cbbc <_malloc_trim_r+0x34>
 800cbd8:	4630      	mov	r0, r6
 800cbda:	4261      	negs	r1, r4
 800cbdc:	f7fd fe56 	bl	800a88c <_sbrk_r>
 800cbe0:	3001      	adds	r0, #1
 800cbe2:	d110      	bne.n	800cc06 <_malloc_trim_r+0x7e>
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	f7fd fe50 	bl	800a88c <_sbrk_r>
 800cbec:	68ba      	ldr	r2, [r7, #8]
 800cbee:	1a83      	subs	r3, r0, r2
 800cbf0:	2b0f      	cmp	r3, #15
 800cbf2:	dde3      	ble.n	800cbbc <_malloc_trim_r+0x34>
 800cbf4:	490c      	ldr	r1, [pc, #48]	; (800cc28 <_malloc_trim_r+0xa0>)
 800cbf6:	f043 0301 	orr.w	r3, r3, #1
 800cbfa:	6809      	ldr	r1, [r1, #0]
 800cbfc:	6053      	str	r3, [r2, #4]
 800cbfe:	1a40      	subs	r0, r0, r1
 800cc00:	490a      	ldr	r1, [pc, #40]	; (800cc2c <_malloc_trim_r+0xa4>)
 800cc02:	6008      	str	r0, [r1, #0]
 800cc04:	e7da      	b.n	800cbbc <_malloc_trim_r+0x34>
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	4a08      	ldr	r2, [pc, #32]	; (800cc2c <_malloc_trim_r+0xa4>)
 800cc0a:	1b2d      	subs	r5, r5, r4
 800cc0c:	f045 0501 	orr.w	r5, r5, #1
 800cc10:	605d      	str	r5, [r3, #4]
 800cc12:	6813      	ldr	r3, [r2, #0]
 800cc14:	4630      	mov	r0, r6
 800cc16:	1b1b      	subs	r3, r3, r4
 800cc18:	6013      	str	r3, [r2, #0]
 800cc1a:	f7fd fe31 	bl	800a880 <__malloc_unlock>
 800cc1e:	2001      	movs	r0, #1
 800cc20:	e7d0      	b.n	800cbc4 <_malloc_trim_r+0x3c>
 800cc22:	bf00      	nop
 800cc24:	20000438 	.word	0x20000438
 800cc28:	20000840 	.word	0x20000840
 800cc2c:	20000cec 	.word	0x20000cec

0800cc30 <_free_r>:
 800cc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc32:	4605      	mov	r5, r0
 800cc34:	460f      	mov	r7, r1
 800cc36:	2900      	cmp	r1, #0
 800cc38:	f000 80b1 	beq.w	800cd9e <_free_r+0x16e>
 800cc3c:	f7fd fe1a 	bl	800a874 <__malloc_lock>
 800cc40:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800cc44:	4856      	ldr	r0, [pc, #344]	; (800cda0 <_free_r+0x170>)
 800cc46:	f022 0401 	bic.w	r4, r2, #1
 800cc4a:	f1a7 0308 	sub.w	r3, r7, #8
 800cc4e:	eb03 0c04 	add.w	ip, r3, r4
 800cc52:	6881      	ldr	r1, [r0, #8]
 800cc54:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800cc58:	4561      	cmp	r1, ip
 800cc5a:	f026 0603 	bic.w	r6, r6, #3
 800cc5e:	f002 0201 	and.w	r2, r2, #1
 800cc62:	d11b      	bne.n	800cc9c <_free_r+0x6c>
 800cc64:	4434      	add	r4, r6
 800cc66:	b93a      	cbnz	r2, 800cc78 <_free_r+0x48>
 800cc68:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800cc6c:	1a9b      	subs	r3, r3, r2
 800cc6e:	4414      	add	r4, r2
 800cc70:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800cc74:	60ca      	str	r2, [r1, #12]
 800cc76:	6091      	str	r1, [r2, #8]
 800cc78:	f044 0201 	orr.w	r2, r4, #1
 800cc7c:	605a      	str	r2, [r3, #4]
 800cc7e:	6083      	str	r3, [r0, #8]
 800cc80:	4b48      	ldr	r3, [pc, #288]	; (800cda4 <_free_r+0x174>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	42a3      	cmp	r3, r4
 800cc86:	d804      	bhi.n	800cc92 <_free_r+0x62>
 800cc88:	4b47      	ldr	r3, [pc, #284]	; (800cda8 <_free_r+0x178>)
 800cc8a:	4628      	mov	r0, r5
 800cc8c:	6819      	ldr	r1, [r3, #0]
 800cc8e:	f7ff ff7b 	bl	800cb88 <_malloc_trim_r>
 800cc92:	4628      	mov	r0, r5
 800cc94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cc98:	f7fd bdf2 	b.w	800a880 <__malloc_unlock>
 800cc9c:	f8cc 6004 	str.w	r6, [ip, #4]
 800cca0:	2a00      	cmp	r2, #0
 800cca2:	d138      	bne.n	800cd16 <_free_r+0xe6>
 800cca4:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800cca8:	f100 0708 	add.w	r7, r0, #8
 800ccac:	1a5b      	subs	r3, r3, r1
 800ccae:	440c      	add	r4, r1
 800ccb0:	6899      	ldr	r1, [r3, #8]
 800ccb2:	42b9      	cmp	r1, r7
 800ccb4:	d031      	beq.n	800cd1a <_free_r+0xea>
 800ccb6:	68df      	ldr	r7, [r3, #12]
 800ccb8:	60cf      	str	r7, [r1, #12]
 800ccba:	60b9      	str	r1, [r7, #8]
 800ccbc:	eb0c 0106 	add.w	r1, ip, r6
 800ccc0:	6849      	ldr	r1, [r1, #4]
 800ccc2:	07c9      	lsls	r1, r1, #31
 800ccc4:	d40b      	bmi.n	800ccde <_free_r+0xae>
 800ccc6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800ccca:	4434      	add	r4, r6
 800cccc:	bb3a      	cbnz	r2, 800cd1e <_free_r+0xee>
 800ccce:	4e37      	ldr	r6, [pc, #220]	; (800cdac <_free_r+0x17c>)
 800ccd0:	42b1      	cmp	r1, r6
 800ccd2:	d124      	bne.n	800cd1e <_free_r+0xee>
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ccda:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800ccde:	f044 0101 	orr.w	r1, r4, #1
 800cce2:	6059      	str	r1, [r3, #4]
 800cce4:	511c      	str	r4, [r3, r4]
 800cce6:	2a00      	cmp	r2, #0
 800cce8:	d1d3      	bne.n	800cc92 <_free_r+0x62>
 800ccea:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800ccee:	d21b      	bcs.n	800cd28 <_free_r+0xf8>
 800ccf0:	0961      	lsrs	r1, r4, #5
 800ccf2:	08e2      	lsrs	r2, r4, #3
 800ccf4:	2401      	movs	r4, #1
 800ccf6:	408c      	lsls	r4, r1
 800ccf8:	6841      	ldr	r1, [r0, #4]
 800ccfa:	3201      	adds	r2, #1
 800ccfc:	430c      	orrs	r4, r1
 800ccfe:	6044      	str	r4, [r0, #4]
 800cd00:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800cd04:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800cd08:	3908      	subs	r1, #8
 800cd0a:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800cd0e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800cd12:	60e3      	str	r3, [r4, #12]
 800cd14:	e7bd      	b.n	800cc92 <_free_r+0x62>
 800cd16:	2200      	movs	r2, #0
 800cd18:	e7d0      	b.n	800ccbc <_free_r+0x8c>
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	e7ce      	b.n	800ccbc <_free_r+0x8c>
 800cd1e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800cd22:	60ce      	str	r6, [r1, #12]
 800cd24:	60b1      	str	r1, [r6, #8]
 800cd26:	e7da      	b.n	800ccde <_free_r+0xae>
 800cd28:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800cd2c:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800cd30:	d214      	bcs.n	800cd5c <_free_r+0x12c>
 800cd32:	09a2      	lsrs	r2, r4, #6
 800cd34:	3238      	adds	r2, #56	; 0x38
 800cd36:	1c51      	adds	r1, r2, #1
 800cd38:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800cd3c:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800cd40:	428e      	cmp	r6, r1
 800cd42:	d125      	bne.n	800cd90 <_free_r+0x160>
 800cd44:	2401      	movs	r4, #1
 800cd46:	1092      	asrs	r2, r2, #2
 800cd48:	fa04 f202 	lsl.w	r2, r4, r2
 800cd4c:	6844      	ldr	r4, [r0, #4]
 800cd4e:	4322      	orrs	r2, r4
 800cd50:	6042      	str	r2, [r0, #4]
 800cd52:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800cd56:	60b3      	str	r3, [r6, #8]
 800cd58:	60cb      	str	r3, [r1, #12]
 800cd5a:	e79a      	b.n	800cc92 <_free_r+0x62>
 800cd5c:	2a14      	cmp	r2, #20
 800cd5e:	d801      	bhi.n	800cd64 <_free_r+0x134>
 800cd60:	325b      	adds	r2, #91	; 0x5b
 800cd62:	e7e8      	b.n	800cd36 <_free_r+0x106>
 800cd64:	2a54      	cmp	r2, #84	; 0x54
 800cd66:	d802      	bhi.n	800cd6e <_free_r+0x13e>
 800cd68:	0b22      	lsrs	r2, r4, #12
 800cd6a:	326e      	adds	r2, #110	; 0x6e
 800cd6c:	e7e3      	b.n	800cd36 <_free_r+0x106>
 800cd6e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800cd72:	d802      	bhi.n	800cd7a <_free_r+0x14a>
 800cd74:	0be2      	lsrs	r2, r4, #15
 800cd76:	3277      	adds	r2, #119	; 0x77
 800cd78:	e7dd      	b.n	800cd36 <_free_r+0x106>
 800cd7a:	f240 5154 	movw	r1, #1364	; 0x554
 800cd7e:	428a      	cmp	r2, r1
 800cd80:	bf96      	itet	ls
 800cd82:	0ca2      	lsrls	r2, r4, #18
 800cd84:	227e      	movhi	r2, #126	; 0x7e
 800cd86:	327c      	addls	r2, #124	; 0x7c
 800cd88:	e7d5      	b.n	800cd36 <_free_r+0x106>
 800cd8a:	6889      	ldr	r1, [r1, #8]
 800cd8c:	428e      	cmp	r6, r1
 800cd8e:	d004      	beq.n	800cd9a <_free_r+0x16a>
 800cd90:	684a      	ldr	r2, [r1, #4]
 800cd92:	f022 0203 	bic.w	r2, r2, #3
 800cd96:	42a2      	cmp	r2, r4
 800cd98:	d8f7      	bhi.n	800cd8a <_free_r+0x15a>
 800cd9a:	68ce      	ldr	r6, [r1, #12]
 800cd9c:	e7d9      	b.n	800cd52 <_free_r+0x122>
 800cd9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cda0:	20000438 	.word	0x20000438
 800cda4:	20000844 	.word	0x20000844
 800cda8:	20000d1c 	.word	0x20000d1c
 800cdac:	20000440 	.word	0x20000440

0800cdb0 <_localeconv_r>:
 800cdb0:	4800      	ldr	r0, [pc, #0]	; (800cdb4 <_localeconv_r+0x4>)
 800cdb2:	4770      	bx	lr
 800cdb4:	2000093c 	.word	0x2000093c

0800cdb8 <__retarget_lock_init_recursive>:
 800cdb8:	4770      	bx	lr

0800cdba <__retarget_lock_close_recursive>:
 800cdba:	4770      	bx	lr

0800cdbc <__retarget_lock_acquire_recursive>:
 800cdbc:	4770      	bx	lr

0800cdbe <__retarget_lock_release_recursive>:
 800cdbe:	4770      	bx	lr

0800cdc0 <memchr>:
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	b510      	push	{r4, lr}
 800cdc4:	b2c9      	uxtb	r1, r1
 800cdc6:	4402      	add	r2, r0
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	4618      	mov	r0, r3
 800cdcc:	d101      	bne.n	800cdd2 <memchr+0x12>
 800cdce:	2000      	movs	r0, #0
 800cdd0:	e003      	b.n	800cdda <memchr+0x1a>
 800cdd2:	7804      	ldrb	r4, [r0, #0]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	428c      	cmp	r4, r1
 800cdd8:	d1f6      	bne.n	800cdc8 <memchr+0x8>
 800cdda:	bd10      	pop	{r4, pc}

0800cddc <_Balloc>:
 800cddc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800cdde:	b570      	push	{r4, r5, r6, lr}
 800cde0:	4605      	mov	r5, r0
 800cde2:	460c      	mov	r4, r1
 800cde4:	b17b      	cbz	r3, 800ce06 <_Balloc+0x2a>
 800cde6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800cde8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800cdec:	b9a0      	cbnz	r0, 800ce18 <_Balloc+0x3c>
 800cdee:	2101      	movs	r1, #1
 800cdf0:	fa01 f604 	lsl.w	r6, r1, r4
 800cdf4:	1d72      	adds	r2, r6, #5
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	0092      	lsls	r2, r2, #2
 800cdfa:	f000 fc03 	bl	800d604 <_calloc_r>
 800cdfe:	b148      	cbz	r0, 800ce14 <_Balloc+0x38>
 800ce00:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800ce04:	e00b      	b.n	800ce1e <_Balloc+0x42>
 800ce06:	2221      	movs	r2, #33	; 0x21
 800ce08:	2104      	movs	r1, #4
 800ce0a:	f000 fbfb 	bl	800d604 <_calloc_r>
 800ce0e:	64e8      	str	r0, [r5, #76]	; 0x4c
 800ce10:	2800      	cmp	r0, #0
 800ce12:	d1e8      	bne.n	800cde6 <_Balloc+0xa>
 800ce14:	2000      	movs	r0, #0
 800ce16:	bd70      	pop	{r4, r5, r6, pc}
 800ce18:	6802      	ldr	r2, [r0, #0]
 800ce1a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800ce1e:	2300      	movs	r3, #0
 800ce20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce24:	e7f7      	b.n	800ce16 <_Balloc+0x3a>

0800ce26 <_Bfree>:
 800ce26:	b131      	cbz	r1, 800ce36 <_Bfree+0x10>
 800ce28:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ce2a:	684a      	ldr	r2, [r1, #4]
 800ce2c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ce30:	6008      	str	r0, [r1, #0]
 800ce32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ce36:	4770      	bx	lr

0800ce38 <__multadd>:
 800ce38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3c:	4607      	mov	r7, r0
 800ce3e:	460c      	mov	r4, r1
 800ce40:	461e      	mov	r6, r3
 800ce42:	2000      	movs	r0, #0
 800ce44:	690d      	ldr	r5, [r1, #16]
 800ce46:	f101 0c14 	add.w	ip, r1, #20
 800ce4a:	f8dc 3000 	ldr.w	r3, [ip]
 800ce4e:	3001      	adds	r0, #1
 800ce50:	b299      	uxth	r1, r3
 800ce52:	fb02 6101 	mla	r1, r2, r1, r6
 800ce56:	0c1e      	lsrs	r6, r3, #16
 800ce58:	0c0b      	lsrs	r3, r1, #16
 800ce5a:	fb02 3306 	mla	r3, r2, r6, r3
 800ce5e:	b289      	uxth	r1, r1
 800ce60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ce64:	4285      	cmp	r5, r0
 800ce66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce6a:	f84c 1b04 	str.w	r1, [ip], #4
 800ce6e:	dcec      	bgt.n	800ce4a <__multadd+0x12>
 800ce70:	b30e      	cbz	r6, 800ceb6 <__multadd+0x7e>
 800ce72:	68a3      	ldr	r3, [r4, #8]
 800ce74:	42ab      	cmp	r3, r5
 800ce76:	dc19      	bgt.n	800ceac <__multadd+0x74>
 800ce78:	6861      	ldr	r1, [r4, #4]
 800ce7a:	4638      	mov	r0, r7
 800ce7c:	3101      	adds	r1, #1
 800ce7e:	f7ff ffad 	bl	800cddc <_Balloc>
 800ce82:	4680      	mov	r8, r0
 800ce84:	b928      	cbnz	r0, 800ce92 <__multadd+0x5a>
 800ce86:	4602      	mov	r2, r0
 800ce88:	21b5      	movs	r1, #181	; 0xb5
 800ce8a:	4b0c      	ldr	r3, [pc, #48]	; (800cebc <__multadd+0x84>)
 800ce8c:	480c      	ldr	r0, [pc, #48]	; (800cec0 <__multadd+0x88>)
 800ce8e:	f000 fb9b 	bl	800d5c8 <__assert_func>
 800ce92:	6922      	ldr	r2, [r4, #16]
 800ce94:	f104 010c 	add.w	r1, r4, #12
 800ce98:	3202      	adds	r2, #2
 800ce9a:	0092      	lsls	r2, r2, #2
 800ce9c:	300c      	adds	r0, #12
 800ce9e:	f7fd fcb9 	bl	800a814 <memcpy>
 800cea2:	4621      	mov	r1, r4
 800cea4:	4638      	mov	r0, r7
 800cea6:	f7ff ffbe 	bl	800ce26 <_Bfree>
 800ceaa:	4644      	mov	r4, r8
 800ceac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ceb0:	3501      	adds	r5, #1
 800ceb2:	615e      	str	r6, [r3, #20]
 800ceb4:	6125      	str	r5, [r4, #16]
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cebc:	0800f10e 	.word	0x0800f10e
 800cec0:	0800f17a 	.word	0x0800f17a

0800cec4 <__hi0bits>:
 800cec4:	0c02      	lsrs	r2, r0, #16
 800cec6:	0412      	lsls	r2, r2, #16
 800cec8:	4603      	mov	r3, r0
 800ceca:	b9ca      	cbnz	r2, 800cf00 <__hi0bits+0x3c>
 800cecc:	0403      	lsls	r3, r0, #16
 800cece:	2010      	movs	r0, #16
 800ced0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ced4:	bf04      	itt	eq
 800ced6:	021b      	lsleq	r3, r3, #8
 800ced8:	3008      	addeq	r0, #8
 800ceda:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cede:	bf04      	itt	eq
 800cee0:	011b      	lsleq	r3, r3, #4
 800cee2:	3004      	addeq	r0, #4
 800cee4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cee8:	bf04      	itt	eq
 800ceea:	009b      	lsleq	r3, r3, #2
 800ceec:	3002      	addeq	r0, #2
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	db05      	blt.n	800cefe <__hi0bits+0x3a>
 800cef2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cef6:	f100 0001 	add.w	r0, r0, #1
 800cefa:	bf08      	it	eq
 800cefc:	2020      	moveq	r0, #32
 800cefe:	4770      	bx	lr
 800cf00:	2000      	movs	r0, #0
 800cf02:	e7e5      	b.n	800ced0 <__hi0bits+0xc>

0800cf04 <__lo0bits>:
 800cf04:	6803      	ldr	r3, [r0, #0]
 800cf06:	4602      	mov	r2, r0
 800cf08:	f013 0007 	ands.w	r0, r3, #7
 800cf0c:	d00b      	beq.n	800cf26 <__lo0bits+0x22>
 800cf0e:	07d9      	lsls	r1, r3, #31
 800cf10:	d421      	bmi.n	800cf56 <__lo0bits+0x52>
 800cf12:	0798      	lsls	r0, r3, #30
 800cf14:	bf49      	itett	mi
 800cf16:	085b      	lsrmi	r3, r3, #1
 800cf18:	089b      	lsrpl	r3, r3, #2
 800cf1a:	2001      	movmi	r0, #1
 800cf1c:	6013      	strmi	r3, [r2, #0]
 800cf1e:	bf5c      	itt	pl
 800cf20:	2002      	movpl	r0, #2
 800cf22:	6013      	strpl	r3, [r2, #0]
 800cf24:	4770      	bx	lr
 800cf26:	b299      	uxth	r1, r3
 800cf28:	b909      	cbnz	r1, 800cf2e <__lo0bits+0x2a>
 800cf2a:	2010      	movs	r0, #16
 800cf2c:	0c1b      	lsrs	r3, r3, #16
 800cf2e:	b2d9      	uxtb	r1, r3
 800cf30:	b909      	cbnz	r1, 800cf36 <__lo0bits+0x32>
 800cf32:	3008      	adds	r0, #8
 800cf34:	0a1b      	lsrs	r3, r3, #8
 800cf36:	0719      	lsls	r1, r3, #28
 800cf38:	bf04      	itt	eq
 800cf3a:	091b      	lsreq	r3, r3, #4
 800cf3c:	3004      	addeq	r0, #4
 800cf3e:	0799      	lsls	r1, r3, #30
 800cf40:	bf04      	itt	eq
 800cf42:	089b      	lsreq	r3, r3, #2
 800cf44:	3002      	addeq	r0, #2
 800cf46:	07d9      	lsls	r1, r3, #31
 800cf48:	d403      	bmi.n	800cf52 <__lo0bits+0x4e>
 800cf4a:	085b      	lsrs	r3, r3, #1
 800cf4c:	f100 0001 	add.w	r0, r0, #1
 800cf50:	d003      	beq.n	800cf5a <__lo0bits+0x56>
 800cf52:	6013      	str	r3, [r2, #0]
 800cf54:	4770      	bx	lr
 800cf56:	2000      	movs	r0, #0
 800cf58:	4770      	bx	lr
 800cf5a:	2020      	movs	r0, #32
 800cf5c:	4770      	bx	lr
	...

0800cf60 <__i2b>:
 800cf60:	b510      	push	{r4, lr}
 800cf62:	460c      	mov	r4, r1
 800cf64:	2101      	movs	r1, #1
 800cf66:	f7ff ff39 	bl	800cddc <_Balloc>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	b928      	cbnz	r0, 800cf7a <__i2b+0x1a>
 800cf6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cf72:	4b04      	ldr	r3, [pc, #16]	; (800cf84 <__i2b+0x24>)
 800cf74:	4804      	ldr	r0, [pc, #16]	; (800cf88 <__i2b+0x28>)
 800cf76:	f000 fb27 	bl	800d5c8 <__assert_func>
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	6144      	str	r4, [r0, #20]
 800cf7e:	6103      	str	r3, [r0, #16]
 800cf80:	bd10      	pop	{r4, pc}
 800cf82:	bf00      	nop
 800cf84:	0800f10e 	.word	0x0800f10e
 800cf88:	0800f17a 	.word	0x0800f17a

0800cf8c <__multiply>:
 800cf8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf90:	4691      	mov	r9, r2
 800cf92:	690a      	ldr	r2, [r1, #16]
 800cf94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf98:	460c      	mov	r4, r1
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	bfbe      	ittt	lt
 800cf9e:	460b      	movlt	r3, r1
 800cfa0:	464c      	movlt	r4, r9
 800cfa2:	4699      	movlt	r9, r3
 800cfa4:	6927      	ldr	r7, [r4, #16]
 800cfa6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cfaa:	68a3      	ldr	r3, [r4, #8]
 800cfac:	6861      	ldr	r1, [r4, #4]
 800cfae:	eb07 060a 	add.w	r6, r7, sl
 800cfb2:	42b3      	cmp	r3, r6
 800cfb4:	b085      	sub	sp, #20
 800cfb6:	bfb8      	it	lt
 800cfb8:	3101      	addlt	r1, #1
 800cfba:	f7ff ff0f 	bl	800cddc <_Balloc>
 800cfbe:	b930      	cbnz	r0, 800cfce <__multiply+0x42>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	f240 115d 	movw	r1, #349	; 0x15d
 800cfc6:	4b43      	ldr	r3, [pc, #268]	; (800d0d4 <__multiply+0x148>)
 800cfc8:	4843      	ldr	r0, [pc, #268]	; (800d0d8 <__multiply+0x14c>)
 800cfca:	f000 fafd 	bl	800d5c8 <__assert_func>
 800cfce:	f100 0514 	add.w	r5, r0, #20
 800cfd2:	462b      	mov	r3, r5
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cfda:	4543      	cmp	r3, r8
 800cfdc:	d321      	bcc.n	800d022 <__multiply+0x96>
 800cfde:	f104 0314 	add.w	r3, r4, #20
 800cfe2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cfe6:	f109 0314 	add.w	r3, r9, #20
 800cfea:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cfee:	9202      	str	r2, [sp, #8]
 800cff0:	1b3a      	subs	r2, r7, r4
 800cff2:	3a15      	subs	r2, #21
 800cff4:	f022 0203 	bic.w	r2, r2, #3
 800cff8:	3204      	adds	r2, #4
 800cffa:	f104 0115 	add.w	r1, r4, #21
 800cffe:	428f      	cmp	r7, r1
 800d000:	bf38      	it	cc
 800d002:	2204      	movcc	r2, #4
 800d004:	9201      	str	r2, [sp, #4]
 800d006:	9a02      	ldr	r2, [sp, #8]
 800d008:	9303      	str	r3, [sp, #12]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d80c      	bhi.n	800d028 <__multiply+0x9c>
 800d00e:	2e00      	cmp	r6, #0
 800d010:	dd03      	ble.n	800d01a <__multiply+0x8e>
 800d012:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d016:	2b00      	cmp	r3, #0
 800d018:	d059      	beq.n	800d0ce <__multiply+0x142>
 800d01a:	6106      	str	r6, [r0, #16]
 800d01c:	b005      	add	sp, #20
 800d01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d022:	f843 2b04 	str.w	r2, [r3], #4
 800d026:	e7d8      	b.n	800cfda <__multiply+0x4e>
 800d028:	f8b3 a000 	ldrh.w	sl, [r3]
 800d02c:	f1ba 0f00 	cmp.w	sl, #0
 800d030:	d023      	beq.n	800d07a <__multiply+0xee>
 800d032:	46a9      	mov	r9, r5
 800d034:	f04f 0c00 	mov.w	ip, #0
 800d038:	f104 0e14 	add.w	lr, r4, #20
 800d03c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d040:	f8d9 1000 	ldr.w	r1, [r9]
 800d044:	fa1f fb82 	uxth.w	fp, r2
 800d048:	b289      	uxth	r1, r1
 800d04a:	fb0a 110b 	mla	r1, sl, fp, r1
 800d04e:	4461      	add	r1, ip
 800d050:	f8d9 c000 	ldr.w	ip, [r9]
 800d054:	0c12      	lsrs	r2, r2, #16
 800d056:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d05a:	fb0a c202 	mla	r2, sl, r2, ip
 800d05e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d062:	b289      	uxth	r1, r1
 800d064:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d068:	4577      	cmp	r7, lr
 800d06a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d06e:	f849 1b04 	str.w	r1, [r9], #4
 800d072:	d8e3      	bhi.n	800d03c <__multiply+0xb0>
 800d074:	9a01      	ldr	r2, [sp, #4]
 800d076:	f845 c002 	str.w	ip, [r5, r2]
 800d07a:	9a03      	ldr	r2, [sp, #12]
 800d07c:	3304      	adds	r3, #4
 800d07e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d082:	f1b9 0f00 	cmp.w	r9, #0
 800d086:	d020      	beq.n	800d0ca <__multiply+0x13e>
 800d088:	46ae      	mov	lr, r5
 800d08a:	f04f 0a00 	mov.w	sl, #0
 800d08e:	6829      	ldr	r1, [r5, #0]
 800d090:	f104 0c14 	add.w	ip, r4, #20
 800d094:	f8bc b000 	ldrh.w	fp, [ip]
 800d098:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d09c:	b289      	uxth	r1, r1
 800d09e:	fb09 220b 	mla	r2, r9, fp, r2
 800d0a2:	4492      	add	sl, r2
 800d0a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d0a8:	f84e 1b04 	str.w	r1, [lr], #4
 800d0ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d0b0:	f8be 1000 	ldrh.w	r1, [lr]
 800d0b4:	0c12      	lsrs	r2, r2, #16
 800d0b6:	fb09 1102 	mla	r1, r9, r2, r1
 800d0ba:	4567      	cmp	r7, ip
 800d0bc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d0c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d0c4:	d8e6      	bhi.n	800d094 <__multiply+0x108>
 800d0c6:	9a01      	ldr	r2, [sp, #4]
 800d0c8:	50a9      	str	r1, [r5, r2]
 800d0ca:	3504      	adds	r5, #4
 800d0cc:	e79b      	b.n	800d006 <__multiply+0x7a>
 800d0ce:	3e01      	subs	r6, #1
 800d0d0:	e79d      	b.n	800d00e <__multiply+0x82>
 800d0d2:	bf00      	nop
 800d0d4:	0800f10e 	.word	0x0800f10e
 800d0d8:	0800f17a 	.word	0x0800f17a

0800d0dc <__pow5mult>:
 800d0dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0e0:	4615      	mov	r5, r2
 800d0e2:	f012 0203 	ands.w	r2, r2, #3
 800d0e6:	4606      	mov	r6, r0
 800d0e8:	460f      	mov	r7, r1
 800d0ea:	d007      	beq.n	800d0fc <__pow5mult+0x20>
 800d0ec:	4c1a      	ldr	r4, [pc, #104]	; (800d158 <__pow5mult+0x7c>)
 800d0ee:	3a01      	subs	r2, #1
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d0f6:	f7ff fe9f 	bl	800ce38 <__multadd>
 800d0fa:	4607      	mov	r7, r0
 800d0fc:	10ad      	asrs	r5, r5, #2
 800d0fe:	d027      	beq.n	800d150 <__pow5mult+0x74>
 800d100:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800d102:	b944      	cbnz	r4, 800d116 <__pow5mult+0x3a>
 800d104:	f240 2171 	movw	r1, #625	; 0x271
 800d108:	4630      	mov	r0, r6
 800d10a:	f7ff ff29 	bl	800cf60 <__i2b>
 800d10e:	2300      	movs	r3, #0
 800d110:	4604      	mov	r4, r0
 800d112:	64b0      	str	r0, [r6, #72]	; 0x48
 800d114:	6003      	str	r3, [r0, #0]
 800d116:	f04f 0900 	mov.w	r9, #0
 800d11a:	07eb      	lsls	r3, r5, #31
 800d11c:	d50a      	bpl.n	800d134 <__pow5mult+0x58>
 800d11e:	4639      	mov	r1, r7
 800d120:	4622      	mov	r2, r4
 800d122:	4630      	mov	r0, r6
 800d124:	f7ff ff32 	bl	800cf8c <__multiply>
 800d128:	4680      	mov	r8, r0
 800d12a:	4639      	mov	r1, r7
 800d12c:	4630      	mov	r0, r6
 800d12e:	f7ff fe7a 	bl	800ce26 <_Bfree>
 800d132:	4647      	mov	r7, r8
 800d134:	106d      	asrs	r5, r5, #1
 800d136:	d00b      	beq.n	800d150 <__pow5mult+0x74>
 800d138:	6820      	ldr	r0, [r4, #0]
 800d13a:	b938      	cbnz	r0, 800d14c <__pow5mult+0x70>
 800d13c:	4622      	mov	r2, r4
 800d13e:	4621      	mov	r1, r4
 800d140:	4630      	mov	r0, r6
 800d142:	f7ff ff23 	bl	800cf8c <__multiply>
 800d146:	6020      	str	r0, [r4, #0]
 800d148:	f8c0 9000 	str.w	r9, [r0]
 800d14c:	4604      	mov	r4, r0
 800d14e:	e7e4      	b.n	800d11a <__pow5mult+0x3e>
 800d150:	4638      	mov	r0, r7
 800d152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d156:	bf00      	nop
 800d158:	0800f2c8 	.word	0x0800f2c8

0800d15c <__lshift>:
 800d15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d160:	460c      	mov	r4, r1
 800d162:	4607      	mov	r7, r0
 800d164:	4691      	mov	r9, r2
 800d166:	6923      	ldr	r3, [r4, #16]
 800d168:	6849      	ldr	r1, [r1, #4]
 800d16a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d16e:	68a3      	ldr	r3, [r4, #8]
 800d170:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d174:	f108 0601 	add.w	r6, r8, #1
 800d178:	42b3      	cmp	r3, r6
 800d17a:	db0b      	blt.n	800d194 <__lshift+0x38>
 800d17c:	4638      	mov	r0, r7
 800d17e:	f7ff fe2d 	bl	800cddc <_Balloc>
 800d182:	4605      	mov	r5, r0
 800d184:	b948      	cbnz	r0, 800d19a <__lshift+0x3e>
 800d186:	4602      	mov	r2, r0
 800d188:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d18c:	4b29      	ldr	r3, [pc, #164]	; (800d234 <__lshift+0xd8>)
 800d18e:	482a      	ldr	r0, [pc, #168]	; (800d238 <__lshift+0xdc>)
 800d190:	f000 fa1a 	bl	800d5c8 <__assert_func>
 800d194:	3101      	adds	r1, #1
 800d196:	005b      	lsls	r3, r3, #1
 800d198:	e7ee      	b.n	800d178 <__lshift+0x1c>
 800d19a:	2300      	movs	r3, #0
 800d19c:	f100 0114 	add.w	r1, r0, #20
 800d1a0:	f100 0210 	add.w	r2, r0, #16
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	4553      	cmp	r3, sl
 800d1a8:	db37      	blt.n	800d21a <__lshift+0xbe>
 800d1aa:	6920      	ldr	r0, [r4, #16]
 800d1ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d1b0:	f104 0314 	add.w	r3, r4, #20
 800d1b4:	f019 091f 	ands.w	r9, r9, #31
 800d1b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d1bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d1c0:	d02f      	beq.n	800d222 <__lshift+0xc6>
 800d1c2:	468a      	mov	sl, r1
 800d1c4:	f04f 0c00 	mov.w	ip, #0
 800d1c8:	f1c9 0e20 	rsb	lr, r9, #32
 800d1cc:	681a      	ldr	r2, [r3, #0]
 800d1ce:	fa02 f209 	lsl.w	r2, r2, r9
 800d1d2:	ea42 020c 	orr.w	r2, r2, ip
 800d1d6:	f84a 2b04 	str.w	r2, [sl], #4
 800d1da:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1de:	4298      	cmp	r0, r3
 800d1e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d1e4:	d8f2      	bhi.n	800d1cc <__lshift+0x70>
 800d1e6:	1b03      	subs	r3, r0, r4
 800d1e8:	3b15      	subs	r3, #21
 800d1ea:	f023 0303 	bic.w	r3, r3, #3
 800d1ee:	3304      	adds	r3, #4
 800d1f0:	f104 0215 	add.w	r2, r4, #21
 800d1f4:	4290      	cmp	r0, r2
 800d1f6:	bf38      	it	cc
 800d1f8:	2304      	movcc	r3, #4
 800d1fa:	f841 c003 	str.w	ip, [r1, r3]
 800d1fe:	f1bc 0f00 	cmp.w	ip, #0
 800d202:	d001      	beq.n	800d208 <__lshift+0xac>
 800d204:	f108 0602 	add.w	r6, r8, #2
 800d208:	3e01      	subs	r6, #1
 800d20a:	4638      	mov	r0, r7
 800d20c:	4621      	mov	r1, r4
 800d20e:	612e      	str	r6, [r5, #16]
 800d210:	f7ff fe09 	bl	800ce26 <_Bfree>
 800d214:	4628      	mov	r0, r5
 800d216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d21a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d21e:	3301      	adds	r3, #1
 800d220:	e7c1      	b.n	800d1a6 <__lshift+0x4a>
 800d222:	3904      	subs	r1, #4
 800d224:	f853 2b04 	ldr.w	r2, [r3], #4
 800d228:	4298      	cmp	r0, r3
 800d22a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d22e:	d8f9      	bhi.n	800d224 <__lshift+0xc8>
 800d230:	e7ea      	b.n	800d208 <__lshift+0xac>
 800d232:	bf00      	nop
 800d234:	0800f10e 	.word	0x0800f10e
 800d238:	0800f17a 	.word	0x0800f17a

0800d23c <__mcmp>:
 800d23c:	4603      	mov	r3, r0
 800d23e:	690a      	ldr	r2, [r1, #16]
 800d240:	6900      	ldr	r0, [r0, #16]
 800d242:	b530      	push	{r4, r5, lr}
 800d244:	1a80      	subs	r0, r0, r2
 800d246:	d10d      	bne.n	800d264 <__mcmp+0x28>
 800d248:	3314      	adds	r3, #20
 800d24a:	3114      	adds	r1, #20
 800d24c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d250:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d254:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d258:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d25c:	4295      	cmp	r5, r2
 800d25e:	d002      	beq.n	800d266 <__mcmp+0x2a>
 800d260:	d304      	bcc.n	800d26c <__mcmp+0x30>
 800d262:	2001      	movs	r0, #1
 800d264:	bd30      	pop	{r4, r5, pc}
 800d266:	42a3      	cmp	r3, r4
 800d268:	d3f4      	bcc.n	800d254 <__mcmp+0x18>
 800d26a:	e7fb      	b.n	800d264 <__mcmp+0x28>
 800d26c:	f04f 30ff 	mov.w	r0, #4294967295
 800d270:	e7f8      	b.n	800d264 <__mcmp+0x28>
	...

0800d274 <__mdiff>:
 800d274:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d278:	460d      	mov	r5, r1
 800d27a:	4607      	mov	r7, r0
 800d27c:	4611      	mov	r1, r2
 800d27e:	4628      	mov	r0, r5
 800d280:	4614      	mov	r4, r2
 800d282:	f7ff ffdb 	bl	800d23c <__mcmp>
 800d286:	1e06      	subs	r6, r0, #0
 800d288:	d111      	bne.n	800d2ae <__mdiff+0x3a>
 800d28a:	4631      	mov	r1, r6
 800d28c:	4638      	mov	r0, r7
 800d28e:	f7ff fda5 	bl	800cddc <_Balloc>
 800d292:	4602      	mov	r2, r0
 800d294:	b928      	cbnz	r0, 800d2a2 <__mdiff+0x2e>
 800d296:	f240 2132 	movw	r1, #562	; 0x232
 800d29a:	4b3a      	ldr	r3, [pc, #232]	; (800d384 <__mdiff+0x110>)
 800d29c:	483a      	ldr	r0, [pc, #232]	; (800d388 <__mdiff+0x114>)
 800d29e:	f000 f993 	bl	800d5c8 <__assert_func>
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d2a8:	4610      	mov	r0, r2
 800d2aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ae:	bfa4      	itt	ge
 800d2b0:	4623      	movge	r3, r4
 800d2b2:	462c      	movge	r4, r5
 800d2b4:	4638      	mov	r0, r7
 800d2b6:	6861      	ldr	r1, [r4, #4]
 800d2b8:	bfa6      	itte	ge
 800d2ba:	461d      	movge	r5, r3
 800d2bc:	2600      	movge	r6, #0
 800d2be:	2601      	movlt	r6, #1
 800d2c0:	f7ff fd8c 	bl	800cddc <_Balloc>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	b918      	cbnz	r0, 800d2d0 <__mdiff+0x5c>
 800d2c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d2cc:	4b2d      	ldr	r3, [pc, #180]	; (800d384 <__mdiff+0x110>)
 800d2ce:	e7e5      	b.n	800d29c <__mdiff+0x28>
 800d2d0:	f102 0814 	add.w	r8, r2, #20
 800d2d4:	46c2      	mov	sl, r8
 800d2d6:	f04f 0c00 	mov.w	ip, #0
 800d2da:	6927      	ldr	r7, [r4, #16]
 800d2dc:	60c6      	str	r6, [r0, #12]
 800d2de:	692e      	ldr	r6, [r5, #16]
 800d2e0:	f104 0014 	add.w	r0, r4, #20
 800d2e4:	f105 0914 	add.w	r9, r5, #20
 800d2e8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800d2ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d2f0:	3410      	adds	r4, #16
 800d2f2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d2f6:	f859 3b04 	ldr.w	r3, [r9], #4
 800d2fa:	fa1f f18b 	uxth.w	r1, fp
 800d2fe:	448c      	add	ip, r1
 800d300:	b299      	uxth	r1, r3
 800d302:	0c1b      	lsrs	r3, r3, #16
 800d304:	ebac 0101 	sub.w	r1, ip, r1
 800d308:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d30c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d310:	b289      	uxth	r1, r1
 800d312:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d316:	454e      	cmp	r6, r9
 800d318:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d31c:	f84a 3b04 	str.w	r3, [sl], #4
 800d320:	d8e7      	bhi.n	800d2f2 <__mdiff+0x7e>
 800d322:	1b73      	subs	r3, r6, r5
 800d324:	3b15      	subs	r3, #21
 800d326:	f023 0303 	bic.w	r3, r3, #3
 800d32a:	3515      	adds	r5, #21
 800d32c:	3304      	adds	r3, #4
 800d32e:	42ae      	cmp	r6, r5
 800d330:	bf38      	it	cc
 800d332:	2304      	movcc	r3, #4
 800d334:	4418      	add	r0, r3
 800d336:	4443      	add	r3, r8
 800d338:	461e      	mov	r6, r3
 800d33a:	4605      	mov	r5, r0
 800d33c:	4575      	cmp	r5, lr
 800d33e:	d30e      	bcc.n	800d35e <__mdiff+0xea>
 800d340:	f10e 0103 	add.w	r1, lr, #3
 800d344:	1a09      	subs	r1, r1, r0
 800d346:	f021 0103 	bic.w	r1, r1, #3
 800d34a:	3803      	subs	r0, #3
 800d34c:	4586      	cmp	lr, r0
 800d34e:	bf38      	it	cc
 800d350:	2100      	movcc	r1, #0
 800d352:	4419      	add	r1, r3
 800d354:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d358:	b18b      	cbz	r3, 800d37e <__mdiff+0x10a>
 800d35a:	6117      	str	r7, [r2, #16]
 800d35c:	e7a4      	b.n	800d2a8 <__mdiff+0x34>
 800d35e:	f855 8b04 	ldr.w	r8, [r5], #4
 800d362:	fa1f f188 	uxth.w	r1, r8
 800d366:	4461      	add	r1, ip
 800d368:	140c      	asrs	r4, r1, #16
 800d36a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d36e:	b289      	uxth	r1, r1
 800d370:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d374:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d378:	f846 1b04 	str.w	r1, [r6], #4
 800d37c:	e7de      	b.n	800d33c <__mdiff+0xc8>
 800d37e:	3f01      	subs	r7, #1
 800d380:	e7e8      	b.n	800d354 <__mdiff+0xe0>
 800d382:	bf00      	nop
 800d384:	0800f10e 	.word	0x0800f10e
 800d388:	0800f17a 	.word	0x0800f17a

0800d38c <__d2b>:
 800d38c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d390:	2101      	movs	r1, #1
 800d392:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d396:	4690      	mov	r8, r2
 800d398:	461d      	mov	r5, r3
 800d39a:	f7ff fd1f 	bl	800cddc <_Balloc>
 800d39e:	4604      	mov	r4, r0
 800d3a0:	b930      	cbnz	r0, 800d3b0 <__d2b+0x24>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	f240 310a 	movw	r1, #778	; 0x30a
 800d3a8:	4b24      	ldr	r3, [pc, #144]	; (800d43c <__d2b+0xb0>)
 800d3aa:	4825      	ldr	r0, [pc, #148]	; (800d440 <__d2b+0xb4>)
 800d3ac:	f000 f90c 	bl	800d5c8 <__assert_func>
 800d3b0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d3b4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d3b8:	bb2d      	cbnz	r5, 800d406 <__d2b+0x7a>
 800d3ba:	9301      	str	r3, [sp, #4]
 800d3bc:	f1b8 0300 	subs.w	r3, r8, #0
 800d3c0:	d026      	beq.n	800d410 <__d2b+0x84>
 800d3c2:	4668      	mov	r0, sp
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	f7ff fd9d 	bl	800cf04 <__lo0bits>
 800d3ca:	9900      	ldr	r1, [sp, #0]
 800d3cc:	b1f0      	cbz	r0, 800d40c <__d2b+0x80>
 800d3ce:	9a01      	ldr	r2, [sp, #4]
 800d3d0:	f1c0 0320 	rsb	r3, r0, #32
 800d3d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d3d8:	430b      	orrs	r3, r1
 800d3da:	40c2      	lsrs	r2, r0
 800d3dc:	6163      	str	r3, [r4, #20]
 800d3de:	9201      	str	r2, [sp, #4]
 800d3e0:	9b01      	ldr	r3, [sp, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	bf14      	ite	ne
 800d3e6:	2102      	movne	r1, #2
 800d3e8:	2101      	moveq	r1, #1
 800d3ea:	61a3      	str	r3, [r4, #24]
 800d3ec:	6121      	str	r1, [r4, #16]
 800d3ee:	b1c5      	cbz	r5, 800d422 <__d2b+0x96>
 800d3f0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d3f4:	4405      	add	r5, r0
 800d3f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d3fa:	603d      	str	r5, [r7, #0]
 800d3fc:	6030      	str	r0, [r6, #0]
 800d3fe:	4620      	mov	r0, r4
 800d400:	b002      	add	sp, #8
 800d402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d40a:	e7d6      	b.n	800d3ba <__d2b+0x2e>
 800d40c:	6161      	str	r1, [r4, #20]
 800d40e:	e7e7      	b.n	800d3e0 <__d2b+0x54>
 800d410:	a801      	add	r0, sp, #4
 800d412:	f7ff fd77 	bl	800cf04 <__lo0bits>
 800d416:	2101      	movs	r1, #1
 800d418:	9b01      	ldr	r3, [sp, #4]
 800d41a:	6121      	str	r1, [r4, #16]
 800d41c:	6163      	str	r3, [r4, #20]
 800d41e:	3020      	adds	r0, #32
 800d420:	e7e5      	b.n	800d3ee <__d2b+0x62>
 800d422:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d426:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d42a:	6038      	str	r0, [r7, #0]
 800d42c:	6918      	ldr	r0, [r3, #16]
 800d42e:	f7ff fd49 	bl	800cec4 <__hi0bits>
 800d432:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d436:	6031      	str	r1, [r6, #0]
 800d438:	e7e1      	b.n	800d3fe <__d2b+0x72>
 800d43a:	bf00      	nop
 800d43c:	0800f10e 	.word	0x0800f10e
 800d440:	0800f17a 	.word	0x0800f17a

0800d444 <frexp>:
 800d444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d446:	4617      	mov	r7, r2
 800d448:	2200      	movs	r2, #0
 800d44a:	603a      	str	r2, [r7, #0]
 800d44c:	4a14      	ldr	r2, [pc, #80]	; (800d4a0 <frexp+0x5c>)
 800d44e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d452:	4296      	cmp	r6, r2
 800d454:	4604      	mov	r4, r0
 800d456:	460d      	mov	r5, r1
 800d458:	460b      	mov	r3, r1
 800d45a:	dc1e      	bgt.n	800d49a <frexp+0x56>
 800d45c:	4602      	mov	r2, r0
 800d45e:	4332      	orrs	r2, r6
 800d460:	d01b      	beq.n	800d49a <frexp+0x56>
 800d462:	4a10      	ldr	r2, [pc, #64]	; (800d4a4 <frexp+0x60>)
 800d464:	400a      	ands	r2, r1
 800d466:	b952      	cbnz	r2, 800d47e <frexp+0x3a>
 800d468:	2200      	movs	r2, #0
 800d46a:	4b0f      	ldr	r3, [pc, #60]	; (800d4a8 <frexp+0x64>)
 800d46c:	f7f3 f834 	bl	80004d8 <__aeabi_dmul>
 800d470:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800d474:	4604      	mov	r4, r0
 800d476:	460b      	mov	r3, r1
 800d478:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d47c:	603a      	str	r2, [r7, #0]
 800d47e:	683a      	ldr	r2, [r7, #0]
 800d480:	1536      	asrs	r6, r6, #20
 800d482:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d486:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
 800d48a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d48e:	4416      	add	r6, r2
 800d490:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800d494:	603e      	str	r6, [r7, #0]
 800d496:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800d49a:	4620      	mov	r0, r4
 800d49c:	4629      	mov	r1, r5
 800d49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4a0:	7fefffff 	.word	0x7fefffff
 800d4a4:	7ff00000 	.word	0x7ff00000
 800d4a8:	43500000 	.word	0x43500000

0800d4ac <strncpy>:
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	b510      	push	{r4, lr}
 800d4b0:	3901      	subs	r1, #1
 800d4b2:	b132      	cbz	r2, 800d4c2 <strncpy+0x16>
 800d4b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d4b8:	3a01      	subs	r2, #1
 800d4ba:	f803 4b01 	strb.w	r4, [r3], #1
 800d4be:	2c00      	cmp	r4, #0
 800d4c0:	d1f7      	bne.n	800d4b2 <strncpy+0x6>
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	441a      	add	r2, r3
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d100      	bne.n	800d4cc <strncpy+0x20>
 800d4ca:	bd10      	pop	{r4, pc}
 800d4cc:	f803 1b01 	strb.w	r1, [r3], #1
 800d4d0:	e7f9      	b.n	800d4c6 <strncpy+0x1a>

0800d4d2 <__ssprint_r>:
 800d4d2:	6893      	ldr	r3, [r2, #8]
 800d4d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d8:	4680      	mov	r8, r0
 800d4da:	460c      	mov	r4, r1
 800d4dc:	4617      	mov	r7, r2
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d061      	beq.n	800d5a6 <__ssprint_r+0xd4>
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	469b      	mov	fp, r3
 800d4e6:	f8d2 a000 	ldr.w	sl, [r2]
 800d4ea:	9301      	str	r3, [sp, #4]
 800d4ec:	f1bb 0f00 	cmp.w	fp, #0
 800d4f0:	d02b      	beq.n	800d54a <__ssprint_r+0x78>
 800d4f2:	68a6      	ldr	r6, [r4, #8]
 800d4f4:	455e      	cmp	r6, fp
 800d4f6:	d844      	bhi.n	800d582 <__ssprint_r+0xb0>
 800d4f8:	89a2      	ldrh	r2, [r4, #12]
 800d4fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d4fe:	d03e      	beq.n	800d57e <__ssprint_r+0xac>
 800d500:	6820      	ldr	r0, [r4, #0]
 800d502:	6921      	ldr	r1, [r4, #16]
 800d504:	6965      	ldr	r5, [r4, #20]
 800d506:	eba0 0901 	sub.w	r9, r0, r1
 800d50a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d50e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d512:	f109 0001 	add.w	r0, r9, #1
 800d516:	106d      	asrs	r5, r5, #1
 800d518:	4458      	add	r0, fp
 800d51a:	4285      	cmp	r5, r0
 800d51c:	bf38      	it	cc
 800d51e:	4605      	movcc	r5, r0
 800d520:	0553      	lsls	r3, r2, #21
 800d522:	d545      	bpl.n	800d5b0 <__ssprint_r+0xde>
 800d524:	4629      	mov	r1, r5
 800d526:	4640      	mov	r0, r8
 800d528:	f7fc ff28 	bl	800a37c <_malloc_r>
 800d52c:	4606      	mov	r6, r0
 800d52e:	b9a0      	cbnz	r0, 800d55a <__ssprint_r+0x88>
 800d530:	230c      	movs	r3, #12
 800d532:	f8c8 3000 	str.w	r3, [r8]
 800d536:	89a3      	ldrh	r3, [r4, #12]
 800d538:	f04f 30ff 	mov.w	r0, #4294967295
 800d53c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d540:	81a3      	strh	r3, [r4, #12]
 800d542:	2300      	movs	r3, #0
 800d544:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800d548:	e02f      	b.n	800d5aa <__ssprint_r+0xd8>
 800d54a:	f8da 3000 	ldr.w	r3, [sl]
 800d54e:	f8da b004 	ldr.w	fp, [sl, #4]
 800d552:	9301      	str	r3, [sp, #4]
 800d554:	f10a 0a08 	add.w	sl, sl, #8
 800d558:	e7c8      	b.n	800d4ec <__ssprint_r+0x1a>
 800d55a:	464a      	mov	r2, r9
 800d55c:	6921      	ldr	r1, [r4, #16]
 800d55e:	f7fd f959 	bl	800a814 <memcpy>
 800d562:	89a2      	ldrh	r2, [r4, #12]
 800d564:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800d568:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d56c:	81a2      	strh	r2, [r4, #12]
 800d56e:	6126      	str	r6, [r4, #16]
 800d570:	444e      	add	r6, r9
 800d572:	6026      	str	r6, [r4, #0]
 800d574:	465e      	mov	r6, fp
 800d576:	6165      	str	r5, [r4, #20]
 800d578:	eba5 0509 	sub.w	r5, r5, r9
 800d57c:	60a5      	str	r5, [r4, #8]
 800d57e:	455e      	cmp	r6, fp
 800d580:	d900      	bls.n	800d584 <__ssprint_r+0xb2>
 800d582:	465e      	mov	r6, fp
 800d584:	4632      	mov	r2, r6
 800d586:	9901      	ldr	r1, [sp, #4]
 800d588:	6820      	ldr	r0, [r4, #0]
 800d58a:	f7fd f951 	bl	800a830 <memmove>
 800d58e:	68a2      	ldr	r2, [r4, #8]
 800d590:	1b92      	subs	r2, r2, r6
 800d592:	60a2      	str	r2, [r4, #8]
 800d594:	6822      	ldr	r2, [r4, #0]
 800d596:	4432      	add	r2, r6
 800d598:	6022      	str	r2, [r4, #0]
 800d59a:	68ba      	ldr	r2, [r7, #8]
 800d59c:	eba2 030b 	sub.w	r3, r2, fp
 800d5a0:	60bb      	str	r3, [r7, #8]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d1d1      	bne.n	800d54a <__ssprint_r+0x78>
 800d5a6:	2000      	movs	r0, #0
 800d5a8:	6078      	str	r0, [r7, #4]
 800d5aa:	b003      	add	sp, #12
 800d5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b0:	462a      	mov	r2, r5
 800d5b2:	4640      	mov	r0, r8
 800d5b4:	f000 f886 	bl	800d6c4 <_realloc_r>
 800d5b8:	4606      	mov	r6, r0
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	d1d7      	bne.n	800d56e <__ssprint_r+0x9c>
 800d5be:	4640      	mov	r0, r8
 800d5c0:	6921      	ldr	r1, [r4, #16]
 800d5c2:	f7ff fb35 	bl	800cc30 <_free_r>
 800d5c6:	e7b3      	b.n	800d530 <__ssprint_r+0x5e>

0800d5c8 <__assert_func>:
 800d5c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5ca:	4614      	mov	r4, r2
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	4b09      	ldr	r3, [pc, #36]	; (800d5f4 <__assert_func+0x2c>)
 800d5d0:	4605      	mov	r5, r0
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	68d8      	ldr	r0, [r3, #12]
 800d5d6:	b14c      	cbz	r4, 800d5ec <__assert_func+0x24>
 800d5d8:	4b07      	ldr	r3, [pc, #28]	; (800d5f8 <__assert_func+0x30>)
 800d5da:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5de:	9100      	str	r1, [sp, #0]
 800d5e0:	462b      	mov	r3, r5
 800d5e2:	4906      	ldr	r1, [pc, #24]	; (800d5fc <__assert_func+0x34>)
 800d5e4:	f000 f844 	bl	800d670 <fiprintf>
 800d5e8:	f7fc fe7c 	bl	800a2e4 <abort>
 800d5ec:	4b04      	ldr	r3, [pc, #16]	; (800d600 <__assert_func+0x38>)
 800d5ee:	461c      	mov	r4, r3
 800d5f0:	e7f3      	b.n	800d5da <__assert_func+0x12>
 800d5f2:	bf00      	nop
 800d5f4:	2000000c 	.word	0x2000000c
 800d5f8:	0800f2d4 	.word	0x0800f2d4
 800d5fc:	0800f2e1 	.word	0x0800f2e1
 800d600:	0800f30f 	.word	0x0800f30f

0800d604 <_calloc_r>:
 800d604:	b538      	push	{r3, r4, r5, lr}
 800d606:	fba1 1502 	umull	r1, r5, r1, r2
 800d60a:	b92d      	cbnz	r5, 800d618 <_calloc_r+0x14>
 800d60c:	f7fc feb6 	bl	800a37c <_malloc_r>
 800d610:	4604      	mov	r4, r0
 800d612:	b938      	cbnz	r0, 800d624 <_calloc_r+0x20>
 800d614:	4620      	mov	r0, r4
 800d616:	bd38      	pop	{r3, r4, r5, pc}
 800d618:	f7fc fe76 	bl	800a308 <__errno>
 800d61c:	230c      	movs	r3, #12
 800d61e:	2400      	movs	r4, #0
 800d620:	6003      	str	r3, [r0, #0]
 800d622:	e7f7      	b.n	800d614 <_calloc_r+0x10>
 800d624:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800d628:	f022 0203 	bic.w	r2, r2, #3
 800d62c:	3a04      	subs	r2, #4
 800d62e:	2a24      	cmp	r2, #36	; 0x24
 800d630:	d819      	bhi.n	800d666 <_calloc_r+0x62>
 800d632:	2a13      	cmp	r2, #19
 800d634:	d915      	bls.n	800d662 <_calloc_r+0x5e>
 800d636:	2a1b      	cmp	r2, #27
 800d638:	e9c0 5500 	strd	r5, r5, [r0]
 800d63c:	d806      	bhi.n	800d64c <_calloc_r+0x48>
 800d63e:	f100 0308 	add.w	r3, r0, #8
 800d642:	2200      	movs	r2, #0
 800d644:	e9c3 2200 	strd	r2, r2, [r3]
 800d648:	609a      	str	r2, [r3, #8]
 800d64a:	e7e3      	b.n	800d614 <_calloc_r+0x10>
 800d64c:	2a24      	cmp	r2, #36	; 0x24
 800d64e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800d652:	bf11      	iteee	ne
 800d654:	f100 0310 	addne.w	r3, r0, #16
 800d658:	6105      	streq	r5, [r0, #16]
 800d65a:	f100 0318 	addeq.w	r3, r0, #24
 800d65e:	6145      	streq	r5, [r0, #20]
 800d660:	e7ef      	b.n	800d642 <_calloc_r+0x3e>
 800d662:	4603      	mov	r3, r0
 800d664:	e7ed      	b.n	800d642 <_calloc_r+0x3e>
 800d666:	4629      	mov	r1, r5
 800d668:	f7fd f8fc 	bl	800a864 <memset>
 800d66c:	e7d2      	b.n	800d614 <_calloc_r+0x10>
	...

0800d670 <fiprintf>:
 800d670:	b40e      	push	{r1, r2, r3}
 800d672:	b503      	push	{r0, r1, lr}
 800d674:	4601      	mov	r1, r0
 800d676:	ab03      	add	r3, sp, #12
 800d678:	4805      	ldr	r0, [pc, #20]	; (800d690 <fiprintf+0x20>)
 800d67a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d67e:	6800      	ldr	r0, [r0, #0]
 800d680:	9301      	str	r3, [sp, #4]
 800d682:	f000 f9f9 	bl	800da78 <_vfiprintf_r>
 800d686:	b002      	add	sp, #8
 800d688:	f85d eb04 	ldr.w	lr, [sp], #4
 800d68c:	b003      	add	sp, #12
 800d68e:	4770      	bx	lr
 800d690:	2000000c 	.word	0x2000000c

0800d694 <__locale_mb_cur_max>:
 800d694:	4b01      	ldr	r3, [pc, #4]	; (800d69c <__locale_mb_cur_max+0x8>)
 800d696:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800d69a:	4770      	bx	lr
 800d69c:	2000084c 	.word	0x2000084c

0800d6a0 <__ascii_mbtowc>:
 800d6a0:	b082      	sub	sp, #8
 800d6a2:	b901      	cbnz	r1, 800d6a6 <__ascii_mbtowc+0x6>
 800d6a4:	a901      	add	r1, sp, #4
 800d6a6:	b142      	cbz	r2, 800d6ba <__ascii_mbtowc+0x1a>
 800d6a8:	b14b      	cbz	r3, 800d6be <__ascii_mbtowc+0x1e>
 800d6aa:	7813      	ldrb	r3, [r2, #0]
 800d6ac:	600b      	str	r3, [r1, #0]
 800d6ae:	7812      	ldrb	r2, [r2, #0]
 800d6b0:	1e10      	subs	r0, r2, #0
 800d6b2:	bf18      	it	ne
 800d6b4:	2001      	movne	r0, #1
 800d6b6:	b002      	add	sp, #8
 800d6b8:	4770      	bx	lr
 800d6ba:	4610      	mov	r0, r2
 800d6bc:	e7fb      	b.n	800d6b6 <__ascii_mbtowc+0x16>
 800d6be:	f06f 0001 	mvn.w	r0, #1
 800d6c2:	e7f8      	b.n	800d6b6 <__ascii_mbtowc+0x16>

0800d6c4 <_realloc_r>:
 800d6c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c8:	460c      	mov	r4, r1
 800d6ca:	4681      	mov	r9, r0
 800d6cc:	4611      	mov	r1, r2
 800d6ce:	b924      	cbnz	r4, 800d6da <_realloc_r+0x16>
 800d6d0:	b003      	add	sp, #12
 800d6d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d6:	f7fc be51 	b.w	800a37c <_malloc_r>
 800d6da:	9201      	str	r2, [sp, #4]
 800d6dc:	f7fd f8ca 	bl	800a874 <__malloc_lock>
 800d6e0:	9901      	ldr	r1, [sp, #4]
 800d6e2:	f101 080b 	add.w	r8, r1, #11
 800d6e6:	f1b8 0f16 	cmp.w	r8, #22
 800d6ea:	d90b      	bls.n	800d704 <_realloc_r+0x40>
 800d6ec:	f038 0807 	bics.w	r8, r8, #7
 800d6f0:	d50a      	bpl.n	800d708 <_realloc_r+0x44>
 800d6f2:	230c      	movs	r3, #12
 800d6f4:	f04f 0b00 	mov.w	fp, #0
 800d6f8:	f8c9 3000 	str.w	r3, [r9]
 800d6fc:	4658      	mov	r0, fp
 800d6fe:	b003      	add	sp, #12
 800d700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d704:	f04f 0810 	mov.w	r8, #16
 800d708:	4588      	cmp	r8, r1
 800d70a:	d3f2      	bcc.n	800d6f2 <_realloc_r+0x2e>
 800d70c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800d710:	f1a4 0a08 	sub.w	sl, r4, #8
 800d714:	f025 0603 	bic.w	r6, r5, #3
 800d718:	45b0      	cmp	r8, r6
 800d71a:	f340 8171 	ble.w	800da00 <_realloc_r+0x33c>
 800d71e:	4a9c      	ldr	r2, [pc, #624]	; (800d990 <_realloc_r+0x2cc>)
 800d720:	eb0a 0306 	add.w	r3, sl, r6
 800d724:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800d728:	685a      	ldr	r2, [r3, #4]
 800d72a:	459c      	cmp	ip, r3
 800d72c:	d005      	beq.n	800d73a <_realloc_r+0x76>
 800d72e:	f022 0001 	bic.w	r0, r2, #1
 800d732:	4418      	add	r0, r3
 800d734:	6840      	ldr	r0, [r0, #4]
 800d736:	07c7      	lsls	r7, r0, #31
 800d738:	d427      	bmi.n	800d78a <_realloc_r+0xc6>
 800d73a:	f022 0203 	bic.w	r2, r2, #3
 800d73e:	459c      	cmp	ip, r3
 800d740:	eb06 0702 	add.w	r7, r6, r2
 800d744:	d119      	bne.n	800d77a <_realloc_r+0xb6>
 800d746:	f108 0010 	add.w	r0, r8, #16
 800d74a:	42b8      	cmp	r0, r7
 800d74c:	dc1f      	bgt.n	800d78e <_realloc_r+0xca>
 800d74e:	4a90      	ldr	r2, [pc, #576]	; (800d990 <_realloc_r+0x2cc>)
 800d750:	eba7 0708 	sub.w	r7, r7, r8
 800d754:	eb0a 0308 	add.w	r3, sl, r8
 800d758:	f047 0701 	orr.w	r7, r7, #1
 800d75c:	6093      	str	r3, [r2, #8]
 800d75e:	605f      	str	r7, [r3, #4]
 800d760:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d764:	4648      	mov	r0, r9
 800d766:	f003 0301 	and.w	r3, r3, #1
 800d76a:	ea43 0308 	orr.w	r3, r3, r8
 800d76e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d772:	f7fd f885 	bl	800a880 <__malloc_unlock>
 800d776:	46a3      	mov	fp, r4
 800d778:	e7c0      	b.n	800d6fc <_realloc_r+0x38>
 800d77a:	45b8      	cmp	r8, r7
 800d77c:	dc07      	bgt.n	800d78e <_realloc_r+0xca>
 800d77e:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800d782:	60da      	str	r2, [r3, #12]
 800d784:	6093      	str	r3, [r2, #8]
 800d786:	4655      	mov	r5, sl
 800d788:	e080      	b.n	800d88c <_realloc_r+0x1c8>
 800d78a:	2200      	movs	r2, #0
 800d78c:	4613      	mov	r3, r2
 800d78e:	07e8      	lsls	r0, r5, #31
 800d790:	f100 80e8 	bmi.w	800d964 <_realloc_r+0x2a0>
 800d794:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800d798:	ebaa 0505 	sub.w	r5, sl, r5
 800d79c:	6868      	ldr	r0, [r5, #4]
 800d79e:	f020 0003 	bic.w	r0, r0, #3
 800d7a2:	eb00 0b06 	add.w	fp, r0, r6
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	f000 80a7 	beq.w	800d8fa <_realloc_r+0x236>
 800d7ac:	459c      	cmp	ip, r3
 800d7ae:	eb02 070b 	add.w	r7, r2, fp
 800d7b2:	d14b      	bne.n	800d84c <_realloc_r+0x188>
 800d7b4:	f108 0310 	add.w	r3, r8, #16
 800d7b8:	42bb      	cmp	r3, r7
 800d7ba:	f300 809e 	bgt.w	800d8fa <_realloc_r+0x236>
 800d7be:	46ab      	mov	fp, r5
 800d7c0:	68eb      	ldr	r3, [r5, #12]
 800d7c2:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800d7c6:	60d3      	str	r3, [r2, #12]
 800d7c8:	609a      	str	r2, [r3, #8]
 800d7ca:	1f32      	subs	r2, r6, #4
 800d7cc:	2a24      	cmp	r2, #36	; 0x24
 800d7ce:	d838      	bhi.n	800d842 <_realloc_r+0x17e>
 800d7d0:	2a13      	cmp	r2, #19
 800d7d2:	d934      	bls.n	800d83e <_realloc_r+0x17a>
 800d7d4:	6823      	ldr	r3, [r4, #0]
 800d7d6:	2a1b      	cmp	r2, #27
 800d7d8:	60ab      	str	r3, [r5, #8]
 800d7da:	6863      	ldr	r3, [r4, #4]
 800d7dc:	60eb      	str	r3, [r5, #12]
 800d7de:	d81b      	bhi.n	800d818 <_realloc_r+0x154>
 800d7e0:	3408      	adds	r4, #8
 800d7e2:	f105 0310 	add.w	r3, r5, #16
 800d7e6:	6822      	ldr	r2, [r4, #0]
 800d7e8:	601a      	str	r2, [r3, #0]
 800d7ea:	6862      	ldr	r2, [r4, #4]
 800d7ec:	605a      	str	r2, [r3, #4]
 800d7ee:	68a2      	ldr	r2, [r4, #8]
 800d7f0:	609a      	str	r2, [r3, #8]
 800d7f2:	4a67      	ldr	r2, [pc, #412]	; (800d990 <_realloc_r+0x2cc>)
 800d7f4:	eba7 0708 	sub.w	r7, r7, r8
 800d7f8:	eb05 0308 	add.w	r3, r5, r8
 800d7fc:	f047 0701 	orr.w	r7, r7, #1
 800d800:	6093      	str	r3, [r2, #8]
 800d802:	605f      	str	r7, [r3, #4]
 800d804:	686b      	ldr	r3, [r5, #4]
 800d806:	f003 0301 	and.w	r3, r3, #1
 800d80a:	ea43 0308 	orr.w	r3, r3, r8
 800d80e:	606b      	str	r3, [r5, #4]
 800d810:	4648      	mov	r0, r9
 800d812:	f7fd f835 	bl	800a880 <__malloc_unlock>
 800d816:	e771      	b.n	800d6fc <_realloc_r+0x38>
 800d818:	68a3      	ldr	r3, [r4, #8]
 800d81a:	2a24      	cmp	r2, #36	; 0x24
 800d81c:	612b      	str	r3, [r5, #16]
 800d81e:	68e3      	ldr	r3, [r4, #12]
 800d820:	bf18      	it	ne
 800d822:	3410      	addne	r4, #16
 800d824:	616b      	str	r3, [r5, #20]
 800d826:	bf09      	itett	eq
 800d828:	6923      	ldreq	r3, [r4, #16]
 800d82a:	f105 0318 	addne.w	r3, r5, #24
 800d82e:	61ab      	streq	r3, [r5, #24]
 800d830:	6962      	ldreq	r2, [r4, #20]
 800d832:	bf02      	ittt	eq
 800d834:	f105 0320 	addeq.w	r3, r5, #32
 800d838:	61ea      	streq	r2, [r5, #28]
 800d83a:	3418      	addeq	r4, #24
 800d83c:	e7d3      	b.n	800d7e6 <_realloc_r+0x122>
 800d83e:	465b      	mov	r3, fp
 800d840:	e7d1      	b.n	800d7e6 <_realloc_r+0x122>
 800d842:	4621      	mov	r1, r4
 800d844:	4658      	mov	r0, fp
 800d846:	f7fc fff3 	bl	800a830 <memmove>
 800d84a:	e7d2      	b.n	800d7f2 <_realloc_r+0x12e>
 800d84c:	45b8      	cmp	r8, r7
 800d84e:	dc54      	bgt.n	800d8fa <_realloc_r+0x236>
 800d850:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800d854:	4628      	mov	r0, r5
 800d856:	60da      	str	r2, [r3, #12]
 800d858:	6093      	str	r3, [r2, #8]
 800d85a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800d85e:	68eb      	ldr	r3, [r5, #12]
 800d860:	60d3      	str	r3, [r2, #12]
 800d862:	609a      	str	r2, [r3, #8]
 800d864:	1f32      	subs	r2, r6, #4
 800d866:	2a24      	cmp	r2, #36	; 0x24
 800d868:	d843      	bhi.n	800d8f2 <_realloc_r+0x22e>
 800d86a:	2a13      	cmp	r2, #19
 800d86c:	d908      	bls.n	800d880 <_realloc_r+0x1bc>
 800d86e:	6823      	ldr	r3, [r4, #0]
 800d870:	2a1b      	cmp	r2, #27
 800d872:	60ab      	str	r3, [r5, #8]
 800d874:	6863      	ldr	r3, [r4, #4]
 800d876:	60eb      	str	r3, [r5, #12]
 800d878:	d828      	bhi.n	800d8cc <_realloc_r+0x208>
 800d87a:	3408      	adds	r4, #8
 800d87c:	f105 0010 	add.w	r0, r5, #16
 800d880:	6823      	ldr	r3, [r4, #0]
 800d882:	6003      	str	r3, [r0, #0]
 800d884:	6863      	ldr	r3, [r4, #4]
 800d886:	6043      	str	r3, [r0, #4]
 800d888:	68a3      	ldr	r3, [r4, #8]
 800d88a:	6083      	str	r3, [r0, #8]
 800d88c:	686b      	ldr	r3, [r5, #4]
 800d88e:	eba7 0008 	sub.w	r0, r7, r8
 800d892:	280f      	cmp	r0, #15
 800d894:	f003 0301 	and.w	r3, r3, #1
 800d898:	eb05 0207 	add.w	r2, r5, r7
 800d89c:	f240 80b2 	bls.w	800da04 <_realloc_r+0x340>
 800d8a0:	eb05 0108 	add.w	r1, r5, r8
 800d8a4:	ea48 0303 	orr.w	r3, r8, r3
 800d8a8:	f040 0001 	orr.w	r0, r0, #1
 800d8ac:	606b      	str	r3, [r5, #4]
 800d8ae:	6048      	str	r0, [r1, #4]
 800d8b0:	6853      	ldr	r3, [r2, #4]
 800d8b2:	4648      	mov	r0, r9
 800d8b4:	f043 0301 	orr.w	r3, r3, #1
 800d8b8:	6053      	str	r3, [r2, #4]
 800d8ba:	3108      	adds	r1, #8
 800d8bc:	f7ff f9b8 	bl	800cc30 <_free_r>
 800d8c0:	4648      	mov	r0, r9
 800d8c2:	f7fc ffdd 	bl	800a880 <__malloc_unlock>
 800d8c6:	f105 0b08 	add.w	fp, r5, #8
 800d8ca:	e717      	b.n	800d6fc <_realloc_r+0x38>
 800d8cc:	68a3      	ldr	r3, [r4, #8]
 800d8ce:	2a24      	cmp	r2, #36	; 0x24
 800d8d0:	612b      	str	r3, [r5, #16]
 800d8d2:	68e3      	ldr	r3, [r4, #12]
 800d8d4:	bf18      	it	ne
 800d8d6:	f105 0018 	addne.w	r0, r5, #24
 800d8da:	616b      	str	r3, [r5, #20]
 800d8dc:	bf09      	itett	eq
 800d8de:	6923      	ldreq	r3, [r4, #16]
 800d8e0:	3410      	addne	r4, #16
 800d8e2:	61ab      	streq	r3, [r5, #24]
 800d8e4:	6963      	ldreq	r3, [r4, #20]
 800d8e6:	bf02      	ittt	eq
 800d8e8:	f105 0020 	addeq.w	r0, r5, #32
 800d8ec:	61eb      	streq	r3, [r5, #28]
 800d8ee:	3418      	addeq	r4, #24
 800d8f0:	e7c6      	b.n	800d880 <_realloc_r+0x1bc>
 800d8f2:	4621      	mov	r1, r4
 800d8f4:	f7fc ff9c 	bl	800a830 <memmove>
 800d8f8:	e7c8      	b.n	800d88c <_realloc_r+0x1c8>
 800d8fa:	45d8      	cmp	r8, fp
 800d8fc:	dc32      	bgt.n	800d964 <_realloc_r+0x2a0>
 800d8fe:	4628      	mov	r0, r5
 800d900:	68eb      	ldr	r3, [r5, #12]
 800d902:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800d906:	60d3      	str	r3, [r2, #12]
 800d908:	609a      	str	r2, [r3, #8]
 800d90a:	1f32      	subs	r2, r6, #4
 800d90c:	2a24      	cmp	r2, #36	; 0x24
 800d90e:	d825      	bhi.n	800d95c <_realloc_r+0x298>
 800d910:	2a13      	cmp	r2, #19
 800d912:	d908      	bls.n	800d926 <_realloc_r+0x262>
 800d914:	6823      	ldr	r3, [r4, #0]
 800d916:	2a1b      	cmp	r2, #27
 800d918:	60ab      	str	r3, [r5, #8]
 800d91a:	6863      	ldr	r3, [r4, #4]
 800d91c:	60eb      	str	r3, [r5, #12]
 800d91e:	d80a      	bhi.n	800d936 <_realloc_r+0x272>
 800d920:	3408      	adds	r4, #8
 800d922:	f105 0010 	add.w	r0, r5, #16
 800d926:	6823      	ldr	r3, [r4, #0]
 800d928:	6003      	str	r3, [r0, #0]
 800d92a:	6863      	ldr	r3, [r4, #4]
 800d92c:	6043      	str	r3, [r0, #4]
 800d92e:	68a3      	ldr	r3, [r4, #8]
 800d930:	6083      	str	r3, [r0, #8]
 800d932:	465f      	mov	r7, fp
 800d934:	e7aa      	b.n	800d88c <_realloc_r+0x1c8>
 800d936:	68a3      	ldr	r3, [r4, #8]
 800d938:	2a24      	cmp	r2, #36	; 0x24
 800d93a:	612b      	str	r3, [r5, #16]
 800d93c:	68e3      	ldr	r3, [r4, #12]
 800d93e:	bf18      	it	ne
 800d940:	f105 0018 	addne.w	r0, r5, #24
 800d944:	616b      	str	r3, [r5, #20]
 800d946:	bf09      	itett	eq
 800d948:	6923      	ldreq	r3, [r4, #16]
 800d94a:	3410      	addne	r4, #16
 800d94c:	61ab      	streq	r3, [r5, #24]
 800d94e:	6963      	ldreq	r3, [r4, #20]
 800d950:	bf02      	ittt	eq
 800d952:	f105 0020 	addeq.w	r0, r5, #32
 800d956:	61eb      	streq	r3, [r5, #28]
 800d958:	3418      	addeq	r4, #24
 800d95a:	e7e4      	b.n	800d926 <_realloc_r+0x262>
 800d95c:	4621      	mov	r1, r4
 800d95e:	f7fc ff67 	bl	800a830 <memmove>
 800d962:	e7e6      	b.n	800d932 <_realloc_r+0x26e>
 800d964:	4648      	mov	r0, r9
 800d966:	f7fc fd09 	bl	800a37c <_malloc_r>
 800d96a:	4683      	mov	fp, r0
 800d96c:	2800      	cmp	r0, #0
 800d96e:	f43f af4f 	beq.w	800d810 <_realloc_r+0x14c>
 800d972:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d976:	f1a0 0208 	sub.w	r2, r0, #8
 800d97a:	f023 0301 	bic.w	r3, r3, #1
 800d97e:	4453      	add	r3, sl
 800d980:	4293      	cmp	r3, r2
 800d982:	d107      	bne.n	800d994 <_realloc_r+0x2d0>
 800d984:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800d988:	f027 0703 	bic.w	r7, r7, #3
 800d98c:	4437      	add	r7, r6
 800d98e:	e6fa      	b.n	800d786 <_realloc_r+0xc2>
 800d990:	20000438 	.word	0x20000438
 800d994:	1f32      	subs	r2, r6, #4
 800d996:	2a24      	cmp	r2, #36	; 0x24
 800d998:	d82e      	bhi.n	800d9f8 <_realloc_r+0x334>
 800d99a:	2a13      	cmp	r2, #19
 800d99c:	d929      	bls.n	800d9f2 <_realloc_r+0x32e>
 800d99e:	6823      	ldr	r3, [r4, #0]
 800d9a0:	2a1b      	cmp	r2, #27
 800d9a2:	6003      	str	r3, [r0, #0]
 800d9a4:	6863      	ldr	r3, [r4, #4]
 800d9a6:	6043      	str	r3, [r0, #4]
 800d9a8:	d80e      	bhi.n	800d9c8 <_realloc_r+0x304>
 800d9aa:	f104 0208 	add.w	r2, r4, #8
 800d9ae:	f100 0308 	add.w	r3, r0, #8
 800d9b2:	6811      	ldr	r1, [r2, #0]
 800d9b4:	6019      	str	r1, [r3, #0]
 800d9b6:	6851      	ldr	r1, [r2, #4]
 800d9b8:	6059      	str	r1, [r3, #4]
 800d9ba:	6892      	ldr	r2, [r2, #8]
 800d9bc:	609a      	str	r2, [r3, #8]
 800d9be:	4621      	mov	r1, r4
 800d9c0:	4648      	mov	r0, r9
 800d9c2:	f7ff f935 	bl	800cc30 <_free_r>
 800d9c6:	e723      	b.n	800d810 <_realloc_r+0x14c>
 800d9c8:	68a3      	ldr	r3, [r4, #8]
 800d9ca:	2a24      	cmp	r2, #36	; 0x24
 800d9cc:	6083      	str	r3, [r0, #8]
 800d9ce:	68e3      	ldr	r3, [r4, #12]
 800d9d0:	bf18      	it	ne
 800d9d2:	f104 0210 	addne.w	r2, r4, #16
 800d9d6:	60c3      	str	r3, [r0, #12]
 800d9d8:	bf09      	itett	eq
 800d9da:	6923      	ldreq	r3, [r4, #16]
 800d9dc:	f100 0310 	addne.w	r3, r0, #16
 800d9e0:	6103      	streq	r3, [r0, #16]
 800d9e2:	6961      	ldreq	r1, [r4, #20]
 800d9e4:	bf02      	ittt	eq
 800d9e6:	f104 0218 	addeq.w	r2, r4, #24
 800d9ea:	f100 0318 	addeq.w	r3, r0, #24
 800d9ee:	6141      	streq	r1, [r0, #20]
 800d9f0:	e7df      	b.n	800d9b2 <_realloc_r+0x2ee>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	4622      	mov	r2, r4
 800d9f6:	e7dc      	b.n	800d9b2 <_realloc_r+0x2ee>
 800d9f8:	4621      	mov	r1, r4
 800d9fa:	f7fc ff19 	bl	800a830 <memmove>
 800d9fe:	e7de      	b.n	800d9be <_realloc_r+0x2fa>
 800da00:	4637      	mov	r7, r6
 800da02:	e6c0      	b.n	800d786 <_realloc_r+0xc2>
 800da04:	431f      	orrs	r7, r3
 800da06:	606f      	str	r7, [r5, #4]
 800da08:	6853      	ldr	r3, [r2, #4]
 800da0a:	f043 0301 	orr.w	r3, r3, #1
 800da0e:	6053      	str	r3, [r2, #4]
 800da10:	e756      	b.n	800d8c0 <_realloc_r+0x1fc>
 800da12:	bf00      	nop

0800da14 <__sprint_r>:
 800da14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da18:	6893      	ldr	r3, [r2, #8]
 800da1a:	4680      	mov	r8, r0
 800da1c:	460f      	mov	r7, r1
 800da1e:	4614      	mov	r4, r2
 800da20:	b91b      	cbnz	r3, 800da2a <__sprint_r+0x16>
 800da22:	4618      	mov	r0, r3
 800da24:	6053      	str	r3, [r2, #4]
 800da26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da2a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800da2c:	049d      	lsls	r5, r3, #18
 800da2e:	d520      	bpl.n	800da72 <__sprint_r+0x5e>
 800da30:	6815      	ldr	r5, [r2, #0]
 800da32:	3508      	adds	r5, #8
 800da34:	f04f 0900 	mov.w	r9, #0
 800da38:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800da3c:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800da40:	45ca      	cmp	sl, r9
 800da42:	dc0b      	bgt.n	800da5c <__sprint_r+0x48>
 800da44:	68a0      	ldr	r0, [r4, #8]
 800da46:	f026 0603 	bic.w	r6, r6, #3
 800da4a:	1b80      	subs	r0, r0, r6
 800da4c:	60a0      	str	r0, [r4, #8]
 800da4e:	3508      	adds	r5, #8
 800da50:	2800      	cmp	r0, #0
 800da52:	d1ef      	bne.n	800da34 <__sprint_r+0x20>
 800da54:	2300      	movs	r3, #0
 800da56:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800da5a:	e7e4      	b.n	800da26 <__sprint_r+0x12>
 800da5c:	463a      	mov	r2, r7
 800da5e:	4640      	mov	r0, r8
 800da60:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800da64:	f000 fe9b 	bl	800e79e <_fputwc_r>
 800da68:	1c43      	adds	r3, r0, #1
 800da6a:	d0f3      	beq.n	800da54 <__sprint_r+0x40>
 800da6c:	f109 0901 	add.w	r9, r9, #1
 800da70:	e7e6      	b.n	800da40 <__sprint_r+0x2c>
 800da72:	f000 febd 	bl	800e7f0 <__sfvwrite_r>
 800da76:	e7ed      	b.n	800da54 <__sprint_r+0x40>

0800da78 <_vfiprintf_r>:
 800da78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da7c:	b0bb      	sub	sp, #236	; 0xec
 800da7e:	460f      	mov	r7, r1
 800da80:	461d      	mov	r5, r3
 800da82:	461c      	mov	r4, r3
 800da84:	4681      	mov	r9, r0
 800da86:	9202      	str	r2, [sp, #8]
 800da88:	b118      	cbz	r0, 800da92 <_vfiprintf_r+0x1a>
 800da8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800da8c:	b90b      	cbnz	r3, 800da92 <_vfiprintf_r+0x1a>
 800da8e:	f000 fe1d 	bl	800e6cc <__sinit>
 800da92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da94:	07d8      	lsls	r0, r3, #31
 800da96:	d405      	bmi.n	800daa4 <_vfiprintf_r+0x2c>
 800da98:	89bb      	ldrh	r3, [r7, #12]
 800da9a:	0599      	lsls	r1, r3, #22
 800da9c:	d402      	bmi.n	800daa4 <_vfiprintf_r+0x2c>
 800da9e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800daa0:	f7ff f98c 	bl	800cdbc <__retarget_lock_acquire_recursive>
 800daa4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800daa8:	049a      	lsls	r2, r3, #18
 800daaa:	d406      	bmi.n	800daba <_vfiprintf_r+0x42>
 800daac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800dab0:	81bb      	strh	r3, [r7, #12]
 800dab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dab4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dab8:	667b      	str	r3, [r7, #100]	; 0x64
 800daba:	89bb      	ldrh	r3, [r7, #12]
 800dabc:	071e      	lsls	r6, r3, #28
 800dabe:	d501      	bpl.n	800dac4 <_vfiprintf_r+0x4c>
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	b9ab      	cbnz	r3, 800daf0 <_vfiprintf_r+0x78>
 800dac4:	4639      	mov	r1, r7
 800dac6:	4648      	mov	r0, r9
 800dac8:	f000 fcb2 	bl	800e430 <__swsetup_r>
 800dacc:	b180      	cbz	r0, 800daf0 <_vfiprintf_r+0x78>
 800dace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dad0:	07d8      	lsls	r0, r3, #31
 800dad2:	d506      	bpl.n	800dae2 <_vfiprintf_r+0x6a>
 800dad4:	f04f 33ff 	mov.w	r3, #4294967295
 800dad8:	9303      	str	r3, [sp, #12]
 800dada:	9803      	ldr	r0, [sp, #12]
 800dadc:	b03b      	add	sp, #236	; 0xec
 800dade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae2:	89bb      	ldrh	r3, [r7, #12]
 800dae4:	0599      	lsls	r1, r3, #22
 800dae6:	d4f5      	bmi.n	800dad4 <_vfiprintf_r+0x5c>
 800dae8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800daea:	f7ff f968 	bl	800cdbe <__retarget_lock_release_recursive>
 800daee:	e7f1      	b.n	800dad4 <_vfiprintf_r+0x5c>
 800daf0:	89bb      	ldrh	r3, [r7, #12]
 800daf2:	f003 021a 	and.w	r2, r3, #26
 800daf6:	2a0a      	cmp	r2, #10
 800daf8:	d114      	bne.n	800db24 <_vfiprintf_r+0xac>
 800dafa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800dafe:	2a00      	cmp	r2, #0
 800db00:	db10      	blt.n	800db24 <_vfiprintf_r+0xac>
 800db02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800db04:	07d2      	lsls	r2, r2, #31
 800db06:	d404      	bmi.n	800db12 <_vfiprintf_r+0x9a>
 800db08:	059e      	lsls	r6, r3, #22
 800db0a:	d402      	bmi.n	800db12 <_vfiprintf_r+0x9a>
 800db0c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800db0e:	f7ff f956 	bl	800cdbe <__retarget_lock_release_recursive>
 800db12:	462b      	mov	r3, r5
 800db14:	4639      	mov	r1, r7
 800db16:	4648      	mov	r0, r9
 800db18:	9a02      	ldr	r2, [sp, #8]
 800db1a:	b03b      	add	sp, #236	; 0xec
 800db1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db20:	f000 bc38 	b.w	800e394 <__sbprintf>
 800db24:	2300      	movs	r3, #0
 800db26:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800db2a:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800db2e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800db32:	ae11      	add	r6, sp, #68	; 0x44
 800db34:	960e      	str	r6, [sp, #56]	; 0x38
 800db36:	9303      	str	r3, [sp, #12]
 800db38:	9b02      	ldr	r3, [sp, #8]
 800db3a:	461d      	mov	r5, r3
 800db3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db40:	b10a      	cbz	r2, 800db46 <_vfiprintf_r+0xce>
 800db42:	2a25      	cmp	r2, #37	; 0x25
 800db44:	d1f9      	bne.n	800db3a <_vfiprintf_r+0xc2>
 800db46:	9b02      	ldr	r3, [sp, #8]
 800db48:	ebb5 0803 	subs.w	r8, r5, r3
 800db4c:	d00d      	beq.n	800db6a <_vfiprintf_r+0xf2>
 800db4e:	e9c6 3800 	strd	r3, r8, [r6]
 800db52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db54:	4443      	add	r3, r8
 800db56:	9310      	str	r3, [sp, #64]	; 0x40
 800db58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db5a:	3301      	adds	r3, #1
 800db5c:	2b07      	cmp	r3, #7
 800db5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800db60:	dc75      	bgt.n	800dc4e <_vfiprintf_r+0x1d6>
 800db62:	3608      	adds	r6, #8
 800db64:	9b03      	ldr	r3, [sp, #12]
 800db66:	4443      	add	r3, r8
 800db68:	9303      	str	r3, [sp, #12]
 800db6a:	782b      	ldrb	r3, [r5, #0]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	f000 83d5 	beq.w	800e31c <_vfiprintf_r+0x8a4>
 800db72:	2300      	movs	r3, #0
 800db74:	f04f 31ff 	mov.w	r1, #4294967295
 800db78:	469a      	mov	sl, r3
 800db7a:	1c6a      	adds	r2, r5, #1
 800db7c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800db80:	9101      	str	r1, [sp, #4]
 800db82:	9304      	str	r3, [sp, #16]
 800db84:	f812 3b01 	ldrb.w	r3, [r2], #1
 800db88:	9202      	str	r2, [sp, #8]
 800db8a:	f1a3 0220 	sub.w	r2, r3, #32
 800db8e:	2a5a      	cmp	r2, #90	; 0x5a
 800db90:	f200 831d 	bhi.w	800e1ce <_vfiprintf_r+0x756>
 800db94:	e8df f012 	tbh	[pc, r2, lsl #1]
 800db98:	031b009a 	.word	0x031b009a
 800db9c:	00a2031b 	.word	0x00a2031b
 800dba0:	031b031b 	.word	0x031b031b
 800dba4:	0082031b 	.word	0x0082031b
 800dba8:	031b031b 	.word	0x031b031b
 800dbac:	00af00a5 	.word	0x00af00a5
 800dbb0:	00ac031b 	.word	0x00ac031b
 800dbb4:	031b00b1 	.word	0x031b00b1
 800dbb8:	00cf00cc 	.word	0x00cf00cc
 800dbbc:	00cf00cf 	.word	0x00cf00cf
 800dbc0:	00cf00cf 	.word	0x00cf00cf
 800dbc4:	00cf00cf 	.word	0x00cf00cf
 800dbc8:	00cf00cf 	.word	0x00cf00cf
 800dbcc:	031b031b 	.word	0x031b031b
 800dbd0:	031b031b 	.word	0x031b031b
 800dbd4:	031b031b 	.word	0x031b031b
 800dbd8:	031b031b 	.word	0x031b031b
 800dbdc:	00f9031b 	.word	0x00f9031b
 800dbe0:	031b0107 	.word	0x031b0107
 800dbe4:	031b031b 	.word	0x031b031b
 800dbe8:	031b031b 	.word	0x031b031b
 800dbec:	031b031b 	.word	0x031b031b
 800dbf0:	031b031b 	.word	0x031b031b
 800dbf4:	0156031b 	.word	0x0156031b
 800dbf8:	031b031b 	.word	0x031b031b
 800dbfc:	01a0031b 	.word	0x01a0031b
 800dc00:	027d031b 	.word	0x027d031b
 800dc04:	031b031b 	.word	0x031b031b
 800dc08:	031b029d 	.word	0x031b029d
 800dc0c:	031b031b 	.word	0x031b031b
 800dc10:	031b031b 	.word	0x031b031b
 800dc14:	031b031b 	.word	0x031b031b
 800dc18:	031b031b 	.word	0x031b031b
 800dc1c:	00f9031b 	.word	0x00f9031b
 800dc20:	031b0109 	.word	0x031b0109
 800dc24:	031b031b 	.word	0x031b031b
 800dc28:	010900df 	.word	0x010900df
 800dc2c:	031b00f3 	.word	0x031b00f3
 800dc30:	031b00ec 	.word	0x031b00ec
 800dc34:	01580134 	.word	0x01580134
 800dc38:	00f3018d 	.word	0x00f3018d
 800dc3c:	01a0031b 	.word	0x01a0031b
 800dc40:	027f0098 	.word	0x027f0098
 800dc44:	031b031b 	.word	0x031b031b
 800dc48:	031b0065 	.word	0x031b0065
 800dc4c:	0098      	.short	0x0098
 800dc4e:	4639      	mov	r1, r7
 800dc50:	4648      	mov	r0, r9
 800dc52:	aa0e      	add	r2, sp, #56	; 0x38
 800dc54:	f7ff fede 	bl	800da14 <__sprint_r>
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	f040 833e 	bne.w	800e2da <_vfiprintf_r+0x862>
 800dc5e:	ae11      	add	r6, sp, #68	; 0x44
 800dc60:	e780      	b.n	800db64 <_vfiprintf_r+0xec>
 800dc62:	4a9c      	ldr	r2, [pc, #624]	; (800ded4 <_vfiprintf_r+0x45c>)
 800dc64:	9206      	str	r2, [sp, #24]
 800dc66:	f01a 0220 	ands.w	r2, sl, #32
 800dc6a:	f000 8234 	beq.w	800e0d6 <_vfiprintf_r+0x65e>
 800dc6e:	3407      	adds	r4, #7
 800dc70:	f024 0207 	bic.w	r2, r4, #7
 800dc74:	4693      	mov	fp, r2
 800dc76:	6855      	ldr	r5, [r2, #4]
 800dc78:	f85b 4b08 	ldr.w	r4, [fp], #8
 800dc7c:	f01a 0f01 	tst.w	sl, #1
 800dc80:	d009      	beq.n	800dc96 <_vfiprintf_r+0x21e>
 800dc82:	ea54 0205 	orrs.w	r2, r4, r5
 800dc86:	bf1f      	itttt	ne
 800dc88:	2230      	movne	r2, #48	; 0x30
 800dc8a:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 800dc8e:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 800dc92:	f04a 0a02 	orrne.w	sl, sl, #2
 800dc96:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800dc9a:	e118      	b.n	800dece <_vfiprintf_r+0x456>
 800dc9c:	4648      	mov	r0, r9
 800dc9e:	f7ff f887 	bl	800cdb0 <_localeconv_r>
 800dca2:	6843      	ldr	r3, [r0, #4]
 800dca4:	4618      	mov	r0, r3
 800dca6:	9309      	str	r3, [sp, #36]	; 0x24
 800dca8:	f7f2 fa52 	bl	8000150 <strlen>
 800dcac:	9008      	str	r0, [sp, #32]
 800dcae:	4648      	mov	r0, r9
 800dcb0:	f7ff f87e 	bl	800cdb0 <_localeconv_r>
 800dcb4:	6883      	ldr	r3, [r0, #8]
 800dcb6:	9307      	str	r3, [sp, #28]
 800dcb8:	9b08      	ldr	r3, [sp, #32]
 800dcba:	b12b      	cbz	r3, 800dcc8 <_vfiprintf_r+0x250>
 800dcbc:	9b07      	ldr	r3, [sp, #28]
 800dcbe:	b11b      	cbz	r3, 800dcc8 <_vfiprintf_r+0x250>
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	b10b      	cbz	r3, 800dcc8 <_vfiprintf_r+0x250>
 800dcc4:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800dcc8:	9a02      	ldr	r2, [sp, #8]
 800dcca:	e75b      	b.n	800db84 <_vfiprintf_r+0x10c>
 800dccc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d1f9      	bne.n	800dcc8 <_vfiprintf_r+0x250>
 800dcd4:	2320      	movs	r3, #32
 800dcd6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800dcda:	e7f5      	b.n	800dcc8 <_vfiprintf_r+0x250>
 800dcdc:	f04a 0a01 	orr.w	sl, sl, #1
 800dce0:	e7f2      	b.n	800dcc8 <_vfiprintf_r+0x250>
 800dce2:	f854 3b04 	ldr.w	r3, [r4], #4
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	9304      	str	r3, [sp, #16]
 800dcea:	daed      	bge.n	800dcc8 <_vfiprintf_r+0x250>
 800dcec:	425b      	negs	r3, r3
 800dcee:	9304      	str	r3, [sp, #16]
 800dcf0:	f04a 0a04 	orr.w	sl, sl, #4
 800dcf4:	e7e8      	b.n	800dcc8 <_vfiprintf_r+0x250>
 800dcf6:	232b      	movs	r3, #43	; 0x2b
 800dcf8:	e7ed      	b.n	800dcd6 <_vfiprintf_r+0x25e>
 800dcfa:	9a02      	ldr	r2, [sp, #8]
 800dcfc:	f812 3b01 	ldrb.w	r3, [r2], #1
 800dd00:	2b2a      	cmp	r3, #42	; 0x2a
 800dd02:	d112      	bne.n	800dd2a <_vfiprintf_r+0x2b2>
 800dd04:	f854 0b04 	ldr.w	r0, [r4], #4
 800dd08:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800dd0c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800dd10:	e7da      	b.n	800dcc8 <_vfiprintf_r+0x250>
 800dd12:	200a      	movs	r0, #10
 800dd14:	9b01      	ldr	r3, [sp, #4]
 800dd16:	fb00 1303 	mla	r3, r0, r3, r1
 800dd1a:	9301      	str	r3, [sp, #4]
 800dd1c:	f812 3b01 	ldrb.w	r3, [r2], #1
 800dd20:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800dd24:	2909      	cmp	r1, #9
 800dd26:	d9f4      	bls.n	800dd12 <_vfiprintf_r+0x29a>
 800dd28:	e72e      	b.n	800db88 <_vfiprintf_r+0x110>
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	9101      	str	r1, [sp, #4]
 800dd2e:	e7f7      	b.n	800dd20 <_vfiprintf_r+0x2a8>
 800dd30:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800dd34:	e7c8      	b.n	800dcc8 <_vfiprintf_r+0x250>
 800dd36:	2100      	movs	r1, #0
 800dd38:	9a02      	ldr	r2, [sp, #8]
 800dd3a:	9104      	str	r1, [sp, #16]
 800dd3c:	200a      	movs	r0, #10
 800dd3e:	9904      	ldr	r1, [sp, #16]
 800dd40:	3b30      	subs	r3, #48	; 0x30
 800dd42:	fb00 3301 	mla	r3, r0, r1, r3
 800dd46:	9304      	str	r3, [sp, #16]
 800dd48:	f812 3b01 	ldrb.w	r3, [r2], #1
 800dd4c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800dd50:	2909      	cmp	r1, #9
 800dd52:	d9f3      	bls.n	800dd3c <_vfiprintf_r+0x2c4>
 800dd54:	e718      	b.n	800db88 <_vfiprintf_r+0x110>
 800dd56:	9b02      	ldr	r3, [sp, #8]
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	2b68      	cmp	r3, #104	; 0x68
 800dd5c:	bf01      	itttt	eq
 800dd5e:	9b02      	ldreq	r3, [sp, #8]
 800dd60:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800dd64:	3301      	addeq	r3, #1
 800dd66:	9302      	streq	r3, [sp, #8]
 800dd68:	bf18      	it	ne
 800dd6a:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800dd6e:	e7ab      	b.n	800dcc8 <_vfiprintf_r+0x250>
 800dd70:	9b02      	ldr	r3, [sp, #8]
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	2b6c      	cmp	r3, #108	; 0x6c
 800dd76:	d105      	bne.n	800dd84 <_vfiprintf_r+0x30c>
 800dd78:	9b02      	ldr	r3, [sp, #8]
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	9302      	str	r3, [sp, #8]
 800dd7e:	f04a 0a20 	orr.w	sl, sl, #32
 800dd82:	e7a1      	b.n	800dcc8 <_vfiprintf_r+0x250>
 800dd84:	f04a 0a10 	orr.w	sl, sl, #16
 800dd88:	e79e      	b.n	800dcc8 <_vfiprintf_r+0x250>
 800dd8a:	46a3      	mov	fp, r4
 800dd8c:	2100      	movs	r1, #0
 800dd8e:	f85b 3b04 	ldr.w	r3, [fp], #4
 800dd92:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 800dd96:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	460d      	mov	r5, r1
 800dd9e:	9301      	str	r3, [sp, #4]
 800dda0:	f10d 0884 	add.w	r8, sp, #132	; 0x84
 800dda4:	e0ad      	b.n	800df02 <_vfiprintf_r+0x48a>
 800dda6:	f04a 0a10 	orr.w	sl, sl, #16
 800ddaa:	f01a 0f20 	tst.w	sl, #32
 800ddae:	d010      	beq.n	800ddd2 <_vfiprintf_r+0x35a>
 800ddb0:	3407      	adds	r4, #7
 800ddb2:	f024 0307 	bic.w	r3, r4, #7
 800ddb6:	469b      	mov	fp, r3
 800ddb8:	685d      	ldr	r5, [r3, #4]
 800ddba:	f85b 4b08 	ldr.w	r4, [fp], #8
 800ddbe:	2d00      	cmp	r5, #0
 800ddc0:	da05      	bge.n	800ddce <_vfiprintf_r+0x356>
 800ddc2:	232d      	movs	r3, #45	; 0x2d
 800ddc4:	4264      	negs	r4, r4
 800ddc6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800ddca:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800ddce:	2301      	movs	r3, #1
 800ddd0:	e04a      	b.n	800de68 <_vfiprintf_r+0x3f0>
 800ddd2:	46a3      	mov	fp, r4
 800ddd4:	f01a 0f10 	tst.w	sl, #16
 800ddd8:	f85b 5b04 	ldr.w	r5, [fp], #4
 800dddc:	d002      	beq.n	800dde4 <_vfiprintf_r+0x36c>
 800ddde:	462c      	mov	r4, r5
 800dde0:	17ed      	asrs	r5, r5, #31
 800dde2:	e7ec      	b.n	800ddbe <_vfiprintf_r+0x346>
 800dde4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800dde8:	d003      	beq.n	800ddf2 <_vfiprintf_r+0x37a>
 800ddea:	b22c      	sxth	r4, r5
 800ddec:	f345 35c0 	sbfx	r5, r5, #15, #1
 800ddf0:	e7e5      	b.n	800ddbe <_vfiprintf_r+0x346>
 800ddf2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800ddf6:	d0f2      	beq.n	800ddde <_vfiprintf_r+0x366>
 800ddf8:	b26c      	sxtb	r4, r5
 800ddfa:	f345 15c0 	sbfx	r5, r5, #7, #1
 800ddfe:	e7de      	b.n	800ddbe <_vfiprintf_r+0x346>
 800de00:	f01a 0f20 	tst.w	sl, #32
 800de04:	f104 0b04 	add.w	fp, r4, #4
 800de08:	d007      	beq.n	800de1a <_vfiprintf_r+0x3a2>
 800de0a:	9a03      	ldr	r2, [sp, #12]
 800de0c:	6823      	ldr	r3, [r4, #0]
 800de0e:	9903      	ldr	r1, [sp, #12]
 800de10:	17d2      	asrs	r2, r2, #31
 800de12:	e9c3 1200 	strd	r1, r2, [r3]
 800de16:	465c      	mov	r4, fp
 800de18:	e68e      	b.n	800db38 <_vfiprintf_r+0xc0>
 800de1a:	f01a 0f10 	tst.w	sl, #16
 800de1e:	d003      	beq.n	800de28 <_vfiprintf_r+0x3b0>
 800de20:	6823      	ldr	r3, [r4, #0]
 800de22:	9a03      	ldr	r2, [sp, #12]
 800de24:	601a      	str	r2, [r3, #0]
 800de26:	e7f6      	b.n	800de16 <_vfiprintf_r+0x39e>
 800de28:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800de2c:	d003      	beq.n	800de36 <_vfiprintf_r+0x3be>
 800de2e:	6823      	ldr	r3, [r4, #0]
 800de30:	9a03      	ldr	r2, [sp, #12]
 800de32:	801a      	strh	r2, [r3, #0]
 800de34:	e7ef      	b.n	800de16 <_vfiprintf_r+0x39e>
 800de36:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800de3a:	d0f1      	beq.n	800de20 <_vfiprintf_r+0x3a8>
 800de3c:	6823      	ldr	r3, [r4, #0]
 800de3e:	9a03      	ldr	r2, [sp, #12]
 800de40:	701a      	strb	r2, [r3, #0]
 800de42:	e7e8      	b.n	800de16 <_vfiprintf_r+0x39e>
 800de44:	f04a 0a10 	orr.w	sl, sl, #16
 800de48:	f01a 0320 	ands.w	r3, sl, #32
 800de4c:	d01f      	beq.n	800de8e <_vfiprintf_r+0x416>
 800de4e:	3407      	adds	r4, #7
 800de50:	f024 0307 	bic.w	r3, r4, #7
 800de54:	469b      	mov	fp, r3
 800de56:	685d      	ldr	r5, [r3, #4]
 800de58:	f85b 4b08 	ldr.w	r4, [fp], #8
 800de5c:	2300      	movs	r3, #0
 800de5e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800de62:	2200      	movs	r2, #0
 800de64:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800de68:	9a01      	ldr	r2, [sp, #4]
 800de6a:	3201      	adds	r2, #1
 800de6c:	f000 8263 	beq.w	800e336 <_vfiprintf_r+0x8be>
 800de70:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800de74:	9205      	str	r2, [sp, #20]
 800de76:	ea54 0205 	orrs.w	r2, r4, r5
 800de7a:	f040 8262 	bne.w	800e342 <_vfiprintf_r+0x8ca>
 800de7e:	9a01      	ldr	r2, [sp, #4]
 800de80:	2a00      	cmp	r2, #0
 800de82:	f000 8199 	beq.w	800e1b8 <_vfiprintf_r+0x740>
 800de86:	2b01      	cmp	r3, #1
 800de88:	f040 825e 	bne.w	800e348 <_vfiprintf_r+0x8d0>
 800de8c:	e13a      	b.n	800e104 <_vfiprintf_r+0x68c>
 800de8e:	46a3      	mov	fp, r4
 800de90:	f01a 0510 	ands.w	r5, sl, #16
 800de94:	f85b 4b04 	ldr.w	r4, [fp], #4
 800de98:	d001      	beq.n	800de9e <_vfiprintf_r+0x426>
 800de9a:	461d      	mov	r5, r3
 800de9c:	e7de      	b.n	800de5c <_vfiprintf_r+0x3e4>
 800de9e:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800dea2:	d001      	beq.n	800dea8 <_vfiprintf_r+0x430>
 800dea4:	b2a4      	uxth	r4, r4
 800dea6:	e7d9      	b.n	800de5c <_vfiprintf_r+0x3e4>
 800dea8:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800deac:	d0d6      	beq.n	800de5c <_vfiprintf_r+0x3e4>
 800deae:	b2e4      	uxtb	r4, r4
 800deb0:	e7f3      	b.n	800de9a <_vfiprintf_r+0x422>
 800deb2:	2330      	movs	r3, #48	; 0x30
 800deb4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800deb8:	2378      	movs	r3, #120	; 0x78
 800deba:	46a3      	mov	fp, r4
 800debc:	2500      	movs	r5, #0
 800debe:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800dec2:	4b04      	ldr	r3, [pc, #16]	; (800ded4 <_vfiprintf_r+0x45c>)
 800dec4:	f85b 4b04 	ldr.w	r4, [fp], #4
 800dec8:	f04a 0a02 	orr.w	sl, sl, #2
 800decc:	9306      	str	r3, [sp, #24]
 800dece:	2302      	movs	r3, #2
 800ded0:	e7c7      	b.n	800de62 <_vfiprintf_r+0x3ea>
 800ded2:	bf00      	nop
 800ded4:	0800efbc 	.word	0x0800efbc
 800ded8:	46a3      	mov	fp, r4
 800deda:	2500      	movs	r5, #0
 800dedc:	9b01      	ldr	r3, [sp, #4]
 800dede:	f85b 8b04 	ldr.w	r8, [fp], #4
 800dee2:	1c5c      	adds	r4, r3, #1
 800dee4:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 800dee8:	f000 80ce 	beq.w	800e088 <_vfiprintf_r+0x610>
 800deec:	461a      	mov	r2, r3
 800deee:	4629      	mov	r1, r5
 800def0:	4640      	mov	r0, r8
 800def2:	f7fe ff65 	bl	800cdc0 <memchr>
 800def6:	2800      	cmp	r0, #0
 800def8:	f000 8173 	beq.w	800e1e2 <_vfiprintf_r+0x76a>
 800defc:	eba0 0308 	sub.w	r3, r0, r8
 800df00:	9301      	str	r3, [sp, #4]
 800df02:	9b01      	ldr	r3, [sp, #4]
 800df04:	42ab      	cmp	r3, r5
 800df06:	bfb8      	it	lt
 800df08:	462b      	movlt	r3, r5
 800df0a:	9305      	str	r3, [sp, #20]
 800df0c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800df10:	b113      	cbz	r3, 800df18 <_vfiprintf_r+0x4a0>
 800df12:	9b05      	ldr	r3, [sp, #20]
 800df14:	3301      	adds	r3, #1
 800df16:	9305      	str	r3, [sp, #20]
 800df18:	f01a 0302 	ands.w	r3, sl, #2
 800df1c:	930a      	str	r3, [sp, #40]	; 0x28
 800df1e:	bf1e      	ittt	ne
 800df20:	9b05      	ldrne	r3, [sp, #20]
 800df22:	3302      	addne	r3, #2
 800df24:	9305      	strne	r3, [sp, #20]
 800df26:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800df2a:	930b      	str	r3, [sp, #44]	; 0x2c
 800df2c:	d11f      	bne.n	800df6e <_vfiprintf_r+0x4f6>
 800df2e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800df32:	1a9c      	subs	r4, r3, r2
 800df34:	2c00      	cmp	r4, #0
 800df36:	dd1a      	ble.n	800df6e <_vfiprintf_r+0x4f6>
 800df38:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800df3c:	48aa      	ldr	r0, [pc, #680]	; (800e1e8 <_vfiprintf_r+0x770>)
 800df3e:	2c10      	cmp	r4, #16
 800df40:	f103 0301 	add.w	r3, r3, #1
 800df44:	f106 0108 	add.w	r1, r6, #8
 800df48:	6030      	str	r0, [r6, #0]
 800df4a:	f300 8153 	bgt.w	800e1f4 <_vfiprintf_r+0x77c>
 800df4e:	6074      	str	r4, [r6, #4]
 800df50:	2b07      	cmp	r3, #7
 800df52:	4414      	add	r4, r2
 800df54:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 800df58:	f340 815e 	ble.w	800e218 <_vfiprintf_r+0x7a0>
 800df5c:	4639      	mov	r1, r7
 800df5e:	4648      	mov	r0, r9
 800df60:	aa0e      	add	r2, sp, #56	; 0x38
 800df62:	f7ff fd57 	bl	800da14 <__sprint_r>
 800df66:	2800      	cmp	r0, #0
 800df68:	f040 81b7 	bne.w	800e2da <_vfiprintf_r+0x862>
 800df6c:	ae11      	add	r6, sp, #68	; 0x44
 800df6e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800df72:	b173      	cbz	r3, 800df92 <_vfiprintf_r+0x51a>
 800df74:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800df78:	6032      	str	r2, [r6, #0]
 800df7a:	2201      	movs	r2, #1
 800df7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df7e:	6072      	str	r2, [r6, #4]
 800df80:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800df82:	3301      	adds	r3, #1
 800df84:	3201      	adds	r2, #1
 800df86:	2b07      	cmp	r3, #7
 800df88:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800df8c:	f300 8146 	bgt.w	800e21c <_vfiprintf_r+0x7a4>
 800df90:	3608      	adds	r6, #8
 800df92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df94:	b16b      	cbz	r3, 800dfb2 <_vfiprintf_r+0x53a>
 800df96:	aa0d      	add	r2, sp, #52	; 0x34
 800df98:	6032      	str	r2, [r6, #0]
 800df9a:	2202      	movs	r2, #2
 800df9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df9e:	6072      	str	r2, [r6, #4]
 800dfa0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	3202      	adds	r2, #2
 800dfa6:	2b07      	cmp	r3, #7
 800dfa8:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800dfac:	f300 813f 	bgt.w	800e22e <_vfiprintf_r+0x7b6>
 800dfb0:	3608      	adds	r6, #8
 800dfb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfb4:	2b80      	cmp	r3, #128	; 0x80
 800dfb6:	d11f      	bne.n	800dff8 <_vfiprintf_r+0x580>
 800dfb8:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800dfbc:	1a9c      	subs	r4, r3, r2
 800dfbe:	2c00      	cmp	r4, #0
 800dfc0:	dd1a      	ble.n	800dff8 <_vfiprintf_r+0x580>
 800dfc2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800dfc6:	4889      	ldr	r0, [pc, #548]	; (800e1ec <_vfiprintf_r+0x774>)
 800dfc8:	2c10      	cmp	r4, #16
 800dfca:	f103 0301 	add.w	r3, r3, #1
 800dfce:	f106 0108 	add.w	r1, r6, #8
 800dfd2:	6030      	str	r0, [r6, #0]
 800dfd4:	f300 8134 	bgt.w	800e240 <_vfiprintf_r+0x7c8>
 800dfd8:	6074      	str	r4, [r6, #4]
 800dfda:	2b07      	cmp	r3, #7
 800dfdc:	4414      	add	r4, r2
 800dfde:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 800dfe2:	f340 813f 	ble.w	800e264 <_vfiprintf_r+0x7ec>
 800dfe6:	4639      	mov	r1, r7
 800dfe8:	4648      	mov	r0, r9
 800dfea:	aa0e      	add	r2, sp, #56	; 0x38
 800dfec:	f7ff fd12 	bl	800da14 <__sprint_r>
 800dff0:	2800      	cmp	r0, #0
 800dff2:	f040 8172 	bne.w	800e2da <_vfiprintf_r+0x862>
 800dff6:	ae11      	add	r6, sp, #68	; 0x44
 800dff8:	9b01      	ldr	r3, [sp, #4]
 800dffa:	1aec      	subs	r4, r5, r3
 800dffc:	2c00      	cmp	r4, #0
 800dffe:	dd1a      	ble.n	800e036 <_vfiprintf_r+0x5be>
 800e000:	4d7a      	ldr	r5, [pc, #488]	; (800e1ec <_vfiprintf_r+0x774>)
 800e002:	2c10      	cmp	r4, #16
 800e004:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
 800e008:	f106 0208 	add.w	r2, r6, #8
 800e00c:	f103 0301 	add.w	r3, r3, #1
 800e010:	6035      	str	r5, [r6, #0]
 800e012:	f300 8129 	bgt.w	800e268 <_vfiprintf_r+0x7f0>
 800e016:	6074      	str	r4, [r6, #4]
 800e018:	2b07      	cmp	r3, #7
 800e01a:	440c      	add	r4, r1
 800e01c:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 800e020:	f340 8133 	ble.w	800e28a <_vfiprintf_r+0x812>
 800e024:	4639      	mov	r1, r7
 800e026:	4648      	mov	r0, r9
 800e028:	aa0e      	add	r2, sp, #56	; 0x38
 800e02a:	f7ff fcf3 	bl	800da14 <__sprint_r>
 800e02e:	2800      	cmp	r0, #0
 800e030:	f040 8153 	bne.w	800e2da <_vfiprintf_r+0x862>
 800e034:	ae11      	add	r6, sp, #68	; 0x44
 800e036:	9b01      	ldr	r3, [sp, #4]
 800e038:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e03a:	6073      	str	r3, [r6, #4]
 800e03c:	4418      	add	r0, r3
 800e03e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e040:	f8c6 8000 	str.w	r8, [r6]
 800e044:	3301      	adds	r3, #1
 800e046:	2b07      	cmp	r3, #7
 800e048:	9010      	str	r0, [sp, #64]	; 0x40
 800e04a:	930f      	str	r3, [sp, #60]	; 0x3c
 800e04c:	f300 811f 	bgt.w	800e28e <_vfiprintf_r+0x816>
 800e050:	f106 0308 	add.w	r3, r6, #8
 800e054:	f01a 0f04 	tst.w	sl, #4
 800e058:	f040 8121 	bne.w	800e29e <_vfiprintf_r+0x826>
 800e05c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800e060:	9905      	ldr	r1, [sp, #20]
 800e062:	428a      	cmp	r2, r1
 800e064:	bfac      	ite	ge
 800e066:	189b      	addge	r3, r3, r2
 800e068:	185b      	addlt	r3, r3, r1
 800e06a:	9303      	str	r3, [sp, #12]
 800e06c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e06e:	b13b      	cbz	r3, 800e080 <_vfiprintf_r+0x608>
 800e070:	4639      	mov	r1, r7
 800e072:	4648      	mov	r0, r9
 800e074:	aa0e      	add	r2, sp, #56	; 0x38
 800e076:	f7ff fccd 	bl	800da14 <__sprint_r>
 800e07a:	2800      	cmp	r0, #0
 800e07c:	f040 812d 	bne.w	800e2da <_vfiprintf_r+0x862>
 800e080:	2300      	movs	r3, #0
 800e082:	ae11      	add	r6, sp, #68	; 0x44
 800e084:	930f      	str	r3, [sp, #60]	; 0x3c
 800e086:	e6c6      	b.n	800de16 <_vfiprintf_r+0x39e>
 800e088:	4640      	mov	r0, r8
 800e08a:	f7f2 f861 	bl	8000150 <strlen>
 800e08e:	9001      	str	r0, [sp, #4]
 800e090:	e737      	b.n	800df02 <_vfiprintf_r+0x48a>
 800e092:	f04a 0a10 	orr.w	sl, sl, #16
 800e096:	f01a 0320 	ands.w	r3, sl, #32
 800e09a:	d008      	beq.n	800e0ae <_vfiprintf_r+0x636>
 800e09c:	3407      	adds	r4, #7
 800e09e:	f024 0307 	bic.w	r3, r4, #7
 800e0a2:	469b      	mov	fp, r3
 800e0a4:	685d      	ldr	r5, [r3, #4]
 800e0a6:	f85b 4b08 	ldr.w	r4, [fp], #8
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	e6d9      	b.n	800de62 <_vfiprintf_r+0x3ea>
 800e0ae:	46a3      	mov	fp, r4
 800e0b0:	f01a 0510 	ands.w	r5, sl, #16
 800e0b4:	f85b 4b04 	ldr.w	r4, [fp], #4
 800e0b8:	d001      	beq.n	800e0be <_vfiprintf_r+0x646>
 800e0ba:	461d      	mov	r5, r3
 800e0bc:	e7f5      	b.n	800e0aa <_vfiprintf_r+0x632>
 800e0be:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800e0c2:	d001      	beq.n	800e0c8 <_vfiprintf_r+0x650>
 800e0c4:	b2a4      	uxth	r4, r4
 800e0c6:	e7f0      	b.n	800e0aa <_vfiprintf_r+0x632>
 800e0c8:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800e0cc:	d0ed      	beq.n	800e0aa <_vfiprintf_r+0x632>
 800e0ce:	b2e4      	uxtb	r4, r4
 800e0d0:	e7f3      	b.n	800e0ba <_vfiprintf_r+0x642>
 800e0d2:	4a47      	ldr	r2, [pc, #284]	; (800e1f0 <_vfiprintf_r+0x778>)
 800e0d4:	e5c6      	b.n	800dc64 <_vfiprintf_r+0x1ec>
 800e0d6:	46a3      	mov	fp, r4
 800e0d8:	f01a 0510 	ands.w	r5, sl, #16
 800e0dc:	f85b 4b04 	ldr.w	r4, [fp], #4
 800e0e0:	d001      	beq.n	800e0e6 <_vfiprintf_r+0x66e>
 800e0e2:	4615      	mov	r5, r2
 800e0e4:	e5ca      	b.n	800dc7c <_vfiprintf_r+0x204>
 800e0e6:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800e0ea:	d001      	beq.n	800e0f0 <_vfiprintf_r+0x678>
 800e0ec:	b2a4      	uxth	r4, r4
 800e0ee:	e5c5      	b.n	800dc7c <_vfiprintf_r+0x204>
 800e0f0:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800e0f4:	f43f adc2 	beq.w	800dc7c <_vfiprintf_r+0x204>
 800e0f8:	b2e4      	uxtb	r4, r4
 800e0fa:	e7f2      	b.n	800e0e2 <_vfiprintf_r+0x66a>
 800e0fc:	2c0a      	cmp	r4, #10
 800e0fe:	f175 0300 	sbcs.w	r3, r5, #0
 800e102:	d205      	bcs.n	800e110 <_vfiprintf_r+0x698>
 800e104:	3430      	adds	r4, #48	; 0x30
 800e106:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 800e10a:	f10d 08e7 	add.w	r8, sp, #231	; 0xe7
 800e10e:	e137      	b.n	800e380 <_vfiprintf_r+0x908>
 800e110:	f04f 0a00 	mov.w	sl, #0
 800e114:	ab3a      	add	r3, sp, #232	; 0xe8
 800e116:	930a      	str	r3, [sp, #40]	; 0x28
 800e118:	9b05      	ldr	r3, [sp, #20]
 800e11a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e11e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e122:	220a      	movs	r2, #10
 800e124:	4620      	mov	r0, r4
 800e126:	4629      	mov	r1, r5
 800e128:	f103 38ff 	add.w	r8, r3, #4294967295
 800e12c:	2300      	movs	r3, #0
 800e12e:	f7f2 fcab 	bl	8000a88 <__aeabi_uldivmod>
 800e132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e134:	3230      	adds	r2, #48	; 0x30
 800e136:	f803 2c01 	strb.w	r2, [r3, #-1]
 800e13a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e13c:	f10a 0a01 	add.w	sl, sl, #1
 800e140:	b1d3      	cbz	r3, 800e178 <_vfiprintf_r+0x700>
 800e142:	9b07      	ldr	r3, [sp, #28]
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	4553      	cmp	r3, sl
 800e148:	d116      	bne.n	800e178 <_vfiprintf_r+0x700>
 800e14a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800e14e:	d013      	beq.n	800e178 <_vfiprintf_r+0x700>
 800e150:	2c0a      	cmp	r4, #10
 800e152:	f175 0300 	sbcs.w	r3, r5, #0
 800e156:	d30f      	bcc.n	800e178 <_vfiprintf_r+0x700>
 800e158:	9b08      	ldr	r3, [sp, #32]
 800e15a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e15c:	eba8 0803 	sub.w	r8, r8, r3
 800e160:	461a      	mov	r2, r3
 800e162:	4640      	mov	r0, r8
 800e164:	f7ff f9a2 	bl	800d4ac <strncpy>
 800e168:	9b07      	ldr	r3, [sp, #28]
 800e16a:	785b      	ldrb	r3, [r3, #1]
 800e16c:	b1a3      	cbz	r3, 800e198 <_vfiprintf_r+0x720>
 800e16e:	f04f 0a00 	mov.w	sl, #0
 800e172:	9b07      	ldr	r3, [sp, #28]
 800e174:	3301      	adds	r3, #1
 800e176:	9307      	str	r3, [sp, #28]
 800e178:	2300      	movs	r3, #0
 800e17a:	220a      	movs	r2, #10
 800e17c:	4620      	mov	r0, r4
 800e17e:	4629      	mov	r1, r5
 800e180:	f7f2 fc82 	bl	8000a88 <__aeabi_uldivmod>
 800e184:	2c0a      	cmp	r4, #10
 800e186:	f175 0300 	sbcs.w	r3, r5, #0
 800e18a:	f0c0 80f9 	bcc.w	800e380 <_vfiprintf_r+0x908>
 800e18e:	4604      	mov	r4, r0
 800e190:	460d      	mov	r5, r1
 800e192:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800e196:	e7c3      	b.n	800e120 <_vfiprintf_r+0x6a8>
 800e198:	469a      	mov	sl, r3
 800e19a:	e7ed      	b.n	800e178 <_vfiprintf_r+0x700>
 800e19c:	9a06      	ldr	r2, [sp, #24]
 800e19e:	f004 030f 	and.w	r3, r4, #15
 800e1a2:	5cd3      	ldrb	r3, [r2, r3]
 800e1a4:	0924      	lsrs	r4, r4, #4
 800e1a6:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800e1aa:	092d      	lsrs	r5, r5, #4
 800e1ac:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800e1b0:	ea54 0305 	orrs.w	r3, r4, r5
 800e1b4:	d1f2      	bne.n	800e19c <_vfiprintf_r+0x724>
 800e1b6:	e0e3      	b.n	800e380 <_vfiprintf_r+0x908>
 800e1b8:	b933      	cbnz	r3, 800e1c8 <_vfiprintf_r+0x750>
 800e1ba:	f01a 0f01 	tst.w	sl, #1
 800e1be:	d003      	beq.n	800e1c8 <_vfiprintf_r+0x750>
 800e1c0:	2330      	movs	r3, #48	; 0x30
 800e1c2:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 800e1c6:	e7a0      	b.n	800e10a <_vfiprintf_r+0x692>
 800e1c8:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 800e1cc:	e0d8      	b.n	800e380 <_vfiprintf_r+0x908>
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	f000 80a4 	beq.w	800e31c <_vfiprintf_r+0x8a4>
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	46a3      	mov	fp, r4
 800e1d8:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800e1dc:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 800e1e0:	e5db      	b.n	800dd9a <_vfiprintf_r+0x322>
 800e1e2:	4605      	mov	r5, r0
 800e1e4:	e68d      	b.n	800df02 <_vfiprintf_r+0x48a>
 800e1e6:	bf00      	nop
 800e1e8:	0800f31a 	.word	0x0800f31a
 800e1ec:	0800f32a 	.word	0x0800f32a
 800e1f0:	0800efcd 	.word	0x0800efcd
 800e1f4:	2010      	movs	r0, #16
 800e1f6:	2b07      	cmp	r3, #7
 800e1f8:	4402      	add	r2, r0
 800e1fa:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800e1fe:	6070      	str	r0, [r6, #4]
 800e200:	dd07      	ble.n	800e212 <_vfiprintf_r+0x79a>
 800e202:	4639      	mov	r1, r7
 800e204:	4648      	mov	r0, r9
 800e206:	aa0e      	add	r2, sp, #56	; 0x38
 800e208:	f7ff fc04 	bl	800da14 <__sprint_r>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	d164      	bne.n	800e2da <_vfiprintf_r+0x862>
 800e210:	a911      	add	r1, sp, #68	; 0x44
 800e212:	460e      	mov	r6, r1
 800e214:	3c10      	subs	r4, #16
 800e216:	e68f      	b.n	800df38 <_vfiprintf_r+0x4c0>
 800e218:	460e      	mov	r6, r1
 800e21a:	e6a8      	b.n	800df6e <_vfiprintf_r+0x4f6>
 800e21c:	4639      	mov	r1, r7
 800e21e:	4648      	mov	r0, r9
 800e220:	aa0e      	add	r2, sp, #56	; 0x38
 800e222:	f7ff fbf7 	bl	800da14 <__sprint_r>
 800e226:	2800      	cmp	r0, #0
 800e228:	d157      	bne.n	800e2da <_vfiprintf_r+0x862>
 800e22a:	ae11      	add	r6, sp, #68	; 0x44
 800e22c:	e6b1      	b.n	800df92 <_vfiprintf_r+0x51a>
 800e22e:	4639      	mov	r1, r7
 800e230:	4648      	mov	r0, r9
 800e232:	aa0e      	add	r2, sp, #56	; 0x38
 800e234:	f7ff fbee 	bl	800da14 <__sprint_r>
 800e238:	2800      	cmp	r0, #0
 800e23a:	d14e      	bne.n	800e2da <_vfiprintf_r+0x862>
 800e23c:	ae11      	add	r6, sp, #68	; 0x44
 800e23e:	e6b8      	b.n	800dfb2 <_vfiprintf_r+0x53a>
 800e240:	2010      	movs	r0, #16
 800e242:	2b07      	cmp	r3, #7
 800e244:	4402      	add	r2, r0
 800e246:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800e24a:	6070      	str	r0, [r6, #4]
 800e24c:	dd07      	ble.n	800e25e <_vfiprintf_r+0x7e6>
 800e24e:	4639      	mov	r1, r7
 800e250:	4648      	mov	r0, r9
 800e252:	aa0e      	add	r2, sp, #56	; 0x38
 800e254:	f7ff fbde 	bl	800da14 <__sprint_r>
 800e258:	2800      	cmp	r0, #0
 800e25a:	d13e      	bne.n	800e2da <_vfiprintf_r+0x862>
 800e25c:	a911      	add	r1, sp, #68	; 0x44
 800e25e:	460e      	mov	r6, r1
 800e260:	3c10      	subs	r4, #16
 800e262:	e6ae      	b.n	800dfc2 <_vfiprintf_r+0x54a>
 800e264:	460e      	mov	r6, r1
 800e266:	e6c7      	b.n	800dff8 <_vfiprintf_r+0x580>
 800e268:	2010      	movs	r0, #16
 800e26a:	2b07      	cmp	r3, #7
 800e26c:	4401      	add	r1, r0
 800e26e:	e9cd 310f 	strd	r3, r1, [sp, #60]	; 0x3c
 800e272:	6070      	str	r0, [r6, #4]
 800e274:	dd06      	ble.n	800e284 <_vfiprintf_r+0x80c>
 800e276:	4639      	mov	r1, r7
 800e278:	4648      	mov	r0, r9
 800e27a:	aa0e      	add	r2, sp, #56	; 0x38
 800e27c:	f7ff fbca 	bl	800da14 <__sprint_r>
 800e280:	bb58      	cbnz	r0, 800e2da <_vfiprintf_r+0x862>
 800e282:	aa11      	add	r2, sp, #68	; 0x44
 800e284:	4616      	mov	r6, r2
 800e286:	3c10      	subs	r4, #16
 800e288:	e6bb      	b.n	800e002 <_vfiprintf_r+0x58a>
 800e28a:	4616      	mov	r6, r2
 800e28c:	e6d3      	b.n	800e036 <_vfiprintf_r+0x5be>
 800e28e:	4639      	mov	r1, r7
 800e290:	4648      	mov	r0, r9
 800e292:	aa0e      	add	r2, sp, #56	; 0x38
 800e294:	f7ff fbbe 	bl	800da14 <__sprint_r>
 800e298:	b9f8      	cbnz	r0, 800e2da <_vfiprintf_r+0x862>
 800e29a:	ab11      	add	r3, sp, #68	; 0x44
 800e29c:	e6da      	b.n	800e054 <_vfiprintf_r+0x5dc>
 800e29e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e2a2:	1a54      	subs	r4, r2, r1
 800e2a4:	2c00      	cmp	r4, #0
 800e2a6:	f77f aed9 	ble.w	800e05c <_vfiprintf_r+0x5e4>
 800e2aa:	2610      	movs	r6, #16
 800e2ac:	4d38      	ldr	r5, [pc, #224]	; (800e390 <_vfiprintf_r+0x918>)
 800e2ae:	2c10      	cmp	r4, #16
 800e2b0:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800e2b4:	601d      	str	r5, [r3, #0]
 800e2b6:	f102 0201 	add.w	r2, r2, #1
 800e2ba:	dc1d      	bgt.n	800e2f8 <_vfiprintf_r+0x880>
 800e2bc:	605c      	str	r4, [r3, #4]
 800e2be:	2a07      	cmp	r2, #7
 800e2c0:	440c      	add	r4, r1
 800e2c2:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800e2c6:	f77f aec9 	ble.w	800e05c <_vfiprintf_r+0x5e4>
 800e2ca:	4639      	mov	r1, r7
 800e2cc:	4648      	mov	r0, r9
 800e2ce:	aa0e      	add	r2, sp, #56	; 0x38
 800e2d0:	f7ff fba0 	bl	800da14 <__sprint_r>
 800e2d4:	2800      	cmp	r0, #0
 800e2d6:	f43f aec1 	beq.w	800e05c <_vfiprintf_r+0x5e4>
 800e2da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e2dc:	07d9      	lsls	r1, r3, #31
 800e2de:	d405      	bmi.n	800e2ec <_vfiprintf_r+0x874>
 800e2e0:	89bb      	ldrh	r3, [r7, #12]
 800e2e2:	059a      	lsls	r2, r3, #22
 800e2e4:	d402      	bmi.n	800e2ec <_vfiprintf_r+0x874>
 800e2e6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e2e8:	f7fe fd69 	bl	800cdbe <__retarget_lock_release_recursive>
 800e2ec:	89bb      	ldrh	r3, [r7, #12]
 800e2ee:	065b      	lsls	r3, r3, #25
 800e2f0:	f57f abf3 	bpl.w	800dada <_vfiprintf_r+0x62>
 800e2f4:	f7ff bbee 	b.w	800dad4 <_vfiprintf_r+0x5c>
 800e2f8:	3110      	adds	r1, #16
 800e2fa:	2a07      	cmp	r2, #7
 800e2fc:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800e300:	605e      	str	r6, [r3, #4]
 800e302:	dc02      	bgt.n	800e30a <_vfiprintf_r+0x892>
 800e304:	3308      	adds	r3, #8
 800e306:	3c10      	subs	r4, #16
 800e308:	e7d1      	b.n	800e2ae <_vfiprintf_r+0x836>
 800e30a:	4639      	mov	r1, r7
 800e30c:	4648      	mov	r0, r9
 800e30e:	aa0e      	add	r2, sp, #56	; 0x38
 800e310:	f7ff fb80 	bl	800da14 <__sprint_r>
 800e314:	2800      	cmp	r0, #0
 800e316:	d1e0      	bne.n	800e2da <_vfiprintf_r+0x862>
 800e318:	ab11      	add	r3, sp, #68	; 0x44
 800e31a:	e7f4      	b.n	800e306 <_vfiprintf_r+0x88e>
 800e31c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e31e:	b913      	cbnz	r3, 800e326 <_vfiprintf_r+0x8ae>
 800e320:	2300      	movs	r3, #0
 800e322:	930f      	str	r3, [sp, #60]	; 0x3c
 800e324:	e7d9      	b.n	800e2da <_vfiprintf_r+0x862>
 800e326:	4639      	mov	r1, r7
 800e328:	4648      	mov	r0, r9
 800e32a:	aa0e      	add	r2, sp, #56	; 0x38
 800e32c:	f7ff fb72 	bl	800da14 <__sprint_r>
 800e330:	2800      	cmp	r0, #0
 800e332:	d0f5      	beq.n	800e320 <_vfiprintf_r+0x8a8>
 800e334:	e7d1      	b.n	800e2da <_vfiprintf_r+0x862>
 800e336:	ea54 0205 	orrs.w	r2, r4, r5
 800e33a:	f8cd a014 	str.w	sl, [sp, #20]
 800e33e:	f43f ada2 	beq.w	800de86 <_vfiprintf_r+0x40e>
 800e342:	2b01      	cmp	r3, #1
 800e344:	f43f aeda 	beq.w	800e0fc <_vfiprintf_r+0x684>
 800e348:	2b02      	cmp	r3, #2
 800e34a:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 800e34e:	f43f af25 	beq.w	800e19c <_vfiprintf_r+0x724>
 800e352:	f004 0307 	and.w	r3, r4, #7
 800e356:	08e4      	lsrs	r4, r4, #3
 800e358:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800e35c:	08ed      	lsrs	r5, r5, #3
 800e35e:	3330      	adds	r3, #48	; 0x30
 800e360:	ea54 0105 	orrs.w	r1, r4, r5
 800e364:	4642      	mov	r2, r8
 800e366:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800e36a:	d1f2      	bne.n	800e352 <_vfiprintf_r+0x8da>
 800e36c:	9905      	ldr	r1, [sp, #20]
 800e36e:	07c8      	lsls	r0, r1, #31
 800e370:	d506      	bpl.n	800e380 <_vfiprintf_r+0x908>
 800e372:	2b30      	cmp	r3, #48	; 0x30
 800e374:	d004      	beq.n	800e380 <_vfiprintf_r+0x908>
 800e376:	2330      	movs	r3, #48	; 0x30
 800e378:	f808 3c01 	strb.w	r3, [r8, #-1]
 800e37c:	f1a2 0802 	sub.w	r8, r2, #2
 800e380:	ab3a      	add	r3, sp, #232	; 0xe8
 800e382:	eba3 0308 	sub.w	r3, r3, r8
 800e386:	9d01      	ldr	r5, [sp, #4]
 800e388:	f8dd a014 	ldr.w	sl, [sp, #20]
 800e38c:	9301      	str	r3, [sp, #4]
 800e38e:	e5b8      	b.n	800df02 <_vfiprintf_r+0x48a>
 800e390:	0800f31a 	.word	0x0800f31a

0800e394 <__sbprintf>:
 800e394:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e396:	461f      	mov	r7, r3
 800e398:	898b      	ldrh	r3, [r1, #12]
 800e39a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800e39e:	f023 0302 	bic.w	r3, r3, #2
 800e3a2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e3a6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e3a8:	4615      	mov	r5, r2
 800e3aa:	9319      	str	r3, [sp, #100]	; 0x64
 800e3ac:	89cb      	ldrh	r3, [r1, #14]
 800e3ae:	4606      	mov	r6, r0
 800e3b0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e3b4:	69cb      	ldr	r3, [r1, #28]
 800e3b6:	a816      	add	r0, sp, #88	; 0x58
 800e3b8:	9307      	str	r3, [sp, #28]
 800e3ba:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800e3bc:	460c      	mov	r4, r1
 800e3be:	9309      	str	r3, [sp, #36]	; 0x24
 800e3c0:	ab1a      	add	r3, sp, #104	; 0x68
 800e3c2:	9300      	str	r3, [sp, #0]
 800e3c4:	9304      	str	r3, [sp, #16]
 800e3c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3ca:	9302      	str	r3, [sp, #8]
 800e3cc:	9305      	str	r3, [sp, #20]
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	9306      	str	r3, [sp, #24]
 800e3d2:	f7fe fcf1 	bl	800cdb8 <__retarget_lock_init_recursive>
 800e3d6:	462a      	mov	r2, r5
 800e3d8:	463b      	mov	r3, r7
 800e3da:	4669      	mov	r1, sp
 800e3dc:	4630      	mov	r0, r6
 800e3de:	f7ff fb4b 	bl	800da78 <_vfiprintf_r>
 800e3e2:	1e05      	subs	r5, r0, #0
 800e3e4:	db07      	blt.n	800e3f6 <__sbprintf+0x62>
 800e3e6:	4669      	mov	r1, sp
 800e3e8:	4630      	mov	r0, r6
 800e3ea:	f000 f903 	bl	800e5f4 <_fflush_r>
 800e3ee:	2800      	cmp	r0, #0
 800e3f0:	bf18      	it	ne
 800e3f2:	f04f 35ff 	movne.w	r5, #4294967295
 800e3f6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e3fa:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e3fc:	065b      	lsls	r3, r3, #25
 800e3fe:	bf42      	ittt	mi
 800e400:	89a3      	ldrhmi	r3, [r4, #12]
 800e402:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800e406:	81a3      	strhmi	r3, [r4, #12]
 800e408:	f7fe fcd7 	bl	800cdba <__retarget_lock_close_recursive>
 800e40c:	4628      	mov	r0, r5
 800e40e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800e412:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e414 <__ascii_wctomb>:
 800e414:	4603      	mov	r3, r0
 800e416:	4608      	mov	r0, r1
 800e418:	b141      	cbz	r1, 800e42c <__ascii_wctomb+0x18>
 800e41a:	2aff      	cmp	r2, #255	; 0xff
 800e41c:	d904      	bls.n	800e428 <__ascii_wctomb+0x14>
 800e41e:	228a      	movs	r2, #138	; 0x8a
 800e420:	f04f 30ff 	mov.w	r0, #4294967295
 800e424:	601a      	str	r2, [r3, #0]
 800e426:	4770      	bx	lr
 800e428:	2001      	movs	r0, #1
 800e42a:	700a      	strb	r2, [r1, #0]
 800e42c:	4770      	bx	lr
	...

0800e430 <__swsetup_r>:
 800e430:	b538      	push	{r3, r4, r5, lr}
 800e432:	4b2a      	ldr	r3, [pc, #168]	; (800e4dc <__swsetup_r+0xac>)
 800e434:	4605      	mov	r5, r0
 800e436:	6818      	ldr	r0, [r3, #0]
 800e438:	460c      	mov	r4, r1
 800e43a:	b118      	cbz	r0, 800e444 <__swsetup_r+0x14>
 800e43c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e43e:	b90b      	cbnz	r3, 800e444 <__swsetup_r+0x14>
 800e440:	f000 f944 	bl	800e6cc <__sinit>
 800e444:	89a3      	ldrh	r3, [r4, #12]
 800e446:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e44a:	0718      	lsls	r0, r3, #28
 800e44c:	d422      	bmi.n	800e494 <__swsetup_r+0x64>
 800e44e:	06d9      	lsls	r1, r3, #27
 800e450:	d407      	bmi.n	800e462 <__swsetup_r+0x32>
 800e452:	2309      	movs	r3, #9
 800e454:	602b      	str	r3, [r5, #0]
 800e456:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e45a:	f04f 30ff 	mov.w	r0, #4294967295
 800e45e:	81a3      	strh	r3, [r4, #12]
 800e460:	e034      	b.n	800e4cc <__swsetup_r+0x9c>
 800e462:	0758      	lsls	r0, r3, #29
 800e464:	d512      	bpl.n	800e48c <__swsetup_r+0x5c>
 800e466:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e468:	b141      	cbz	r1, 800e47c <__swsetup_r+0x4c>
 800e46a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e46e:	4299      	cmp	r1, r3
 800e470:	d002      	beq.n	800e478 <__swsetup_r+0x48>
 800e472:	4628      	mov	r0, r5
 800e474:	f7fe fbdc 	bl	800cc30 <_free_r>
 800e478:	2300      	movs	r3, #0
 800e47a:	6323      	str	r3, [r4, #48]	; 0x30
 800e47c:	89a3      	ldrh	r3, [r4, #12]
 800e47e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e482:	81a3      	strh	r3, [r4, #12]
 800e484:	2300      	movs	r3, #0
 800e486:	6063      	str	r3, [r4, #4]
 800e488:	6923      	ldr	r3, [r4, #16]
 800e48a:	6023      	str	r3, [r4, #0]
 800e48c:	89a3      	ldrh	r3, [r4, #12]
 800e48e:	f043 0308 	orr.w	r3, r3, #8
 800e492:	81a3      	strh	r3, [r4, #12]
 800e494:	6923      	ldr	r3, [r4, #16]
 800e496:	b94b      	cbnz	r3, 800e4ac <__swsetup_r+0x7c>
 800e498:	89a3      	ldrh	r3, [r4, #12]
 800e49a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e49e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4a2:	d003      	beq.n	800e4ac <__swsetup_r+0x7c>
 800e4a4:	4621      	mov	r1, r4
 800e4a6:	4628      	mov	r0, r5
 800e4a8:	f000 fb36 	bl	800eb18 <__smakebuf_r>
 800e4ac:	89a0      	ldrh	r0, [r4, #12]
 800e4ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4b2:	f010 0301 	ands.w	r3, r0, #1
 800e4b6:	d00a      	beq.n	800e4ce <__swsetup_r+0x9e>
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	60a3      	str	r3, [r4, #8]
 800e4bc:	6963      	ldr	r3, [r4, #20]
 800e4be:	425b      	negs	r3, r3
 800e4c0:	61a3      	str	r3, [r4, #24]
 800e4c2:	6923      	ldr	r3, [r4, #16]
 800e4c4:	b943      	cbnz	r3, 800e4d8 <__swsetup_r+0xa8>
 800e4c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e4ca:	d1c4      	bne.n	800e456 <__swsetup_r+0x26>
 800e4cc:	bd38      	pop	{r3, r4, r5, pc}
 800e4ce:	0781      	lsls	r1, r0, #30
 800e4d0:	bf58      	it	pl
 800e4d2:	6963      	ldrpl	r3, [r4, #20]
 800e4d4:	60a3      	str	r3, [r4, #8]
 800e4d6:	e7f4      	b.n	800e4c2 <__swsetup_r+0x92>
 800e4d8:	2000      	movs	r0, #0
 800e4da:	e7f7      	b.n	800e4cc <__swsetup_r+0x9c>
 800e4dc:	2000000c 	.word	0x2000000c

0800e4e0 <__sflush_r>:
 800e4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4e2:	898b      	ldrh	r3, [r1, #12]
 800e4e4:	4605      	mov	r5, r0
 800e4e6:	0718      	lsls	r0, r3, #28
 800e4e8:	460c      	mov	r4, r1
 800e4ea:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e4ee:	d45e      	bmi.n	800e5ae <__sflush_r+0xce>
 800e4f0:	684b      	ldr	r3, [r1, #4]
 800e4f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	818a      	strh	r2, [r1, #12]
 800e4fa:	dc04      	bgt.n	800e506 <__sflush_r+0x26>
 800e4fc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	dc01      	bgt.n	800e506 <__sflush_r+0x26>
 800e502:	2000      	movs	r0, #0
 800e504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e508:	2e00      	cmp	r6, #0
 800e50a:	d0fa      	beq.n	800e502 <__sflush_r+0x22>
 800e50c:	2300      	movs	r3, #0
 800e50e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e512:	682f      	ldr	r7, [r5, #0]
 800e514:	602b      	str	r3, [r5, #0]
 800e516:	d036      	beq.n	800e586 <__sflush_r+0xa6>
 800e518:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e51a:	89a3      	ldrh	r3, [r4, #12]
 800e51c:	075a      	lsls	r2, r3, #29
 800e51e:	d505      	bpl.n	800e52c <__sflush_r+0x4c>
 800e520:	6863      	ldr	r3, [r4, #4]
 800e522:	1ac0      	subs	r0, r0, r3
 800e524:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e526:	b10b      	cbz	r3, 800e52c <__sflush_r+0x4c>
 800e528:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e52a:	1ac0      	subs	r0, r0, r3
 800e52c:	2300      	movs	r3, #0
 800e52e:	4602      	mov	r2, r0
 800e530:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e532:	4628      	mov	r0, r5
 800e534:	69e1      	ldr	r1, [r4, #28]
 800e536:	47b0      	blx	r6
 800e538:	1c43      	adds	r3, r0, #1
 800e53a:	89a3      	ldrh	r3, [r4, #12]
 800e53c:	d106      	bne.n	800e54c <__sflush_r+0x6c>
 800e53e:	6829      	ldr	r1, [r5, #0]
 800e540:	291d      	cmp	r1, #29
 800e542:	d830      	bhi.n	800e5a6 <__sflush_r+0xc6>
 800e544:	4a2a      	ldr	r2, [pc, #168]	; (800e5f0 <__sflush_r+0x110>)
 800e546:	40ca      	lsrs	r2, r1
 800e548:	07d6      	lsls	r6, r2, #31
 800e54a:	d52c      	bpl.n	800e5a6 <__sflush_r+0xc6>
 800e54c:	2200      	movs	r2, #0
 800e54e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e552:	b21b      	sxth	r3, r3
 800e554:	6062      	str	r2, [r4, #4]
 800e556:	6922      	ldr	r2, [r4, #16]
 800e558:	04d9      	lsls	r1, r3, #19
 800e55a:	81a3      	strh	r3, [r4, #12]
 800e55c:	6022      	str	r2, [r4, #0]
 800e55e:	d504      	bpl.n	800e56a <__sflush_r+0x8a>
 800e560:	1c42      	adds	r2, r0, #1
 800e562:	d101      	bne.n	800e568 <__sflush_r+0x88>
 800e564:	682b      	ldr	r3, [r5, #0]
 800e566:	b903      	cbnz	r3, 800e56a <__sflush_r+0x8a>
 800e568:	6520      	str	r0, [r4, #80]	; 0x50
 800e56a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e56c:	602f      	str	r7, [r5, #0]
 800e56e:	2900      	cmp	r1, #0
 800e570:	d0c7      	beq.n	800e502 <__sflush_r+0x22>
 800e572:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e576:	4299      	cmp	r1, r3
 800e578:	d002      	beq.n	800e580 <__sflush_r+0xa0>
 800e57a:	4628      	mov	r0, r5
 800e57c:	f7fe fb58 	bl	800cc30 <_free_r>
 800e580:	2000      	movs	r0, #0
 800e582:	6320      	str	r0, [r4, #48]	; 0x30
 800e584:	e7be      	b.n	800e504 <__sflush_r+0x24>
 800e586:	69e1      	ldr	r1, [r4, #28]
 800e588:	2301      	movs	r3, #1
 800e58a:	4628      	mov	r0, r5
 800e58c:	47b0      	blx	r6
 800e58e:	1c41      	adds	r1, r0, #1
 800e590:	d1c3      	bne.n	800e51a <__sflush_r+0x3a>
 800e592:	682b      	ldr	r3, [r5, #0]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d0c0      	beq.n	800e51a <__sflush_r+0x3a>
 800e598:	2b1d      	cmp	r3, #29
 800e59a:	d001      	beq.n	800e5a0 <__sflush_r+0xc0>
 800e59c:	2b16      	cmp	r3, #22
 800e59e:	d101      	bne.n	800e5a4 <__sflush_r+0xc4>
 800e5a0:	602f      	str	r7, [r5, #0]
 800e5a2:	e7ae      	b.n	800e502 <__sflush_r+0x22>
 800e5a4:	89a3      	ldrh	r3, [r4, #12]
 800e5a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5aa:	81a3      	strh	r3, [r4, #12]
 800e5ac:	e7aa      	b.n	800e504 <__sflush_r+0x24>
 800e5ae:	690f      	ldr	r7, [r1, #16]
 800e5b0:	2f00      	cmp	r7, #0
 800e5b2:	d0a6      	beq.n	800e502 <__sflush_r+0x22>
 800e5b4:	079b      	lsls	r3, r3, #30
 800e5b6:	bf18      	it	ne
 800e5b8:	2300      	movne	r3, #0
 800e5ba:	680e      	ldr	r6, [r1, #0]
 800e5bc:	bf08      	it	eq
 800e5be:	694b      	ldreq	r3, [r1, #20]
 800e5c0:	1bf6      	subs	r6, r6, r7
 800e5c2:	600f      	str	r7, [r1, #0]
 800e5c4:	608b      	str	r3, [r1, #8]
 800e5c6:	2e00      	cmp	r6, #0
 800e5c8:	dd9b      	ble.n	800e502 <__sflush_r+0x22>
 800e5ca:	4633      	mov	r3, r6
 800e5cc:	463a      	mov	r2, r7
 800e5ce:	4628      	mov	r0, r5
 800e5d0:	69e1      	ldr	r1, [r4, #28]
 800e5d2:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800e5d6:	47e0      	blx	ip
 800e5d8:	2800      	cmp	r0, #0
 800e5da:	dc06      	bgt.n	800e5ea <__sflush_r+0x10a>
 800e5dc:	89a3      	ldrh	r3, [r4, #12]
 800e5de:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5e6:	81a3      	strh	r3, [r4, #12]
 800e5e8:	e78c      	b.n	800e504 <__sflush_r+0x24>
 800e5ea:	4407      	add	r7, r0
 800e5ec:	1a36      	subs	r6, r6, r0
 800e5ee:	e7ea      	b.n	800e5c6 <__sflush_r+0xe6>
 800e5f0:	20400001 	.word	0x20400001

0800e5f4 <_fflush_r>:
 800e5f4:	b538      	push	{r3, r4, r5, lr}
 800e5f6:	460c      	mov	r4, r1
 800e5f8:	4605      	mov	r5, r0
 800e5fa:	b118      	cbz	r0, 800e604 <_fflush_r+0x10>
 800e5fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e5fe:	b90b      	cbnz	r3, 800e604 <_fflush_r+0x10>
 800e600:	f000 f864 	bl	800e6cc <__sinit>
 800e604:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800e608:	b1b8      	cbz	r0, 800e63a <_fflush_r+0x46>
 800e60a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e60c:	07db      	lsls	r3, r3, #31
 800e60e:	d404      	bmi.n	800e61a <_fflush_r+0x26>
 800e610:	0581      	lsls	r1, r0, #22
 800e612:	d402      	bmi.n	800e61a <_fflush_r+0x26>
 800e614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e616:	f7fe fbd1 	bl	800cdbc <__retarget_lock_acquire_recursive>
 800e61a:	4628      	mov	r0, r5
 800e61c:	4621      	mov	r1, r4
 800e61e:	f7ff ff5f 	bl	800e4e0 <__sflush_r>
 800e622:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e624:	4605      	mov	r5, r0
 800e626:	07da      	lsls	r2, r3, #31
 800e628:	d405      	bmi.n	800e636 <_fflush_r+0x42>
 800e62a:	89a3      	ldrh	r3, [r4, #12]
 800e62c:	059b      	lsls	r3, r3, #22
 800e62e:	d402      	bmi.n	800e636 <_fflush_r+0x42>
 800e630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e632:	f7fe fbc4 	bl	800cdbe <__retarget_lock_release_recursive>
 800e636:	4628      	mov	r0, r5
 800e638:	bd38      	pop	{r3, r4, r5, pc}
 800e63a:	4605      	mov	r5, r0
 800e63c:	e7fb      	b.n	800e636 <_fflush_r+0x42>
	...

0800e640 <std>:
 800e640:	2300      	movs	r3, #0
 800e642:	b510      	push	{r4, lr}
 800e644:	4604      	mov	r4, r0
 800e646:	e9c0 3300 	strd	r3, r3, [r0]
 800e64a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e64e:	6083      	str	r3, [r0, #8]
 800e650:	8181      	strh	r1, [r0, #12]
 800e652:	6643      	str	r3, [r0, #100]	; 0x64
 800e654:	81c2      	strh	r2, [r0, #14]
 800e656:	6183      	str	r3, [r0, #24]
 800e658:	4619      	mov	r1, r3
 800e65a:	2208      	movs	r2, #8
 800e65c:	305c      	adds	r0, #92	; 0x5c
 800e65e:	f7fc f901 	bl	800a864 <memset>
 800e662:	4b07      	ldr	r3, [pc, #28]	; (800e680 <std+0x40>)
 800e664:	61e4      	str	r4, [r4, #28]
 800e666:	6223      	str	r3, [r4, #32]
 800e668:	4b06      	ldr	r3, [pc, #24]	; (800e684 <std+0x44>)
 800e66a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e66e:	6263      	str	r3, [r4, #36]	; 0x24
 800e670:	4b05      	ldr	r3, [pc, #20]	; (800e688 <std+0x48>)
 800e672:	62a3      	str	r3, [r4, #40]	; 0x28
 800e674:	4b05      	ldr	r3, [pc, #20]	; (800e68c <std+0x4c>)
 800e676:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e67c:	f7fe bb9c 	b.w	800cdb8 <__retarget_lock_init_recursive>
 800e680:	0800eb99 	.word	0x0800eb99
 800e684:	0800ebbb 	.word	0x0800ebbb
 800e688:	0800ebf3 	.word	0x0800ebf3
 800e68c:	0800ec17 	.word	0x0800ec17

0800e690 <_cleanup_r>:
 800e690:	4901      	ldr	r1, [pc, #4]	; (800e698 <_cleanup_r+0x8>)
 800e692:	f000 b9f5 	b.w	800ea80 <_fwalk_reent>
 800e696:	bf00      	nop
 800e698:	0800ed21 	.word	0x0800ed21

0800e69c <__sfp_lock_acquire>:
 800e69c:	4801      	ldr	r0, [pc, #4]	; (800e6a4 <__sfp_lock_acquire+0x8>)
 800e69e:	f7fe bb8d 	b.w	800cdbc <__retarget_lock_acquire_recursive>
 800e6a2:	bf00      	nop
 800e6a4:	20000d22 	.word	0x20000d22

0800e6a8 <__sfp_lock_release>:
 800e6a8:	4801      	ldr	r0, [pc, #4]	; (800e6b0 <__sfp_lock_release+0x8>)
 800e6aa:	f7fe bb88 	b.w	800cdbe <__retarget_lock_release_recursive>
 800e6ae:	bf00      	nop
 800e6b0:	20000d22 	.word	0x20000d22

0800e6b4 <__sinit_lock_acquire>:
 800e6b4:	4801      	ldr	r0, [pc, #4]	; (800e6bc <__sinit_lock_acquire+0x8>)
 800e6b6:	f7fe bb81 	b.w	800cdbc <__retarget_lock_acquire_recursive>
 800e6ba:	bf00      	nop
 800e6bc:	20000d23 	.word	0x20000d23

0800e6c0 <__sinit_lock_release>:
 800e6c0:	4801      	ldr	r0, [pc, #4]	; (800e6c8 <__sinit_lock_release+0x8>)
 800e6c2:	f7fe bb7c 	b.w	800cdbe <__retarget_lock_release_recursive>
 800e6c6:	bf00      	nop
 800e6c8:	20000d23 	.word	0x20000d23

0800e6cc <__sinit>:
 800e6cc:	b510      	push	{r4, lr}
 800e6ce:	4604      	mov	r4, r0
 800e6d0:	f7ff fff0 	bl	800e6b4 <__sinit_lock_acquire>
 800e6d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e6d6:	b11a      	cbz	r2, 800e6e0 <__sinit+0x14>
 800e6d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6dc:	f7ff bff0 	b.w	800e6c0 <__sinit_lock_release>
 800e6e0:	4b0d      	ldr	r3, [pc, #52]	; (800e718 <__sinit+0x4c>)
 800e6e2:	2104      	movs	r1, #4
 800e6e4:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e6e6:	2303      	movs	r3, #3
 800e6e8:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800e6ec:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800e6f0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800e6f4:	6860      	ldr	r0, [r4, #4]
 800e6f6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800e6fa:	f7ff ffa1 	bl	800e640 <std>
 800e6fe:	2201      	movs	r2, #1
 800e700:	2109      	movs	r1, #9
 800e702:	68a0      	ldr	r0, [r4, #8]
 800e704:	f7ff ff9c 	bl	800e640 <std>
 800e708:	2202      	movs	r2, #2
 800e70a:	2112      	movs	r1, #18
 800e70c:	68e0      	ldr	r0, [r4, #12]
 800e70e:	f7ff ff97 	bl	800e640 <std>
 800e712:	2301      	movs	r3, #1
 800e714:	63a3      	str	r3, [r4, #56]	; 0x38
 800e716:	e7df      	b.n	800e6d8 <__sinit+0xc>
 800e718:	0800e691 	.word	0x0800e691

0800e71c <__fputwc>:
 800e71c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e720:	4680      	mov	r8, r0
 800e722:	460e      	mov	r6, r1
 800e724:	4615      	mov	r5, r2
 800e726:	f7fe ffb5 	bl	800d694 <__locale_mb_cur_max>
 800e72a:	2801      	cmp	r0, #1
 800e72c:	4604      	mov	r4, r0
 800e72e:	d11b      	bne.n	800e768 <__fputwc+0x4c>
 800e730:	1e73      	subs	r3, r6, #1
 800e732:	2bfe      	cmp	r3, #254	; 0xfe
 800e734:	d818      	bhi.n	800e768 <__fputwc+0x4c>
 800e736:	f88d 6004 	strb.w	r6, [sp, #4]
 800e73a:	2700      	movs	r7, #0
 800e73c:	f10d 0904 	add.w	r9, sp, #4
 800e740:	42a7      	cmp	r7, r4
 800e742:	d020      	beq.n	800e786 <__fputwc+0x6a>
 800e744:	68ab      	ldr	r3, [r5, #8]
 800e746:	f817 1009 	ldrb.w	r1, [r7, r9]
 800e74a:	3b01      	subs	r3, #1
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	60ab      	str	r3, [r5, #8]
 800e750:	da04      	bge.n	800e75c <__fputwc+0x40>
 800e752:	69aa      	ldr	r2, [r5, #24]
 800e754:	4293      	cmp	r3, r2
 800e756:	db1a      	blt.n	800e78e <__fputwc+0x72>
 800e758:	290a      	cmp	r1, #10
 800e75a:	d018      	beq.n	800e78e <__fputwc+0x72>
 800e75c:	682b      	ldr	r3, [r5, #0]
 800e75e:	1c5a      	adds	r2, r3, #1
 800e760:	602a      	str	r2, [r5, #0]
 800e762:	7019      	strb	r1, [r3, #0]
 800e764:	3701      	adds	r7, #1
 800e766:	e7eb      	b.n	800e740 <__fputwc+0x24>
 800e768:	4632      	mov	r2, r6
 800e76a:	4640      	mov	r0, r8
 800e76c:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800e770:	a901      	add	r1, sp, #4
 800e772:	f000 fa9d 	bl	800ecb0 <_wcrtomb_r>
 800e776:	1c42      	adds	r2, r0, #1
 800e778:	4604      	mov	r4, r0
 800e77a:	d1de      	bne.n	800e73a <__fputwc+0x1e>
 800e77c:	4606      	mov	r6, r0
 800e77e:	89ab      	ldrh	r3, [r5, #12]
 800e780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e784:	81ab      	strh	r3, [r5, #12]
 800e786:	4630      	mov	r0, r6
 800e788:	b003      	add	sp, #12
 800e78a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e78e:	462a      	mov	r2, r5
 800e790:	4640      	mov	r0, r8
 800e792:	f000 fa44 	bl	800ec1e <__swbuf_r>
 800e796:	1c43      	adds	r3, r0, #1
 800e798:	d1e4      	bne.n	800e764 <__fputwc+0x48>
 800e79a:	4606      	mov	r6, r0
 800e79c:	e7f3      	b.n	800e786 <__fputwc+0x6a>

0800e79e <_fputwc_r>:
 800e79e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800e7a0:	b570      	push	{r4, r5, r6, lr}
 800e7a2:	07db      	lsls	r3, r3, #31
 800e7a4:	4605      	mov	r5, r0
 800e7a6:	460e      	mov	r6, r1
 800e7a8:	4614      	mov	r4, r2
 800e7aa:	d405      	bmi.n	800e7b8 <_fputwc_r+0x1a>
 800e7ac:	8993      	ldrh	r3, [r2, #12]
 800e7ae:	0598      	lsls	r0, r3, #22
 800e7b0:	d402      	bmi.n	800e7b8 <_fputwc_r+0x1a>
 800e7b2:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800e7b4:	f7fe fb02 	bl	800cdbc <__retarget_lock_acquire_recursive>
 800e7b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7bc:	0499      	lsls	r1, r3, #18
 800e7be:	d406      	bmi.n	800e7ce <_fputwc_r+0x30>
 800e7c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e7c4:	81a3      	strh	r3, [r4, #12]
 800e7c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e7cc:	6663      	str	r3, [r4, #100]	; 0x64
 800e7ce:	4622      	mov	r2, r4
 800e7d0:	4628      	mov	r0, r5
 800e7d2:	4631      	mov	r1, r6
 800e7d4:	f7ff ffa2 	bl	800e71c <__fputwc>
 800e7d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7da:	4605      	mov	r5, r0
 800e7dc:	07da      	lsls	r2, r3, #31
 800e7de:	d405      	bmi.n	800e7ec <_fputwc_r+0x4e>
 800e7e0:	89a3      	ldrh	r3, [r4, #12]
 800e7e2:	059b      	lsls	r3, r3, #22
 800e7e4:	d402      	bmi.n	800e7ec <_fputwc_r+0x4e>
 800e7e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7e8:	f7fe fae9 	bl	800cdbe <__retarget_lock_release_recursive>
 800e7ec:	4628      	mov	r0, r5
 800e7ee:	bd70      	pop	{r4, r5, r6, pc}

0800e7f0 <__sfvwrite_r>:
 800e7f0:	6893      	ldr	r3, [r2, #8]
 800e7f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f6:	4606      	mov	r6, r0
 800e7f8:	460c      	mov	r4, r1
 800e7fa:	4690      	mov	r8, r2
 800e7fc:	b91b      	cbnz	r3, 800e806 <__sfvwrite_r+0x16>
 800e7fe:	2000      	movs	r0, #0
 800e800:	b003      	add	sp, #12
 800e802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e806:	898b      	ldrh	r3, [r1, #12]
 800e808:	0718      	lsls	r0, r3, #28
 800e80a:	d550      	bpl.n	800e8ae <__sfvwrite_r+0xbe>
 800e80c:	690b      	ldr	r3, [r1, #16]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d04d      	beq.n	800e8ae <__sfvwrite_r+0xbe>
 800e812:	89a3      	ldrh	r3, [r4, #12]
 800e814:	f8d8 7000 	ldr.w	r7, [r8]
 800e818:	f013 0902 	ands.w	r9, r3, #2
 800e81c:	d16b      	bne.n	800e8f6 <__sfvwrite_r+0x106>
 800e81e:	f013 0301 	ands.w	r3, r3, #1
 800e822:	f000 809b 	beq.w	800e95c <__sfvwrite_r+0x16c>
 800e826:	4648      	mov	r0, r9
 800e828:	46ca      	mov	sl, r9
 800e82a:	46cb      	mov	fp, r9
 800e82c:	f1bb 0f00 	cmp.w	fp, #0
 800e830:	f000 8102 	beq.w	800ea38 <__sfvwrite_r+0x248>
 800e834:	b950      	cbnz	r0, 800e84c <__sfvwrite_r+0x5c>
 800e836:	465a      	mov	r2, fp
 800e838:	210a      	movs	r1, #10
 800e83a:	4650      	mov	r0, sl
 800e83c:	f7fe fac0 	bl	800cdc0 <memchr>
 800e840:	2800      	cmp	r0, #0
 800e842:	f000 80fe 	beq.w	800ea42 <__sfvwrite_r+0x252>
 800e846:	3001      	adds	r0, #1
 800e848:	eba0 090a 	sub.w	r9, r0, sl
 800e84c:	6820      	ldr	r0, [r4, #0]
 800e84e:	6921      	ldr	r1, [r4, #16]
 800e850:	45d9      	cmp	r9, fp
 800e852:	464a      	mov	r2, r9
 800e854:	bf28      	it	cs
 800e856:	465a      	movcs	r2, fp
 800e858:	4288      	cmp	r0, r1
 800e85a:	6963      	ldr	r3, [r4, #20]
 800e85c:	f240 80f4 	bls.w	800ea48 <__sfvwrite_r+0x258>
 800e860:	68a5      	ldr	r5, [r4, #8]
 800e862:	441d      	add	r5, r3
 800e864:	42aa      	cmp	r2, r5
 800e866:	f340 80ef 	ble.w	800ea48 <__sfvwrite_r+0x258>
 800e86a:	4651      	mov	r1, sl
 800e86c:	462a      	mov	r2, r5
 800e86e:	f7fb ffdf 	bl	800a830 <memmove>
 800e872:	6823      	ldr	r3, [r4, #0]
 800e874:	4621      	mov	r1, r4
 800e876:	442b      	add	r3, r5
 800e878:	4630      	mov	r0, r6
 800e87a:	6023      	str	r3, [r4, #0]
 800e87c:	f7ff feba 	bl	800e5f4 <_fflush_r>
 800e880:	2800      	cmp	r0, #0
 800e882:	d166      	bne.n	800e952 <__sfvwrite_r+0x162>
 800e884:	ebb9 0905 	subs.w	r9, r9, r5
 800e888:	f040 80f6 	bne.w	800ea78 <__sfvwrite_r+0x288>
 800e88c:	4621      	mov	r1, r4
 800e88e:	4630      	mov	r0, r6
 800e890:	f7ff feb0 	bl	800e5f4 <_fflush_r>
 800e894:	2800      	cmp	r0, #0
 800e896:	d15c      	bne.n	800e952 <__sfvwrite_r+0x162>
 800e898:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800e89c:	44aa      	add	sl, r5
 800e89e:	ebab 0b05 	sub.w	fp, fp, r5
 800e8a2:	1b55      	subs	r5, r2, r5
 800e8a4:	f8c8 5008 	str.w	r5, [r8, #8]
 800e8a8:	2d00      	cmp	r5, #0
 800e8aa:	d1bf      	bne.n	800e82c <__sfvwrite_r+0x3c>
 800e8ac:	e7a7      	b.n	800e7fe <__sfvwrite_r+0xe>
 800e8ae:	4621      	mov	r1, r4
 800e8b0:	4630      	mov	r0, r6
 800e8b2:	f7ff fdbd 	bl	800e430 <__swsetup_r>
 800e8b6:	2800      	cmp	r0, #0
 800e8b8:	d0ab      	beq.n	800e812 <__sfvwrite_r+0x22>
 800e8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e8be:	e79f      	b.n	800e800 <__sfvwrite_r+0x10>
 800e8c0:	e9d7 b500 	ldrd	fp, r5, [r7]
 800e8c4:	3708      	adds	r7, #8
 800e8c6:	2d00      	cmp	r5, #0
 800e8c8:	d0fa      	beq.n	800e8c0 <__sfvwrite_r+0xd0>
 800e8ca:	4555      	cmp	r5, sl
 800e8cc:	462b      	mov	r3, r5
 800e8ce:	465a      	mov	r2, fp
 800e8d0:	bf28      	it	cs
 800e8d2:	4653      	movcs	r3, sl
 800e8d4:	4630      	mov	r0, r6
 800e8d6:	69e1      	ldr	r1, [r4, #28]
 800e8d8:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800e8dc:	47e0      	blx	ip
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	dd37      	ble.n	800e952 <__sfvwrite_r+0x162>
 800e8e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e8e6:	4483      	add	fp, r0
 800e8e8:	1a2d      	subs	r5, r5, r0
 800e8ea:	1a18      	subs	r0, r3, r0
 800e8ec:	f8c8 0008 	str.w	r0, [r8, #8]
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	d1e8      	bne.n	800e8c6 <__sfvwrite_r+0xd6>
 800e8f4:	e783      	b.n	800e7fe <__sfvwrite_r+0xe>
 800e8f6:	f04f 0b00 	mov.w	fp, #0
 800e8fa:	f8df a180 	ldr.w	sl, [pc, #384]	; 800ea7c <__sfvwrite_r+0x28c>
 800e8fe:	465d      	mov	r5, fp
 800e900:	e7e1      	b.n	800e8c6 <__sfvwrite_r+0xd6>
 800e902:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800e906:	3708      	adds	r7, #8
 800e908:	f1ba 0f00 	cmp.w	sl, #0
 800e90c:	d0f9      	beq.n	800e902 <__sfvwrite_r+0x112>
 800e90e:	89a3      	ldrh	r3, [r4, #12]
 800e910:	6820      	ldr	r0, [r4, #0]
 800e912:	0599      	lsls	r1, r3, #22
 800e914:	68a2      	ldr	r2, [r4, #8]
 800e916:	d563      	bpl.n	800e9e0 <__sfvwrite_r+0x1f0>
 800e918:	4552      	cmp	r2, sl
 800e91a:	d836      	bhi.n	800e98a <__sfvwrite_r+0x19a>
 800e91c:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800e920:	d033      	beq.n	800e98a <__sfvwrite_r+0x19a>
 800e922:	6921      	ldr	r1, [r4, #16]
 800e924:	6965      	ldr	r5, [r4, #20]
 800e926:	eba0 0b01 	sub.w	fp, r0, r1
 800e92a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e92e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e932:	f10b 0201 	add.w	r2, fp, #1
 800e936:	106d      	asrs	r5, r5, #1
 800e938:	4452      	add	r2, sl
 800e93a:	4295      	cmp	r5, r2
 800e93c:	bf38      	it	cc
 800e93e:	4615      	movcc	r5, r2
 800e940:	055b      	lsls	r3, r3, #21
 800e942:	d53d      	bpl.n	800e9c0 <__sfvwrite_r+0x1d0>
 800e944:	4629      	mov	r1, r5
 800e946:	4630      	mov	r0, r6
 800e948:	f7fb fd18 	bl	800a37c <_malloc_r>
 800e94c:	b948      	cbnz	r0, 800e962 <__sfvwrite_r+0x172>
 800e94e:	230c      	movs	r3, #12
 800e950:	6033      	str	r3, [r6, #0]
 800e952:	89a3      	ldrh	r3, [r4, #12]
 800e954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e958:	81a3      	strh	r3, [r4, #12]
 800e95a:	e7ae      	b.n	800e8ba <__sfvwrite_r+0xca>
 800e95c:	4699      	mov	r9, r3
 800e95e:	469a      	mov	sl, r3
 800e960:	e7d2      	b.n	800e908 <__sfvwrite_r+0x118>
 800e962:	465a      	mov	r2, fp
 800e964:	6921      	ldr	r1, [r4, #16]
 800e966:	9001      	str	r0, [sp, #4]
 800e968:	f7fb ff54 	bl	800a814 <memcpy>
 800e96c:	89a2      	ldrh	r2, [r4, #12]
 800e96e:	9b01      	ldr	r3, [sp, #4]
 800e970:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800e974:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e978:	81a2      	strh	r2, [r4, #12]
 800e97a:	4652      	mov	r2, sl
 800e97c:	6123      	str	r3, [r4, #16]
 800e97e:	6165      	str	r5, [r4, #20]
 800e980:	445b      	add	r3, fp
 800e982:	eba5 050b 	sub.w	r5, r5, fp
 800e986:	6023      	str	r3, [r4, #0]
 800e988:	60a5      	str	r5, [r4, #8]
 800e98a:	4552      	cmp	r2, sl
 800e98c:	bf28      	it	cs
 800e98e:	4652      	movcs	r2, sl
 800e990:	4655      	mov	r5, sl
 800e992:	4649      	mov	r1, r9
 800e994:	6820      	ldr	r0, [r4, #0]
 800e996:	9201      	str	r2, [sp, #4]
 800e998:	f7fb ff4a 	bl	800a830 <memmove>
 800e99c:	68a3      	ldr	r3, [r4, #8]
 800e99e:	9a01      	ldr	r2, [sp, #4]
 800e9a0:	1a9b      	subs	r3, r3, r2
 800e9a2:	60a3      	str	r3, [r4, #8]
 800e9a4:	6823      	ldr	r3, [r4, #0]
 800e9a6:	441a      	add	r2, r3
 800e9a8:	6022      	str	r2, [r4, #0]
 800e9aa:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800e9ae:	44a9      	add	r9, r5
 800e9b0:	ebaa 0a05 	sub.w	sl, sl, r5
 800e9b4:	1b45      	subs	r5, r0, r5
 800e9b6:	f8c8 5008 	str.w	r5, [r8, #8]
 800e9ba:	2d00      	cmp	r5, #0
 800e9bc:	d1a4      	bne.n	800e908 <__sfvwrite_r+0x118>
 800e9be:	e71e      	b.n	800e7fe <__sfvwrite_r+0xe>
 800e9c0:	462a      	mov	r2, r5
 800e9c2:	4630      	mov	r0, r6
 800e9c4:	f7fe fe7e 	bl	800d6c4 <_realloc_r>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	d1d5      	bne.n	800e97a <__sfvwrite_r+0x18a>
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	6921      	ldr	r1, [r4, #16]
 800e9d2:	f7fe f92d 	bl	800cc30 <_free_r>
 800e9d6:	89a3      	ldrh	r3, [r4, #12]
 800e9d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9dc:	81a3      	strh	r3, [r4, #12]
 800e9de:	e7b6      	b.n	800e94e <__sfvwrite_r+0x15e>
 800e9e0:	6923      	ldr	r3, [r4, #16]
 800e9e2:	4283      	cmp	r3, r0
 800e9e4:	d302      	bcc.n	800e9ec <__sfvwrite_r+0x1fc>
 800e9e6:	6961      	ldr	r1, [r4, #20]
 800e9e8:	4551      	cmp	r1, sl
 800e9ea:	d915      	bls.n	800ea18 <__sfvwrite_r+0x228>
 800e9ec:	4552      	cmp	r2, sl
 800e9ee:	bf28      	it	cs
 800e9f0:	4652      	movcs	r2, sl
 800e9f2:	4615      	mov	r5, r2
 800e9f4:	4649      	mov	r1, r9
 800e9f6:	f7fb ff1b 	bl	800a830 <memmove>
 800e9fa:	68a3      	ldr	r3, [r4, #8]
 800e9fc:	6822      	ldr	r2, [r4, #0]
 800e9fe:	1b5b      	subs	r3, r3, r5
 800ea00:	442a      	add	r2, r5
 800ea02:	60a3      	str	r3, [r4, #8]
 800ea04:	6022      	str	r2, [r4, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d1cf      	bne.n	800e9aa <__sfvwrite_r+0x1ba>
 800ea0a:	4621      	mov	r1, r4
 800ea0c:	4630      	mov	r0, r6
 800ea0e:	f7ff fdf1 	bl	800e5f4 <_fflush_r>
 800ea12:	2800      	cmp	r0, #0
 800ea14:	d0c9      	beq.n	800e9aa <__sfvwrite_r+0x1ba>
 800ea16:	e79c      	b.n	800e952 <__sfvwrite_r+0x162>
 800ea18:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ea1c:	459a      	cmp	sl, r3
 800ea1e:	bf38      	it	cc
 800ea20:	4653      	movcc	r3, sl
 800ea22:	fb93 f3f1 	sdiv	r3, r3, r1
 800ea26:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ea28:	434b      	muls	r3, r1
 800ea2a:	464a      	mov	r2, r9
 800ea2c:	4630      	mov	r0, r6
 800ea2e:	69e1      	ldr	r1, [r4, #28]
 800ea30:	47a8      	blx	r5
 800ea32:	1e05      	subs	r5, r0, #0
 800ea34:	dcb9      	bgt.n	800e9aa <__sfvwrite_r+0x1ba>
 800ea36:	e78c      	b.n	800e952 <__sfvwrite_r+0x162>
 800ea38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ea3c:	2000      	movs	r0, #0
 800ea3e:	3708      	adds	r7, #8
 800ea40:	e6f4      	b.n	800e82c <__sfvwrite_r+0x3c>
 800ea42:	f10b 0901 	add.w	r9, fp, #1
 800ea46:	e701      	b.n	800e84c <__sfvwrite_r+0x5c>
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	dc08      	bgt.n	800ea5e <__sfvwrite_r+0x26e>
 800ea4c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ea4e:	4652      	mov	r2, sl
 800ea50:	4630      	mov	r0, r6
 800ea52:	69e1      	ldr	r1, [r4, #28]
 800ea54:	47a8      	blx	r5
 800ea56:	1e05      	subs	r5, r0, #0
 800ea58:	f73f af14 	bgt.w	800e884 <__sfvwrite_r+0x94>
 800ea5c:	e779      	b.n	800e952 <__sfvwrite_r+0x162>
 800ea5e:	4651      	mov	r1, sl
 800ea60:	9201      	str	r2, [sp, #4]
 800ea62:	f7fb fee5 	bl	800a830 <memmove>
 800ea66:	9a01      	ldr	r2, [sp, #4]
 800ea68:	68a3      	ldr	r3, [r4, #8]
 800ea6a:	4615      	mov	r5, r2
 800ea6c:	1a9b      	subs	r3, r3, r2
 800ea6e:	60a3      	str	r3, [r4, #8]
 800ea70:	6823      	ldr	r3, [r4, #0]
 800ea72:	4413      	add	r3, r2
 800ea74:	6023      	str	r3, [r4, #0]
 800ea76:	e705      	b.n	800e884 <__sfvwrite_r+0x94>
 800ea78:	2001      	movs	r0, #1
 800ea7a:	e70d      	b.n	800e898 <__sfvwrite_r+0xa8>
 800ea7c:	7ffffc00 	.word	0x7ffffc00

0800ea80 <_fwalk_reent>:
 800ea80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea84:	4606      	mov	r6, r0
 800ea86:	4688      	mov	r8, r1
 800ea88:	2700      	movs	r7, #0
 800ea8a:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800ea8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea92:	f1b9 0901 	subs.w	r9, r9, #1
 800ea96:	d505      	bpl.n	800eaa4 <_fwalk_reent+0x24>
 800ea98:	6824      	ldr	r4, [r4, #0]
 800ea9a:	2c00      	cmp	r4, #0
 800ea9c:	d1f7      	bne.n	800ea8e <_fwalk_reent+0xe>
 800ea9e:	4638      	mov	r0, r7
 800eaa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaa4:	89ab      	ldrh	r3, [r5, #12]
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	d907      	bls.n	800eaba <_fwalk_reent+0x3a>
 800eaaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eaae:	3301      	adds	r3, #1
 800eab0:	d003      	beq.n	800eaba <_fwalk_reent+0x3a>
 800eab2:	4629      	mov	r1, r5
 800eab4:	4630      	mov	r0, r6
 800eab6:	47c0      	blx	r8
 800eab8:	4307      	orrs	r7, r0
 800eaba:	3568      	adds	r5, #104	; 0x68
 800eabc:	e7e9      	b.n	800ea92 <_fwalk_reent+0x12>

0800eabe <__swhatbuf_r>:
 800eabe:	b570      	push	{r4, r5, r6, lr}
 800eac0:	460e      	mov	r6, r1
 800eac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eac6:	4614      	mov	r4, r2
 800eac8:	2900      	cmp	r1, #0
 800eaca:	461d      	mov	r5, r3
 800eacc:	b096      	sub	sp, #88	; 0x58
 800eace:	da0a      	bge.n	800eae6 <__swhatbuf_r+0x28>
 800ead0:	2300      	movs	r3, #0
 800ead2:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 800ead6:	602b      	str	r3, [r5, #0]
 800ead8:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 800eadc:	d116      	bne.n	800eb0c <__swhatbuf_r+0x4e>
 800eade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eae2:	6023      	str	r3, [r4, #0]
 800eae4:	e015      	b.n	800eb12 <__swhatbuf_r+0x54>
 800eae6:	466a      	mov	r2, sp
 800eae8:	f000 f972 	bl	800edd0 <_fstat_r>
 800eaec:	2800      	cmp	r0, #0
 800eaee:	dbef      	blt.n	800ead0 <__swhatbuf_r+0x12>
 800eaf0:	9a01      	ldr	r2, [sp, #4]
 800eaf2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800eaf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eafa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eafe:	425a      	negs	r2, r3
 800eb00:	415a      	adcs	r2, r3
 800eb02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb06:	602a      	str	r2, [r5, #0]
 800eb08:	6023      	str	r3, [r4, #0]
 800eb0a:	e002      	b.n	800eb12 <__swhatbuf_r+0x54>
 800eb0c:	2240      	movs	r2, #64	; 0x40
 800eb0e:	4618      	mov	r0, r3
 800eb10:	6022      	str	r2, [r4, #0]
 800eb12:	b016      	add	sp, #88	; 0x58
 800eb14:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eb18 <__smakebuf_r>:
 800eb18:	898b      	ldrh	r3, [r1, #12]
 800eb1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb1c:	079d      	lsls	r5, r3, #30
 800eb1e:	4606      	mov	r6, r0
 800eb20:	460c      	mov	r4, r1
 800eb22:	d507      	bpl.n	800eb34 <__smakebuf_r+0x1c>
 800eb24:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800eb28:	6023      	str	r3, [r4, #0]
 800eb2a:	6123      	str	r3, [r4, #16]
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	6163      	str	r3, [r4, #20]
 800eb30:	b002      	add	sp, #8
 800eb32:	bd70      	pop	{r4, r5, r6, pc}
 800eb34:	466a      	mov	r2, sp
 800eb36:	ab01      	add	r3, sp, #4
 800eb38:	f7ff ffc1 	bl	800eabe <__swhatbuf_r>
 800eb3c:	9900      	ldr	r1, [sp, #0]
 800eb3e:	4605      	mov	r5, r0
 800eb40:	4630      	mov	r0, r6
 800eb42:	f7fb fc1b 	bl	800a37c <_malloc_r>
 800eb46:	b948      	cbnz	r0, 800eb5c <__smakebuf_r+0x44>
 800eb48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb4c:	059a      	lsls	r2, r3, #22
 800eb4e:	d4ef      	bmi.n	800eb30 <__smakebuf_r+0x18>
 800eb50:	f023 0303 	bic.w	r3, r3, #3
 800eb54:	f043 0302 	orr.w	r3, r3, #2
 800eb58:	81a3      	strh	r3, [r4, #12]
 800eb5a:	e7e3      	b.n	800eb24 <__smakebuf_r+0xc>
 800eb5c:	4b0d      	ldr	r3, [pc, #52]	; (800eb94 <__smakebuf_r+0x7c>)
 800eb5e:	63f3      	str	r3, [r6, #60]	; 0x3c
 800eb60:	89a3      	ldrh	r3, [r4, #12]
 800eb62:	6020      	str	r0, [r4, #0]
 800eb64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb68:	81a3      	strh	r3, [r4, #12]
 800eb6a:	9b00      	ldr	r3, [sp, #0]
 800eb6c:	6120      	str	r0, [r4, #16]
 800eb6e:	6163      	str	r3, [r4, #20]
 800eb70:	9b01      	ldr	r3, [sp, #4]
 800eb72:	b15b      	cbz	r3, 800eb8c <__smakebuf_r+0x74>
 800eb74:	4630      	mov	r0, r6
 800eb76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb7a:	f000 f93b 	bl	800edf4 <_isatty_r>
 800eb7e:	b128      	cbz	r0, 800eb8c <__smakebuf_r+0x74>
 800eb80:	89a3      	ldrh	r3, [r4, #12]
 800eb82:	f023 0303 	bic.w	r3, r3, #3
 800eb86:	f043 0301 	orr.w	r3, r3, #1
 800eb8a:	81a3      	strh	r3, [r4, #12]
 800eb8c:	89a0      	ldrh	r0, [r4, #12]
 800eb8e:	4305      	orrs	r5, r0
 800eb90:	81a5      	strh	r5, [r4, #12]
 800eb92:	e7cd      	b.n	800eb30 <__smakebuf_r+0x18>
 800eb94:	0800e691 	.word	0x0800e691

0800eb98 <__sread>:
 800eb98:	b510      	push	{r4, lr}
 800eb9a:	460c      	mov	r4, r1
 800eb9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eba0:	f000 f94a 	bl	800ee38 <_read_r>
 800eba4:	2800      	cmp	r0, #0
 800eba6:	bfab      	itete	ge
 800eba8:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800ebaa:	89a3      	ldrhlt	r3, [r4, #12]
 800ebac:	181b      	addge	r3, r3, r0
 800ebae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ebb2:	bfac      	ite	ge
 800ebb4:	6523      	strge	r3, [r4, #80]	; 0x50
 800ebb6:	81a3      	strhlt	r3, [r4, #12]
 800ebb8:	bd10      	pop	{r4, pc}

0800ebba <__swrite>:
 800ebba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebbe:	461f      	mov	r7, r3
 800ebc0:	898b      	ldrh	r3, [r1, #12]
 800ebc2:	4605      	mov	r5, r0
 800ebc4:	05db      	lsls	r3, r3, #23
 800ebc6:	460c      	mov	r4, r1
 800ebc8:	4616      	mov	r6, r2
 800ebca:	d505      	bpl.n	800ebd8 <__swrite+0x1e>
 800ebcc:	2302      	movs	r3, #2
 800ebce:	2200      	movs	r2, #0
 800ebd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebd4:	f000 f91e 	bl	800ee14 <_lseek_r>
 800ebd8:	89a3      	ldrh	r3, [r4, #12]
 800ebda:	4632      	mov	r2, r6
 800ebdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ebe0:	81a3      	strh	r3, [r4, #12]
 800ebe2:	4628      	mov	r0, r5
 800ebe4:	463b      	mov	r3, r7
 800ebe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebee:	f000 b875 	b.w	800ecdc <_write_r>

0800ebf2 <__sseek>:
 800ebf2:	b510      	push	{r4, lr}
 800ebf4:	460c      	mov	r4, r1
 800ebf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebfa:	f000 f90b 	bl	800ee14 <_lseek_r>
 800ebfe:	1c43      	adds	r3, r0, #1
 800ec00:	89a3      	ldrh	r3, [r4, #12]
 800ec02:	bf15      	itete	ne
 800ec04:	6520      	strne	r0, [r4, #80]	; 0x50
 800ec06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ec0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ec0e:	81a3      	strheq	r3, [r4, #12]
 800ec10:	bf18      	it	ne
 800ec12:	81a3      	strhne	r3, [r4, #12]
 800ec14:	bd10      	pop	{r4, pc}

0800ec16 <__sclose>:
 800ec16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec1a:	f000 b871 	b.w	800ed00 <_close_r>

0800ec1e <__swbuf_r>:
 800ec1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec20:	460e      	mov	r6, r1
 800ec22:	4614      	mov	r4, r2
 800ec24:	4605      	mov	r5, r0
 800ec26:	b118      	cbz	r0, 800ec30 <__swbuf_r+0x12>
 800ec28:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ec2a:	b90b      	cbnz	r3, 800ec30 <__swbuf_r+0x12>
 800ec2c:	f7ff fd4e 	bl	800e6cc <__sinit>
 800ec30:	69a3      	ldr	r3, [r4, #24]
 800ec32:	60a3      	str	r3, [r4, #8]
 800ec34:	89a3      	ldrh	r3, [r4, #12]
 800ec36:	0719      	lsls	r1, r3, #28
 800ec38:	d529      	bpl.n	800ec8e <__swbuf_r+0x70>
 800ec3a:	6923      	ldr	r3, [r4, #16]
 800ec3c:	b33b      	cbz	r3, 800ec8e <__swbuf_r+0x70>
 800ec3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec42:	b2f6      	uxtb	r6, r6
 800ec44:	049a      	lsls	r2, r3, #18
 800ec46:	4637      	mov	r7, r6
 800ec48:	d52a      	bpl.n	800eca0 <__swbuf_r+0x82>
 800ec4a:	6823      	ldr	r3, [r4, #0]
 800ec4c:	6920      	ldr	r0, [r4, #16]
 800ec4e:	1a18      	subs	r0, r3, r0
 800ec50:	6963      	ldr	r3, [r4, #20]
 800ec52:	4283      	cmp	r3, r0
 800ec54:	dc04      	bgt.n	800ec60 <__swbuf_r+0x42>
 800ec56:	4621      	mov	r1, r4
 800ec58:	4628      	mov	r0, r5
 800ec5a:	f7ff fccb 	bl	800e5f4 <_fflush_r>
 800ec5e:	b9e0      	cbnz	r0, 800ec9a <__swbuf_r+0x7c>
 800ec60:	68a3      	ldr	r3, [r4, #8]
 800ec62:	3b01      	subs	r3, #1
 800ec64:	60a3      	str	r3, [r4, #8]
 800ec66:	6823      	ldr	r3, [r4, #0]
 800ec68:	1c5a      	adds	r2, r3, #1
 800ec6a:	6022      	str	r2, [r4, #0]
 800ec6c:	701e      	strb	r6, [r3, #0]
 800ec6e:	6962      	ldr	r2, [r4, #20]
 800ec70:	1c43      	adds	r3, r0, #1
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d004      	beq.n	800ec80 <__swbuf_r+0x62>
 800ec76:	89a3      	ldrh	r3, [r4, #12]
 800ec78:	07db      	lsls	r3, r3, #31
 800ec7a:	d506      	bpl.n	800ec8a <__swbuf_r+0x6c>
 800ec7c:	2e0a      	cmp	r6, #10
 800ec7e:	d104      	bne.n	800ec8a <__swbuf_r+0x6c>
 800ec80:	4621      	mov	r1, r4
 800ec82:	4628      	mov	r0, r5
 800ec84:	f7ff fcb6 	bl	800e5f4 <_fflush_r>
 800ec88:	b938      	cbnz	r0, 800ec9a <__swbuf_r+0x7c>
 800ec8a:	4638      	mov	r0, r7
 800ec8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec8e:	4621      	mov	r1, r4
 800ec90:	4628      	mov	r0, r5
 800ec92:	f7ff fbcd 	bl	800e430 <__swsetup_r>
 800ec96:	2800      	cmp	r0, #0
 800ec98:	d0d1      	beq.n	800ec3e <__swbuf_r+0x20>
 800ec9a:	f04f 37ff 	mov.w	r7, #4294967295
 800ec9e:	e7f4      	b.n	800ec8a <__swbuf_r+0x6c>
 800eca0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800eca4:	81a3      	strh	r3, [r4, #12]
 800eca6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eca8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ecac:	6663      	str	r3, [r4, #100]	; 0x64
 800ecae:	e7cc      	b.n	800ec4a <__swbuf_r+0x2c>

0800ecb0 <_wcrtomb_r>:
 800ecb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecb2:	4c09      	ldr	r4, [pc, #36]	; (800ecd8 <_wcrtomb_r+0x28>)
 800ecb4:	4605      	mov	r5, r0
 800ecb6:	461e      	mov	r6, r3
 800ecb8:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800ecbc:	b085      	sub	sp, #20
 800ecbe:	b909      	cbnz	r1, 800ecc4 <_wcrtomb_r+0x14>
 800ecc0:	460a      	mov	r2, r1
 800ecc2:	a901      	add	r1, sp, #4
 800ecc4:	47b8      	blx	r7
 800ecc6:	1c43      	adds	r3, r0, #1
 800ecc8:	bf01      	itttt	eq
 800ecca:	2300      	moveq	r3, #0
 800eccc:	6033      	streq	r3, [r6, #0]
 800ecce:	238a      	moveq	r3, #138	; 0x8a
 800ecd0:	602b      	streq	r3, [r5, #0]
 800ecd2:	b005      	add	sp, #20
 800ecd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	2000084c 	.word	0x2000084c

0800ecdc <_write_r>:
 800ecdc:	b538      	push	{r3, r4, r5, lr}
 800ecde:	4604      	mov	r4, r0
 800ece0:	4608      	mov	r0, r1
 800ece2:	4611      	mov	r1, r2
 800ece4:	2200      	movs	r2, #0
 800ece6:	4d05      	ldr	r5, [pc, #20]	; (800ecfc <_write_r+0x20>)
 800ece8:	602a      	str	r2, [r5, #0]
 800ecea:	461a      	mov	r2, r3
 800ecec:	f7f2 ffbe 	bl	8001c6c <_write>
 800ecf0:	1c43      	adds	r3, r0, #1
 800ecf2:	d102      	bne.n	800ecfa <_write_r+0x1e>
 800ecf4:	682b      	ldr	r3, [r5, #0]
 800ecf6:	b103      	cbz	r3, 800ecfa <_write_r+0x1e>
 800ecf8:	6023      	str	r3, [r4, #0]
 800ecfa:	bd38      	pop	{r3, r4, r5, pc}
 800ecfc:	20000d24 	.word	0x20000d24

0800ed00 <_close_r>:
 800ed00:	b538      	push	{r3, r4, r5, lr}
 800ed02:	2300      	movs	r3, #0
 800ed04:	4d05      	ldr	r5, [pc, #20]	; (800ed1c <_close_r+0x1c>)
 800ed06:	4604      	mov	r4, r0
 800ed08:	4608      	mov	r0, r1
 800ed0a:	602b      	str	r3, [r5, #0]
 800ed0c:	f7f2 ffca 	bl	8001ca4 <_close>
 800ed10:	1c43      	adds	r3, r0, #1
 800ed12:	d102      	bne.n	800ed1a <_close_r+0x1a>
 800ed14:	682b      	ldr	r3, [r5, #0]
 800ed16:	b103      	cbz	r3, 800ed1a <_close_r+0x1a>
 800ed18:	6023      	str	r3, [r4, #0]
 800ed1a:	bd38      	pop	{r3, r4, r5, pc}
 800ed1c:	20000d24 	.word	0x20000d24

0800ed20 <_fclose_r>:
 800ed20:	b570      	push	{r4, r5, r6, lr}
 800ed22:	4606      	mov	r6, r0
 800ed24:	460c      	mov	r4, r1
 800ed26:	b911      	cbnz	r1, 800ed2e <_fclose_r+0xe>
 800ed28:	2500      	movs	r5, #0
 800ed2a:	4628      	mov	r0, r5
 800ed2c:	bd70      	pop	{r4, r5, r6, pc}
 800ed2e:	b118      	cbz	r0, 800ed38 <_fclose_r+0x18>
 800ed30:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ed32:	b90b      	cbnz	r3, 800ed38 <_fclose_r+0x18>
 800ed34:	f7ff fcca 	bl	800e6cc <__sinit>
 800ed38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed3a:	07d8      	lsls	r0, r3, #31
 800ed3c:	d405      	bmi.n	800ed4a <_fclose_r+0x2a>
 800ed3e:	89a3      	ldrh	r3, [r4, #12]
 800ed40:	0599      	lsls	r1, r3, #22
 800ed42:	d402      	bmi.n	800ed4a <_fclose_r+0x2a>
 800ed44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed46:	f7fe f839 	bl	800cdbc <__retarget_lock_acquire_recursive>
 800ed4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed4e:	b93b      	cbnz	r3, 800ed60 <_fclose_r+0x40>
 800ed50:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800ed52:	f015 0501 	ands.w	r5, r5, #1
 800ed56:	d1e7      	bne.n	800ed28 <_fclose_r+0x8>
 800ed58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed5a:	f7fe f830 	bl	800cdbe <__retarget_lock_release_recursive>
 800ed5e:	e7e4      	b.n	800ed2a <_fclose_r+0xa>
 800ed60:	4621      	mov	r1, r4
 800ed62:	4630      	mov	r0, r6
 800ed64:	f7ff fbbc 	bl	800e4e0 <__sflush_r>
 800ed68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ed6a:	4605      	mov	r5, r0
 800ed6c:	b133      	cbz	r3, 800ed7c <_fclose_r+0x5c>
 800ed6e:	4630      	mov	r0, r6
 800ed70:	69e1      	ldr	r1, [r4, #28]
 800ed72:	4798      	blx	r3
 800ed74:	2800      	cmp	r0, #0
 800ed76:	bfb8      	it	lt
 800ed78:	f04f 35ff 	movlt.w	r5, #4294967295
 800ed7c:	89a3      	ldrh	r3, [r4, #12]
 800ed7e:	061a      	lsls	r2, r3, #24
 800ed80:	d503      	bpl.n	800ed8a <_fclose_r+0x6a>
 800ed82:	4630      	mov	r0, r6
 800ed84:	6921      	ldr	r1, [r4, #16]
 800ed86:	f7fd ff53 	bl	800cc30 <_free_r>
 800ed8a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ed8c:	b141      	cbz	r1, 800eda0 <_fclose_r+0x80>
 800ed8e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800ed92:	4299      	cmp	r1, r3
 800ed94:	d002      	beq.n	800ed9c <_fclose_r+0x7c>
 800ed96:	4630      	mov	r0, r6
 800ed98:	f7fd ff4a 	bl	800cc30 <_free_r>
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	6323      	str	r3, [r4, #48]	; 0x30
 800eda0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800eda2:	b121      	cbz	r1, 800edae <_fclose_r+0x8e>
 800eda4:	4630      	mov	r0, r6
 800eda6:	f7fd ff43 	bl	800cc30 <_free_r>
 800edaa:	2300      	movs	r3, #0
 800edac:	6463      	str	r3, [r4, #68]	; 0x44
 800edae:	f7ff fc75 	bl	800e69c <__sfp_lock_acquire>
 800edb2:	2300      	movs	r3, #0
 800edb4:	81a3      	strh	r3, [r4, #12]
 800edb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800edb8:	07db      	lsls	r3, r3, #31
 800edba:	d402      	bmi.n	800edc2 <_fclose_r+0xa2>
 800edbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edbe:	f7fd fffe 	bl	800cdbe <__retarget_lock_release_recursive>
 800edc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edc4:	f7fd fff9 	bl	800cdba <__retarget_lock_close_recursive>
 800edc8:	f7ff fc6e 	bl	800e6a8 <__sfp_lock_release>
 800edcc:	e7ad      	b.n	800ed2a <_fclose_r+0xa>
	...

0800edd0 <_fstat_r>:
 800edd0:	b538      	push	{r3, r4, r5, lr}
 800edd2:	2300      	movs	r3, #0
 800edd4:	4d06      	ldr	r5, [pc, #24]	; (800edf0 <_fstat_r+0x20>)
 800edd6:	4604      	mov	r4, r0
 800edd8:	4608      	mov	r0, r1
 800edda:	4611      	mov	r1, r2
 800eddc:	602b      	str	r3, [r5, #0]
 800edde:	f7f2 ff6c 	bl	8001cba <_fstat>
 800ede2:	1c43      	adds	r3, r0, #1
 800ede4:	d102      	bne.n	800edec <_fstat_r+0x1c>
 800ede6:	682b      	ldr	r3, [r5, #0]
 800ede8:	b103      	cbz	r3, 800edec <_fstat_r+0x1c>
 800edea:	6023      	str	r3, [r4, #0]
 800edec:	bd38      	pop	{r3, r4, r5, pc}
 800edee:	bf00      	nop
 800edf0:	20000d24 	.word	0x20000d24

0800edf4 <_isatty_r>:
 800edf4:	b538      	push	{r3, r4, r5, lr}
 800edf6:	2300      	movs	r3, #0
 800edf8:	4d05      	ldr	r5, [pc, #20]	; (800ee10 <_isatty_r+0x1c>)
 800edfa:	4604      	mov	r4, r0
 800edfc:	4608      	mov	r0, r1
 800edfe:	602b      	str	r3, [r5, #0]
 800ee00:	f7f2 ff6a 	bl	8001cd8 <_isatty>
 800ee04:	1c43      	adds	r3, r0, #1
 800ee06:	d102      	bne.n	800ee0e <_isatty_r+0x1a>
 800ee08:	682b      	ldr	r3, [r5, #0]
 800ee0a:	b103      	cbz	r3, 800ee0e <_isatty_r+0x1a>
 800ee0c:	6023      	str	r3, [r4, #0]
 800ee0e:	bd38      	pop	{r3, r4, r5, pc}
 800ee10:	20000d24 	.word	0x20000d24

0800ee14 <_lseek_r>:
 800ee14:	b538      	push	{r3, r4, r5, lr}
 800ee16:	4604      	mov	r4, r0
 800ee18:	4608      	mov	r0, r1
 800ee1a:	4611      	mov	r1, r2
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	4d05      	ldr	r5, [pc, #20]	; (800ee34 <_lseek_r+0x20>)
 800ee20:	602a      	str	r2, [r5, #0]
 800ee22:	461a      	mov	r2, r3
 800ee24:	f7f2 ff62 	bl	8001cec <_lseek>
 800ee28:	1c43      	adds	r3, r0, #1
 800ee2a:	d102      	bne.n	800ee32 <_lseek_r+0x1e>
 800ee2c:	682b      	ldr	r3, [r5, #0]
 800ee2e:	b103      	cbz	r3, 800ee32 <_lseek_r+0x1e>
 800ee30:	6023      	str	r3, [r4, #0]
 800ee32:	bd38      	pop	{r3, r4, r5, pc}
 800ee34:	20000d24 	.word	0x20000d24

0800ee38 <_read_r>:
 800ee38:	b538      	push	{r3, r4, r5, lr}
 800ee3a:	4604      	mov	r4, r0
 800ee3c:	4608      	mov	r0, r1
 800ee3e:	4611      	mov	r1, r2
 800ee40:	2200      	movs	r2, #0
 800ee42:	4d05      	ldr	r5, [pc, #20]	; (800ee58 <_read_r+0x20>)
 800ee44:	602a      	str	r2, [r5, #0]
 800ee46:	461a      	mov	r2, r3
 800ee48:	f7f2 fef3 	bl	8001c32 <_read>
 800ee4c:	1c43      	adds	r3, r0, #1
 800ee4e:	d102      	bne.n	800ee56 <_read_r+0x1e>
 800ee50:	682b      	ldr	r3, [r5, #0]
 800ee52:	b103      	cbz	r3, 800ee56 <_read_r+0x1e>
 800ee54:	6023      	str	r3, [r4, #0]
 800ee56:	bd38      	pop	{r3, r4, r5, pc}
 800ee58:	20000d24 	.word	0x20000d24

0800ee5c <_init>:
 800ee5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee5e:	bf00      	nop
 800ee60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee62:	bc08      	pop	{r3}
 800ee64:	469e      	mov	lr, r3
 800ee66:	4770      	bx	lr

0800ee68 <_fini>:
 800ee68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee6a:	bf00      	nop
 800ee6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee6e:	bc08      	pop	{r3}
 800ee70:	469e      	mov	lr, r3
 800ee72:	4770      	bx	lr
